
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\AvaloniaThemeManager.csproj
================================================================================

<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
  <PackageId>AvaloniaSkinManager</PackageId>
  <Version>1.0.3</Version>
  <Authors>Jon Sales</Authors>
  <Company>Independant</Company>
  <Product>AvaloniaSkinManager</Product>
  <Title>Avalonia Theme Manager</Title>
  <Description>A comprehensive theme management system for Avalonia UI applications with built-in themes, custom theme support, and seamless theme switching capabilities.</Description>
  <PackageTags>avalonia;theme;theming;ui;dark-mode;light-mode;skin</PackageTags>
  <PackageProjectUrl>https://github.com/JonMichaelSales/AvaloniaThemeManager</PackageProjectUrl>
  <RepositoryUrl>https://github.com/JonMichaelSales/AvaloniaThemeManager</RepositoryUrl>
  <RepositoryType>git</RepositoryType>
  <PackageLicenseExpression>MIT</PackageLicenseExpression>
  <PackageIcon>icon.png</PackageIcon>
  <PackageReadmeFile>README.md</PackageReadmeFile>
  <PackageReleaseNotes>Initial release with comprehensive theme management capabilities.</PackageReleaseNotes>
  <Copyright>Copyright (c) 2025 Jon Sales</Copyright>
  <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
  <FileVersion>1.0.0.3</FileVersion>
  <AssemblyVersion>1.0.0.3</AssemblyVersion>
  </PropertyGroup>
  <ItemGroup>
    <None Remove="Icons\Assets\jonBuilt.ico" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Include="Icons\Assets\jonBuilt.ico">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Themes\Cyberpunk\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Themes\Dark\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <Content Include="Themes\Forest Green\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Themes\Forest Green\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Themes\Forest Green\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Themes\High Contrast\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Themes\High Contrast\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <Content Include="Themes\High Contrast\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
    <AvaloniaResource Include="Themes\Light\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Themes\ModernIce\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Themes\Ocean Blue\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Themes\Purple Haze\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Include="Themes\RetroTerminal\theme.json">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Avalonia.Fonts.Inter" Version="11.3.0" />
    <PackageReference Include="Avalonia.Themes.Fluent" Version="11.3.0" />
    <PackageReference Include="Microsoft.Extensions.Logging.Console" Version="9.0.5" />
  </ItemGroup>

  <ItemGroup>
    <AvaloniaResource Update="Themes\Cyberpunk\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Dark\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Dark\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Light\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Light\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\ModernIce\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Ocean Blue\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Ocean Blue\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Purple Haze\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\Purple Haze\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\Button.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\CheckBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\ComboBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\Expander.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\Slider.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\TabControl.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\TextBlock.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
    <AvaloniaResource Update="Themes\RetroTerminal\ControlThemes\TextBox.axaml">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </AvaloniaResource>
  </ItemGroup>

</Project>

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\README.md
================================================================================

# AvaloniaThemeManager

A comprehensive theme management library for Avalonia UI applications with multiple built-in themes, dynamic theme switching, and extensive control styling.

[![NuGet Version](https://img.shields.io/nuget/v/AvaloniaThemeManager.svg)](https://www.nuget.org/packages/AvaloniaThemeManager/)
[![NuGet Downloads](https://img.shields.io/nuget/dt/AvaloniaThemeManager.svg)](https://www.nuget.org/packages/AvaloniaThemeManager/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## Features

- **7 Built-in Themes**: Dark, Light, Ocean Blue, Forest Green, Purple Haze, High Contrast, and Cyberpunk
- **Dynamic Theme Switching**: Change themes at runtime with smooth transitions
- **Persistent Settings**: Automatically saves and restores user theme preferences
- **Comprehensive Styling**: Extensive theme support for all major Avalonia controls
- **Quick Switcher Control**: Ready-to-use theme switcher component
- **Theme Settings Dialog**: Complete settings UI for theme management
- **MVVM Architecture**: Reactive and clean separation of concerns
- **Easy Integration**: Simple setup with AppBuilder extensions

## Installation

Install via NuGet Package Manager:

```bash
dotnet add package AvaloniaThemeManager
```

Or via Package Manager Console:

```powershell
Install-Package AvaloniaThemeManager
```

## Quick Start

### 1. Setup in Program.cs

```csharp
using Avalonia;
using AvaloniaThemeManager.Extensions;

public static AppBuilder BuildAvaloniaApp()
    => AppBuilder.Configure<App>()
        .UsePlatformDetect()
        .UseThemeManager() // Add this line
        .LogToTrace()
        .UseReactiveUI();
```

### 2. Include Styles in App.axaml

```xml
<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="YourApp.App">
    <Application.Resources>
            <ResourceDictionary>
            <!-- Include the skin manager ControlTheme resources -->            
            <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/CustomThemes.axaml" />
        </ResourceDictionary>
    <Application.Styles>
        <FluentTheme />
        <!-- Include AvaloniaThemeManager styles -->
        
    </Application.Styles>
</Application>
```

### 3. Basic Theme Switching

```csharp
using AvaloniaThemeManager.Theme;

// Switch to a different theme
SkinManager.Instance.ApplySkin("Dark");
SkinManager.Instance.ApplySkin("Ocean Blue");
SkinManager.Instance.ApplySkin("Cyberpunk");

// Get available themes
var availableThemes = SkinManager.Instance.GetAvailableSkinNames();

// Listen for theme changes
SkinManager.Instance.SkinChanged += (sender, args) =>
{
    Console.WriteLine("Theme changed!");
};
```

## Built-in Themes

| Theme Name | Description | Preview |
|------------|-------------|---------|
| **Dark** | Professional dark theme with blue accents | ![Dark Theme](https://via.placeholder.com/100x60/2C313D/FFFFFF?text=Dark) |
| **Light** | Clean light theme perfect for bright environments | ![Light Theme](https://via.placeholder.com/100x60/F5F5F5/333333?text=Light) |
| **Ocean Blue** | Deep blue theme inspired by ocean depths | ![Ocean Blue](https://via.placeholder.com/100x60/0F2A4A/FFFFFF?text=Ocean) |
| **Forest Green** | Nature-inspired green theme | ![Forest Green](https://via.placeholder.com/100x60/1B3A2D/FFFFFF?text=Forest) |
| **Purple Haze** | Rich purple theme with mystical vibes | ![Purple Haze](https://via.placeholder.com/100x60/301E4E/FFFFFF?text=Purple) |
| **High Contrast** | Maximum contrast for accessibility | ![High Contrast](https://via.placeholder.com/100x60/000000/FFFFFF?text=Contrast) |
| **Cyberpunk** | Futuristic neon theme with hot pink accents | ![Cyberpunk](https://via.placeholder.com/100x60/0A0321/F0F0FF?text=Cyber) |

## Usage Examples

### Using the Quick Theme Switcher Control

```xml
<UserControl xmlns:controls="clr-namespace:AvaloniaThemeManager.Controls;assembly=AvaloniaThemeManager">
    <StackPanel>
        <!-- Quick theme switcher dropdown -->
        <controls:QuickThemeSwitcher />
        
        <!-- Your other UI elements -->
        <Button Content="Sample Button" />
        <TextBox Watermark="Sample TextBox" />
    </StackPanel>
</UserControl>
```

### Opening the Theme Settings Dialog

```csharp
using AvaloniaThemeManager.Views;

private async void OpenThemeSettings()
{
    var dialog = new ThemeSettingsDialog();
    await dialog.ShowDialog(this); // 'this' is your parent window
}
```

### Creating Custom Themes

```csharp
using AvaloniaThemeManager.Theme;
using Avalonia.Media;

// Create a custom theme
var customTheme = new Skin
{
    Name = "My Custom Theme",
    PrimaryColor = Color.Parse("#FF6B6B"),
    SecondaryColor = Color.Parse("#4ECDC4"),
    AccentColor = Color.Parse("#45B7D1"),
    PrimaryBackground = Color.Parse("#2C3E50"),
    SecondaryBackground = Color.Parse("#34495E"),
    PrimaryTextColor = Color.Parse("#FFFFFF"),
    SecondaryTextColor = Color.Parse("#BDC3C7"),
    BorderColor = Color.Parse("#7F8C8D"),
    ErrorColor = Color.Parse("#E74C3C"),
    WarningColor = Color.Parse("#F39C12"),
    SuccessColor = Color.Parse("#2ECC71")
};

// Register and apply the custom theme
SkinManager.Instance.RegisterSkin("Custom", customTheme);
SkinManager.Instance.ApplySkin("Custom");
```

### Advanced Configuration

```csharp
// Configure theme manager during startup
public static AppBuilder BuildAvaloniaApp()
    => AppBuilder.Configure<App>()
        .UsePlatformDetect()
        .UseThemeManager(manager =>
        {
            // Register custom themes
            manager.RegisterSkin("Corporate", corporateTheme);
            
            // Set default theme
            manager.ApplySkin("Dark");
        })
        .LogToTrace()
        .UseReactiveUI();
```

## MVVM Integration

### Theme Settings ViewModel

```csharp
using AvaloniaThemeManager.ViewModels;

public class MainWindowViewModel : ViewModelBase
{
    public ThemeSettingsViewModel ThemeSettings { get; }
    
    public MainWindowViewModel()
    {
        ThemeSettings = new ThemeSettingsViewModel();
    }
}
```

### Data Binding in XAML

```xml
<Window xmlns:vm="clr-namespace:AvaloniaThemeManager.ViewModels;assembly=AvaloniaThemeManager">
    <ComboBox ItemsSource="{Binding ThemeSettings.AvailableThemes}"
              SelectedItem="{Binding ThemeSettings.SelectedTheme}">
        <ComboBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal" Spacing="8">
                    <Ellipse Width="12" Height="12" Fill="{Binding PreviewColor}" />
                    <TextBlock Text="{Binding Name}" />
                </StackPanel>
            </DataTemplate>
        </ComboBox.ItemTemplate>
    </ComboBox>
</Window>
```

## Styled Controls

AvaloniaThemeManager provides comprehensive styling for:

- **Buttons** (Primary, Secondary, Browse, Toolbar variants)
- **TextBoxes** (Standard, Dialog variants)
- **ComboBoxes** and ComboBoxItems
- **CheckBoxes** with custom styling
- **TabControls** and TabItems
- **Borders** (Default, Card, Status Bar, Toolbar variants)
- **TextBlocks** (Various typography styles)
- **Separators** (Horizontal and Vertical)
- **PathIcons** with multiple size variants
- **Expanders** with animated transitions
- **Windows** (Default and Dialog variants)

## Persistence

Theme preferences are automatically saved to:
- **Windows**: `%LocalAppData%/ResumeForge/appsettings.json`
- **macOS**: `~/Library/Application Support/ResumeForge/appsettings.json`
- **Linux**: `~/.local/share/ResumeForge/appsettings.json`

## Requirements

- **.NET 8.0** or higher
- **Avalonia UI 11.3.0** or higher
- **C# 12** language features

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.

### Development Setup

1. Clone the repository
2. Open in Visual Studio 2022 or JetBrains Rider
3. Restore NuGet packages
4. Build and run the sample application

### Adding New Themes

1. Create a new `Skin` object with your color scheme
2. Register it in `SkinManager.RegisterDefaultSkins()`
3. Add theme description in `GetThemeDescription()` method
4. Test with all styled controls

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Changelog

### v1.0.0 (2025-01-XX)
- Initial release
- 7 built-in themes
- Comprehensive control styling
- Dynamic theme switching
- Settings persistence
- Quick switcher component
- Theme settings dialog
- MVVM architecture

## Support

- **Issues**: [GitHub Issues](https://github.com/jonsmith/AvaloniaThemeManager/issues)
- **Discussions**: [GitHub Discussions](https://github.com/jonsmith/AvaloniaThemeManager/discussions)
- **Documentation**: [Wiki](https://github.com/jonsmith/AvaloniaThemeManager/wiki)

## Acknowledgments

- Built with [Avalonia UI](https://avaloniaui.net/)
- Inspired by Material Design and Fluent Design principles
- Icons from [Material Design Icons](https://materialdesignicons.com/)

---

**Made with ❤️ for the Avalonia UI community**
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Controls\QuickThemeSwitcher.axaml
================================================================================

<UserControl
    x:Class="AvaloniaThemeManager.Controls.QuickThemeSwitcher"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons1="clr-namespace:AvaloniaThemeManager.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:AvaloniaThemeManager.ViewModels"
    d:DesignHeight="40"
    d:DesignWidth="200"
    x:DataType="vm:QuickThemeSwitcherViewModel"
    mc:Ignorable="d">

    <Design.DataContext>
        <vm:QuickThemeSwitcherViewModel />
    </Design.DataContext>

    <Border
        Padding="8,4"
        Background="{DynamicResource BackgroundLightBrush}"
        BorderBrush="{DynamicResource BorderBrush}"
        BorderThickness="1"
        CornerRadius="4">
        <StackPanel Orientation="Horizontal" Spacing="8">
            <Path
                Width="16"
                Height="16"
                VerticalAlignment="Center"
                Data="{x:Static icons1:ApplicationIcons.SettingsGeometry}"
                Fill="{DynamicResource AccentBlueBrush}"
                Stretch="Uniform" />

            <ComboBox
                MinWidth="120"
                Background="{DynamicResource BackgroundBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                Foreground="{DynamicResource TextPrimaryBrush}"
                ItemsSource="{Binding AvailableThemes}"
                SelectedItem="{Binding SelectedTheme}"
                ToolTip.Tip="Quick theme switcher">
                <ComboBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Spacing="8">
                            <Ellipse
                                Width="12"
                                Height="12"
                                VerticalAlignment="Center"
                                Fill="{Binding PreviewColor}" />
                            <TextBlock VerticalAlignment="Center" Text="{Binding Name}" />
                        </StackPanel>
                    </DataTemplate>
                </ComboBox.ItemTemplate>
            </ComboBox>
        </StackPanel>
    </Border>
</UserControl>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Controls\QuickThemeSwitcher.axaml.cs
================================================================================

using Avalonia.Controls;
using AvaloniaThemeManager.ViewModels;

namespace AvaloniaThemeManager.Controls;

/// <summary>
/// Represents a user control that provides a quick theme switching functionality
/// for Avalonia applications. This control is designed to integrate seamlessly
/// with the Avalonia UI framework and is backed by the <see cref="QuickThemeSwitcherViewModel"/>.
/// </summary>
public partial class QuickThemeSwitcher : UserControl
{
    /// <summary>
    /// Initializes a new instance of the <see cref="QuickThemeSwitcher"/> class.
    /// This constructor sets up the control by initializing its components and
    /// assigning a new instance of <see cref="QuickThemeSwitcherViewModel"/> as its data context.
    /// </summary>
    public QuickThemeSwitcher()
    {
        InitializeComponent();
        DataContext = new QuickThemeSwitcherViewModel();
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Extensions\AppBuilderExtensions.cs
================================================================================

// Extensions/AppBuilderExtensions.cs
using Avalonia;
using AvaloniaThemeManager.Theme.AvaloniaThemeManager.Theme;

namespace AvaloniaThemeManager.Extensions
{
    /// <summary>
    /// Provides extension methods for configuring and integrating the AvaloniaThemeManager 
    /// into an Avalonia application using the <see cref="AppBuilder"/>.
    /// </summary>
    /// <remarks>
    /// This class contains methods to enable the AvaloniaThemeManager with default or custom configurations.
    /// It simplifies the setup process by allowing developers to chain theme manager configuration
    /// into the application initialization pipeline.
    /// </remarks>
    public static class AppBuilderExtensions
    {
        /// <summary>
        /// Adds AvaloniaThemeManager to the application
        /// </summary>
        /// <param name="builder">The AppBuilder instance</param>
        /// <returns>The AppBuilder instance for method chaining</returns>
        public static AppBuilder UseThemeManager(this AppBuilder builder)
        {
            return builder.AfterSetup(app =>
            {
                // Initialize the theme manager and load default theme
                var themeManager = SkinManager.Instance;
                themeManager.LoadSavedTheme();
            });
        }

        /// <summary>
        /// Adds AvaloniaThemeManager with custom configuration
        /// </summary>
        /// <param name="builder">The AppBuilder instance</param>
        /// <param name="configure">Configuration action</param>
        /// <returns>The AppBuilder instance for method chaining</returns>
        public static AppBuilder UseThemeManager(this AppBuilder builder, System.Action<SkinManager> configure)
        {
            return builder.AfterSetup(app =>
            {
                var themeManager = SkinManager.Instance;
                configure(themeManager);
                themeManager.LoadSavedTheme();
            });
        }
    }
}

// Extensions/ApplicationExtensions.cs

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Extensions\ApplicationExtensions.cs
================================================================================

using Avalonia;
using Avalonia.Markup.Xaml.Styling;

namespace AvaloniaThemeManager.Extensions
{
    /// <summary>
    /// Provides extension methods for the <see cref="Avalonia.Application"/> class to integrate AvaloniaThemeManager functionality.
    /// </summary>
    public static class ApplicationExtensions
    {
        /// <summary>
        /// Include AvaloniaThemeManager themes in your application
        /// </summary>
        /// <param name="app">The Application instance</param>
        /// <returns>The Application instance for method chaining</returns>
        public static Application IncludeThemeManagerStyles(this Application app)
        {
            // Include the theme manager's default styles
            app.Styles.Add(new StyleInclude(new System.Uri("avares://AvaloniaThemeManager/"))
            {
                Source = new System.Uri("avares://AvaloniaThemeManager/Themes/CustomThemes.axaml")
            });

            return app;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Extensions\ServiceCollectionExtension.cs
================================================================================

using AvaloniaThemeManager.Services.Interfaces;
using AvaloniaThemeManager.Services;
using AvaloniaThemeManager.Theme.AvaloniaThemeManager.Theme;
using AvaloniaThemeManager.Theme.ValidationRules;
using AvaloniaThemeManager.Theme;
using AvaloniaThemeManager.ViewModels;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

namespace AvaloniaThemeManager.Extensions
{
    /// <summary>
    /// Provides extension methods for registering theme management services in an Avalonia application.
    /// </summary>
    public static class ServiceCollectionExtensions
    {
        /// <summary>
        /// Registers services required for theme management in an Avalonia application.
        /// </summary>
        /// <param name="services">The <see cref="IServiceCollection"/> to which the theme management services will be added.</param>
        /// <returns>The updated <see cref="IServiceCollection"/> with the theme management services registered.</returns>
        public static IServiceCollection AddThemeManagerServices(this IServiceCollection services)
        {
            // Logging
            services.AddLogging(builder =>
            {
                builder.AddConsole();
                builder.SetMinimumLevel(LogLevel.Debug);
            });

            // Core services
            services.AddSingleton<ISkinManager, SkinManager>();
            services.AddSingleton<IThemeLoaderService, ThemeLoaderService>();
            services.AddSingleton<IDialogService, DialogService>(); // Updated service name

            // Validation rules
            services.AddSingleton<IThemeValidationRule, BorderValidationRule>();
            services.AddSingleton<IThemeValidationRule, ColorContrastValidationRule>();
            services.AddSingleton<IThemeValidationRule, NameValidationRule>();
            services.AddSingleton<IThemeValidationRule, AccessibilityValidationRule>();
            services.AddSingleton<ThemeInheritanceManager>();

            // ViewModels
            services.AddTransient<ThemeSettingsViewModel>();
            services.AddTransient<QuickThemeSwitcherViewModel>();

            return services;
        }

        /// <summary>
        /// Registers theme management services and initializes the static MessageBox.
        /// </summary>
        /// <param name="services">The service collection.</param>
        /// <returns>The updated service collection.</returns>
        public static IServiceCollection AddThemeManagerWithMessageBox(this IServiceCollection services)
        {
            services.AddThemeManagerServices();

            // Build a temporary provider to initialize MessageBox
            var provider = services.BuildServiceProvider();
            MessageBox.Initialize(provider);

            return services;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Icons\ApplicationIcons.cs
================================================================================


// Icons/ApplicationIcons.cs - Enhanced version
using Avalonia.Media;

namespace AvaloniaThemeManager.Icons
{
    /// <summary>
    /// Centralized repository for SVG path data used in Path controls throughout the application.
    /// Provides extensive icon collection for file types, UI elements, and status indicators.
    /// </summary>
    public class ApplicationIcons : IIconProvider
    {
        private static readonly Dictionary<string, string> _iconCache = new();

        static ApplicationIcons()
        {
            InitializeIconCache();
        }

        #region Core System Icons
        /// <summary>
        /// Gets the SVG path data for the "File" icon, representing a generic file.
        /// </summary>
        public const string File = "M6,2C4.89,2 4,2.89 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2H6Z M13,3.5L18.5,9H13V3.5Z";
        /// <summary>
        /// Gets the SVG path data for the "Folder" icon, representing a generic folder structure.
        /// </summary>
        public const string Folder = "M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z";
        /// <summary>
        /// Gets the SVG path data for the "Folder Open" icon, representing an open folder structure.
        /// </summary>
        public const string FolderOpen = "M19,20H4C2.89,20 2,19.1 2,18V6C2,4.89 2.89,4 4,4H10L12,6H19A2,2 0 0,1 21,8H21L4,8V18L6.14,10H23.21L20.93,18.5C20.7,19.37 19.92,20 19,20Z";
        /// <summary>
        /// Gets the SVG path data for the "Lock" icon, representing a locked folder or file.
        /// </summary>
        public const string Lock = "M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z";
        #endregion

        #region UI Navigation Icons
        /// <summary>
        /// Gets the SVG path data for the "Search" icon.
        /// </summary>
        public const string Search = "M9.5,3A6.5,6.5 0 0,1 16,9.5C16,11.11 15.41,12.59 14.44,13.73L14.71,14H15.5L20.5,19L19,20.5L14,15.5V14.71L13.73,14.44C12.59,15.41 11.11,16 9.5,16A6.5,6.5 0 0,1 3,9.5A6.5,6.5 0 0,1 9.5,3M9.5,5C7,5 5,7 5,9.5C5,12 7,14 9.5,14C12,14 14,12 14,9.5C14,7 12,5 9.5,5Z";
        /// <summary>
        /// Gets the SVG path data for the "Settings" icon.
        /// </summary>
        public const string Settings = "M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.22,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.22,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.68 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z";
        /// <summary>
        /// Gets the SVG path data for the "Refresh" icon.
        /// </summary>
        public const string Refresh = "M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z";
        /// <summary>
        /// Gets the SVG path data for the "Browse" icon.
        /// </summary>
        public const string Browse = "M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z";
        /// <summary>
        /// Gets the SVG path data for the "Delete" icon.
        /// </summary>
        public const string Delete = "M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z";
        #endregion

        #region Status Icons
        /// <summary>
        /// Gets the SVG path data for the "Information" icon.
        /// </summary>
        public const string Information = "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z";
        /// <summary>
        /// Gets the SVG path data for the "Warning" icon.
        /// </summary>
        public const string Warning = "M13,14H11V10H13M13,18H11V16H13M1,21H23L12,2L1,21Z";
        /// <summary>
        /// Gets the SVG path data for the "Error" icon.
        /// </summary>
        public const string Error = "M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z";
        /// <summary>
        /// Gets the SVG path data for the "Success" icon.
        /// </summary>
        public const string Success = "M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M11,16.5L18,9.5L16.59,8.09L11,13.67L7.91,10.59L6.5,12L11,16.5Z";
        #endregion

        #region Media and File Types
        /// <summary>
        /// Gets the SVG path data for the "Image" icon.
        /// </summary>
        public const string Image = "M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19Z";
        /// <summary>
        /// Gets the SVG path data for the "Video" icon.
        /// </summary>
        public const string Video = "M17,10.5V7A1,1 0 0,0 16,6H4A1,1 0 0,0 3,7V17A1,1 0 0,0 4,18H16A1,1 0 0,0 17,17V13.5L21,17.5V6.5L17,10.5Z";
        /// <summary>
        /// Gets the SVG path data for the "Audio" icon.
        /// </summary>
        public const string Audio = "M12,3V13.55C11.41,13.21 10.73,13 10,13A4,4 0 0,0 6,17A4,4 0 0,0 10,21A4,4 0 0,0 14,17V7H18V3H12Z";
        /// <summary>
        /// Gets the SVG path data for the "Archive" icon.
        /// </summary>
        public const string Archive = "M14,17H12V15H10V13H12V15H14M14,9H12V7H14M10,9H12V11H10M10,13H12V11H14V13H12V15H10M8,9H10V7H8M16,9H14V11H16M16,15H14V13H16M16,17H14V15H16V17M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2Z";
        /// <summary>
        /// Gets the SVG path data for the "Code" icon, representing code files or programming-related content.
        /// </summary>
        public const string Code = "M14.6,16.6L19.2,12L14.6,7.4L16,6L22,12L16,18L14.6,16.6M9.4,16.6L4.8,12L9.4,7.4L8,6L2,12L8,18L9.4,16.6Z";
        #endregion

        #region Document Types
        /// <summary>
        /// Gets the SVG path data for the "Word Document" icon, representing Microsoft Word documents.
        /// </summary>
        public const string WordDocument = "M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,3.5L18.5,9H13M8.5,11H10.36L11.13,16.21L12,11H13.67L14.54,16.21L15.31,11H17.17L15.54,19H13.67L12.84,14.5L12,19H10.13";
        /// <summary>
        /// Gets the SVG path data for the "Excel Document" icon, representing Microsoft Excel documents.
        /// </summary>
        public const string ExcelDocument = "M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,3.5L18.5,9H13M8,11V13H16V11M8,15V17H11V15M13,15V17H16V15M8,19V21H11V19M13,19V21H16V19";
        /// <summary>
        /// Gets the SVG path data for the "PowerPoint Document" icon, representing Microsoft PowerPoint documents.
        /// </summary>
        public const string PowerPointDocument = "M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,3.5L18.5,9H13M8,11H12A2,2 0 0,1 14,13V15A2,2 0 0,1 12,17H10V19H8M10,13V15H12V13";
        /// <summary>
        /// Gets the SVG path data for the "PDF Document" icon, representing PDF files.
        /// </summary>
        public const string PdfDocument = "M6,2A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M13,3.5L18.5,9H13M8,11H10A2,2 0 0,1 12,13V15A2,2 0 0,1 10,17H8M9,12V16H10A1,1 0 0,0 11,15V13A1,1 0 0,0 10,12M13,11H15V12H14V14H15V15H13V17H16V11H13V11Z";
        #endregion

        /// <summary>
        /// Initialize the icon cache with all available icons
        /// </summary>
        private static void InitializeIconCache()
        {
            // File system icons
            _iconCache["File"] = File;
            _iconCache["Folder"] = Folder;
            _iconCache["FolderOpen"] = FolderOpen;
            _iconCache["Lock"] = Lock;

            // Navigation icons
            _iconCache["Search"] = Search;
            _iconCache["Settings"] = Settings;
            _iconCache["Refresh"] = Refresh;
            _iconCache["Browse"] = Browse;
            _iconCache["Delete"] = Delete;

            // Status icons
            _iconCache["Information"] = Information;
            _iconCache["Warning"] = Warning;
            _iconCache["Error"] = Error;
            _iconCache["Success"] = Success;

            // Media icons
            _iconCache["Image"] = Image;
            _iconCache["Video"] = Video;
            _iconCache["Audio"] = Audio;
            _iconCache["Archive"] = Archive;
            _iconCache["Code"] = Code;

            // Document icons
            _iconCache["WordDocument"] = WordDocument;
            _iconCache["ExcelDocument"] = ExcelDocument;
            _iconCache["PowerPointDocument"] = PowerPointDocument;
            _iconCache["PdfDocument"] = PdfDocument;
        }

        #region IIconProvider Implementation
        /// <summary>
        /// Retrieves the geometry representation of an icon based on its name.
        /// </summary>
        /// <param name="iconName">
        /// The name of the icon to retrieve. If the icon is not found, a default icon is returned.
        /// </param>
        /// <returns>
        /// A <see cref="Geometry"/> object representing the specified icon.
        /// </returns>
        public Geometry GetIcon(string iconName)
        {
            if (_iconCache.TryGetValue(iconName, out string? pathData))
            {
                return Geometry.Parse(pathData);
            }
            return Geometry.Parse(File); // Default fallback
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public Geometry GetFileTypeIcon(string fileName)
        {
            var pathData = GetFileTypePathData(fileName);
            return Geometry.Parse(pathData);
        }

        /// <summary>
        /// Retrieves the geometry representation of a folder icon.
        /// </summary>
        /// <param name="isAccessible">
        /// A boolean value indicating whether the folder is accessible. 
        /// If <c>true</c>, the accessible folder icon is returned; otherwise, a locked folder icon is returned.
        /// </param>
        /// <returns>
        /// A <see cref="Geometry"/> object representing the folder icon.
        /// </returns>
        public Geometry GetFolderIcon(bool isAccessible = true)
        {
            var pathData = isAccessible ? Folder : Lock;
            return Geometry.Parse(pathData);
        }

        /// <summary>
        /// Retrieves a collection of available icon names.
        /// </summary>
        /// <returns>
        /// An <see cref="IEnumerable{T}"/> of <see cref="string"/> containing the names of all available icons.
        /// </returns>
        public IEnumerable<string> GetAvailableIcons()
        {
            return _iconCache.Keys;
        }

        /// <summary>
        /// Determines whether an icon with the specified name exists in the icon cache.
        /// </summary>
        /// <param name="iconName">The name of the icon to check for existence.</param>
        /// <returns>
        /// <c>true</c> if the icon with the specified name exists in the cache; otherwise, <c>false</c>.
        /// </returns>
        public bool HasIcon(string iconName)
        {
            return _iconCache.ContainsKey(iconName);
        }
        #endregion

        #region Direct Geometry Properties (For XAML Binding)
        /// <summary>
        /// Gets the geometry representation of the file icon.
        /// </summary>
        /// <value>
        /// A <see cref="Geometry"/> object that represents the file icon.
        /// </value>
        /// <remarks>
        /// This property parses the predefined file path data into a <see cref="Geometry"/> object
        /// to be used in UI components.
        /// </remarks>
        public static Geometry FileGeometry => Geometry.Parse(File);
        /// <summary>
        /// Gets the geometry representation of a folder icon.
        /// </summary>
        /// <remarks>
        /// This property provides a parsed <see cref="Geometry"/> object for the folder icon.
        /// It is based on the predefined path data string for a folder.
        /// </remarks>
        public static Geometry FolderGeometry => Geometry.Parse(Folder);
        /// <summary>
        /// Gets the geometry representation of the "Browse" icon.
        /// </summary>
        /// <remarks>
        /// This property provides a parsed <see cref="Geometry"/> object for the "Browse" icon,
        /// which can be used in UI components to render the corresponding visual representation.
        /// </remarks>
        public static Geometry BrowseGeometry => Geometry.Parse(Browse);
        /// <summary>
        /// Gets the geometry representation of a lock icon.
        /// </summary>
        /// <remarks>
        /// This property provides a parsed <see cref="Geometry"/> object for the lock icon,
        /// which can be used in UI elements requiring vector graphics.
        /// </remarks>
        public static Geometry LockGeometry => Geometry.Parse(Lock);
        /// <summary>
        /// Gets the geometry representation of the "Information" icon.
        /// </summary>
        /// <value>
        /// A <see cref="Geometry"/> object representing the "Information" icon.
        /// </value>
        public static Geometry InformationGeometry => Geometry.Parse(Information);
        /// <summary>
        /// Gets the geometry representing a warning icon.
        /// </summary>
        /// <remarks>
        /// This property provides a pre-defined <see cref="Geometry"/> object that can be used
        /// to render a warning icon in the application.
        /// </remarks>
        public static Geometry WarningGeometry => Geometry.Parse(Warning);
        /// <summary>
        /// Gets the geometry representation of the "Error" icon.
        /// </summary>
        /// <remarks>
        /// This property provides a parsed <see cref="Geometry"/> object representing the "Error" icon.
        /// It can be used in UI elements to visually indicate an error state.
        /// </remarks>
        public static Geometry ErrorGeometry => Geometry.Parse(Error);
        /// <summary>
        /// Gets the geometry representing a "Success" icon.
        /// </summary>
        /// <value>
        /// A <see cref="Geometry"/> object that defines the shape of the "Success" icon.
        /// </value>
        public static Geometry SuccessGeometry => Geometry.Parse(Success);
        /// <summary>
        /// Gets the <see cref="Geometry"/> representation of the "Refresh" icon.
        /// </summary>
        /// <value>
        /// A <see cref="Geometry"/> object representing the "Refresh" icon.
        /// </value>
        /// <remarks>
        /// This property parses the predefined path data for the "Refresh" icon into a <see cref="Geometry"/> object.
        /// </remarks>
        public static Geometry RefreshGeometry => Geometry.Parse(Refresh);
        /// <summary>
        /// Gets the geometry representation of the "Search" icon.
        /// </summary>
        /// <value>
        /// A <see cref="Geometry"/> object that represents the "Search" icon.
        /// </value>
        public static Geometry SearchGeometry => Geometry.Parse(Search);
        /// <summary>
        /// Gets the geometry representation of the "Delete" icon.
        /// </summary>
        /// <value>
        /// A <see cref="Geometry"/> object that represents the "Delete" icon.
        /// </value>
        /// <remarks>
        /// This property provides a parsed geometry for the "Delete" icon, which can be used 
        /// in UI components such as paths or shapes in Avalonia applications.
        /// </remarks>
        public static Geometry DeleteGeometry => Geometry.Parse(Delete);
        /// <summary>
        /// Gets the geometry data representing the "Settings" icon.
        /// </summary>
        /// <remarks>
        /// This property provides a parsed <see cref="Geometry"/> object for the "Settings" icon.
        /// It can be used in UI components, such as <see cref="Avalonia.Controls.Shapes.Path"/>, 
        /// to render the "Settings" icon.
        /// </remarks>
        /// <value>
        /// A <see cref="Geometry"/> object representing the "Settings" icon.
        /// </value>
        public static Geometry SettingsGeometry => Geometry.Parse(Settings);
        #endregion

        /// <summary>
        /// Gets the SVG path data string for file type-specific icons
        /// </summary>
        /// <param name="fileName">The file name including extension</param>
        /// <returns>SVG path data string for the appropriate file type icon</returns>
        public static string GetFileTypePathData(string fileName)
        {
            if (string.IsNullOrEmpty(fileName))
                return File;

            var extension = Path.GetExtension(fileName).ToLowerInvariant();

            return extension switch
            {
                // Microsoft Office Documents
                ".docx" or ".doc" or ".dotx" or ".dot" => WordDocument,
                ".xlsx" or ".xls" or ".xlsm" or ".xltx" or ".xlt" => ExcelDocument,
                ".pptx" or ".ppt" or ".potx" or ".pot" => PowerPointDocument,
                ".pdf" => PdfDocument,

                // Media Files
                ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".tiff" or ".svg" or ".webp" or ".ico" => Image,
                ".mp4" or ".avi" or ".mkv" or ".mov" or ".wmv" or ".flv" or ".webm" or ".m4v" => Video,
                ".mp3" or ".wav" or ".flac" or ".aac" or ".ogg" or ".m4a" or ".wma" => Audio,

                // Archives
                ".zip" or ".rar" or ".7z" or ".tar" or ".gz" or ".bz2" or ".xz" => Archive,

                // Code Files
                ".cs" or ".js" or ".ts" or ".html" or ".css" or ".json" or ".xml" or ".xaml" or
                ".py" or ".java" or ".cpp" or ".c" or ".h" or ".php" or ".rb" or ".go" or ".rs" => Code,

                // Default fallback
                _ => File
            };
        }

        /// <summary>
        /// Create a styled Path control with the specified icon
        /// </summary>
        /// <param name="iconName">Name of the icon</param>
        /// <param name="size">Size of the icon (default: 16)</param>
        /// <param name="brush">Brush for the icon (default: null - uses theme brush)</param>
        /// <returns>Configured Path control</returns>
        public Avalonia.Controls.Shapes.Path CreateIconPath(string iconName, double size = 16, IBrush? brush = null)
        {
            return new Avalonia.Controls.Shapes.Path
            {
                Data = GetIcon(iconName),
                Width = size,
                Height = size,
                Stretch = Stretch.Uniform,
                Fill = brush // Will use theme brush if null
            };
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Icons\IIconProvider.cs
================================================================================

// Icons/IIconProvider.cs

using Geometry = Avalonia.Media.Geometry;

namespace AvaloniaThemeManager.Icons
{
    /// <summary>
    /// Defines a contract for providing icons in the form of <see cref="Avalonia.Media.Geometry"/>.
    /// </summary>
    public interface IIconProvider
    {
        /// <summary>
        /// Retrieves the geometry representation of an icon based on its name.
        /// </summary>
        /// <param name="iconName">
        /// The name of the icon to retrieve.
        /// </param>
        /// <returns>
        /// A <see cref="Avalonia.Media.Geometry"/> object representing the specified icon.
        /// </returns>
        Geometry GetIcon(string iconName);
        /// <summary>
        /// Retrieves the geometry representation of an icon based on the file type of the specified file name.
        /// </summary>
        /// <param name="fileName">
        /// The name of the file for which the file type icon is to be retrieved. 
        /// This can include the file extension to determine the appropriate icon.
        /// </param>
        /// <returns>
        /// A <see cref="Avalonia.Media.Geometry"/> object representing the icon associated with the file type.
        /// </returns>0
        Geometry GetFileTypeIcon(string fileName);
        /// <summary>
        /// Retrieves the geometry representation of a folder icon.
        /// </summary>
        /// <param name="isAccessible">
        /// A boolean value indicating whether the folder is accessible. 
        /// If <c>true</c>, the accessible folder icon is returned; otherwise, a locked folder icon is returned.
        /// </param>
        /// <returns>
        /// A <see cref="Avalonia.Media.Geometry"/> object representing the folder icon.
        /// </returns>
        Geometry GetFolderIcon(bool isAccessible = true);
        /// <summary>
        /// Retrieves a collection of available icon names.
        /// </summary>
        /// <returns>
        /// An <see cref="IEnumerable{T}"/> of <see cref="string"/> containing the names of all available icons.
        /// </returns>
        IEnumerable<string> GetAvailableIcons();
        /// <summary>
        /// Determines whether an icon with the specified name exists.
        /// </summary>
        /// <param name="iconName">The name of the icon to check for existence.</param>
        /// <returns>
        /// <c>true</c> if an icon with the specified name exists; otherwise, <c>false</c>.
        /// </returns>
        bool HasIcon(string iconName);
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Models\AppSettings.cs
================================================================================

using Newtonsoft.Json;

namespace AvaloniaThemeManager.Models
{
    /// <summary>
    /// Represents the application settings for the Avalonia Theme Manager.
    /// Provides functionality to load, save, and manage theme-related settings.
    /// </summary>
    public class AppSettings
    {
        private const string SettingsFileName = "appsettings.json";
        private static readonly string SettingsFilePath;
        private static AppSettings? _instance;

        /// <summary>
        /// Gets or sets the name of the currently selected theme.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the theme name. The default value is "Dark".
        /// </value>
        /// <remarks>
        /// This property is used to store the name of the theme selected by the user.
        /// It can be updated dynamically and is persisted using the <see cref="AppSettings.Save"/> method.
        /// </remarks>
        public string? Theme { get; set; } = "Dark";

        // Add other settings as needed
        /// <summary>
        /// Gets or sets a value indicating whether the application should use the system's default theme.
        /// </summary>
        /// <value>
        /// <c>true</c> if the application should use the system's theme; otherwise, <c>false</c>.
        /// </value>
        public bool UseSystemTheme { get; set; } = false;

        // Update the static constructor in AppSettings.cs
        static AppSettings()
        {
            string appDataFolder;

            try
            {
                // Try to use a more appropriate app data folder
                appDataFolder = Path.Combine(
                    Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData),
                    "AvaloniaThemeManager");
            }
            catch
            {
                // Fallback to current directory if permissions issue
                appDataFolder = Path.Combine(AppContext.BaseDirectory, "Settings");
            }

            if (!Directory.Exists(appDataFolder))
            {
                try
                {
                    Directory.CreateDirectory(appDataFolder);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Warning: Could not create settings directory: {ex.Message}");
                    // Fallback to temp directory
                    appDataFolder = Path.GetTempPath();
                }
            }

            SettingsFilePath = Path.Combine(appDataFolder, SettingsFileName);
        }

        /// <summary>
        /// Gets the singleton instance of the <see cref="AppSettings"/> class.
        /// </summary>
        /// <remarks>
        /// This property ensures that only one instance of <see cref="AppSettings"/> exists throughout the application.
        /// If the instance is not already initialized, it will be loaded using the <c>Load</c> method.
        /// </remarks>
        public static AppSettings Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = Load();
                }
                return _instance;
            }
        }

        private static AppSettings Load()
        {
            try
            {
                if (File.Exists(SettingsFilePath))
                {
                    string json = File.ReadAllText(SettingsFilePath);
                    var settings = JsonConvert.DeserializeObject<AppSettings>(json);
                    if (settings != null)
                        return settings;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading settings: {ex.Message}");
            }

            // Return default settings if loading fails
            return new AppSettings();
        }

        /// <summary>
        /// Saves the current application settings to a file.
        /// </summary>
        /// <remarks>
        /// This method serializes the current instance of <see cref="AppSettings"/> into a JSON format
        /// and writes it to the file specified by the settings file path. If an error occurs during
        /// the save operation, it is logged to the console.
        /// </remarks>
        /// <exception cref="System.IO.IOException">
        /// Thrown when an I/O error occurs while writing to the file.
        /// </exception>
        /// <exception cref="Newtonsoft.Json.JsonException">
        /// Thrown when an error occurs during JSON serialization.
        /// </exception>
        public void Save()
        {
            try
            {
                string json = JsonConvert.SerializeObject(this, Formatting.Indented);
                File.WriteAllText(SettingsFilePath, json);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving settings: {ex.Message}");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Models\ThemeImportResult.cs
================================================================================

using AvaloniaThemeManager.Theme;

namespace AvaloniaThemeManager.Models
{
    /// <summary>
    /// 
    /// </summary>
    public class ThemeImportResult
    {
        /// <summary>
        /// 
        /// </summary>
        public Skin? Theme { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public bool Success { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public string? ErrorMessage { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public List<string> Warnings { get; set; } = new();
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Services\DialogService.cs
================================================================================

using Avalonia.Controls;
using AvaloniaThemeManager.Services.Interfaces;
using Microsoft.Extensions.Logging;
using AvaloniaThemeManager.Views;
using AvaloniaThemeManager.Utility;

namespace AvaloniaThemeManager.Services
{
    /// <summary>
    /// Service for displaying error dialogs and managing user notifications.
    /// </summary>
    

    /// <summary>
    /// Implementation of error dialog service using Avalonia dialogs.
    /// </summary>
    public class DialogService : IDialogService
    {
        private readonly ILogger<DialogService> _logger;

        /// <summary>
        /// 
        /// </summary>
        /// <param name="logger"></param>
        public DialogService(ILogger<DialogService> logger)
        {
            _logger = logger;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="message"></param>
        /// <param name="exception"></param>
        public async Task ShowErrorAsync(string title, string message, Exception? exception = null)
        {
            _logger.LogError(exception, "Error dialog shown: {Title} - {Message}", title, message);

            var dialog = new ErrorDialog
            {
                Title = title,
                Message = message,
                Exception = exception
            };

            if (WindowTools.GetMainWindow() is Window mainWindow)
            {
                await dialog.ShowDialog(mainWindow);
            }
            else
            {
                await dialog.ShowDialog<object?>(null!);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="message"></param>
        public async Task ShowWarningAsync(string title, string message)
        {
            _logger.LogWarning("Warning dialog shown: {Title} - {Message}", title, message);

            var dialog = new Views.NotificationDialog
            {
                Title = title,
                Message = message,
                DialogType = NotificationDialogType.Warning
            };

            if (WindowTools.GetMainWindow() is Window mainWindow)
            {
                await dialog.ShowDialog(mainWindow);
            }
            else
            {
                await dialog.ShowDialog<object?>(null!);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="message"></param>
        public async Task ShowInfoAsync(string title, string message)
        {
            _logger.LogInformation("Info dialog shown: {Title} - {Message}", title, message);

            var dialog = new Views.NotificationDialog
            {
                Title = title,
                Message = message,
                DialogType = NotificationDialogType.Information
            };

            if (WindowTools.GetMainWindow() is { } mainWindow)
            {
                await dialog.ShowDialog(mainWindow);
            }
            else
            {
                await dialog.ShowDialog<object?>(null!);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="errors"></param>
        /// <param name="warnings"></param>
        public async Task ShowValidationErrorsAsync(string title, IEnumerable<string> errors, IEnumerable<string> warnings)
        {
            var errorList = errors.ToList();
            var warningList = warnings.ToList();

            _logger.LogWarning("Validation dialog shown: {Title} - {ErrorCount} errors, {WarningCount} warnings",
                title, errorList.Count, warningList.Count);

            var dialog = new ValidationErrorDialog
            {
                Title = title,
                Errors = errorList,
                Warnings = warningList
            };

            if (WindowTools.GetMainWindow() is { } mainWindow)
            {
                await dialog.ShowDialog(mainWindow);
            }
            else
            {
                await dialog.ShowDialog<object?>(null!);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="title"></param>
        /// <param name="message"></param>
        /// <param name="confirmText"></param>
        /// <param name="cancelText"></param>
        /// <returns></returns>
        public async Task<bool> ShowConfirmationAsync(string title, string message, string confirmText = "Yes", string cancelText = "No")
        {
            _logger.LogDebug("Confirmation dialog shown: {Title} - {Message}", title, message);

            var dialog = new ConfirmationDialog
            {
                Title = title,
                Message = message,
                ConfirmText = confirmText,
                CancelText = cancelText
            };

            bool? result;
            if (WindowTools.TryGetMainWindow() is { } mainWindow)
            {
                result = await dialog.ShowDialog<bool?>(mainWindow);
            }
            else
            {
                dialog.Show();
                return true;
            }

            return result == true;
        }


    }

    /// <summary>
    /// Enumeration for different types of notification dialogs.
    /// </summary>
    public enum NotificationDialogType
    {
        /// <summary>
        /// 
        /// </summary>
        Information,
        /// <summary>
        /// 
        /// </summary>
        Warning,
        /// <summary>
        /// 
        /// </summary>
        Error
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Services\MessageBox.cs
================================================================================

using AvaloniaThemeManager.Services.Interfaces;
using Microsoft.Extensions.DependencyInjection;
using Avalonia;
using Microsoft.Extensions.Logging;

namespace AvaloniaThemeManager.Services
{
    /// <summary>
    /// Provides static methods for displaying dialogs similar to MessageBox.Show().
    /// </summary>
    public static class MessageBox
    {
        private static IServiceProvider? _serviceProvider;
        private static IDialogService? _fallbackService;

        /// <summary>
        /// Initializes the MessageBox with a service provider for dependency resolution.
        /// Call this during application startup.
        /// </summary>
        /// <param name="serviceProvider">The service provider containing the IDialogService registration.</param>
        public static void Initialize(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        /// <summary>
        /// Gets the dialog service instance, creating a fallback if necessary.
        /// </summary>
        private static IDialogService GetDialogService()
        {
            if (_serviceProvider != null)
            {
                try
                {
                    return _serviceProvider.GetRequiredService<IDialogService>();
                }
                catch
                {
                    // Fallback if service not available
                }
            }

            // Create fallback service if DI not available
            if (_fallbackService == null)
            {
                var logger = _serviceProvider?.GetService<ILogger<DialogService>>()
                    ?? Microsoft.Extensions.Logging.Abstractions.NullLogger<DialogService>.Instance;
                _fallbackService = new DialogService(logger);
            }

            return _fallbackService;
        }

        /// <summary>
        /// Shows an informational dialog.
        /// </summary>
        /// <param name="message">The message to display.</param>
        /// <param name="title">The dialog title. Defaults to "Information".</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public static Task ShowInfoAsync(string message, string title = "Information")
        {
            return GetDialogService().ShowInfoAsync(title, message);
        }

        /// <summary>
        /// Shows a warning dialog.
        /// </summary>
        /// <param name="message">The message to display.</param>
        /// <param name="title">The dialog title. Defaults to "Warning".</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public static Task ShowWarningAsync(string message, string title = "Warning")
        {
            return GetDialogService().ShowWarningAsync(title, message);
        }

        /// <summary>
        /// Shows an error dialog.
        /// </summary>
        /// <param name="message">The message to display.</param>
        /// <param name="title">The dialog title. Defaults to "Error".</param>
        /// <param name="exception">Optional exception details.</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public static Task ShowErrorAsync(string message, string title = "Error", Exception? exception = null)
        {
            return GetDialogService().ShowErrorAsync(title, message, exception);
        }

        /// <summary>
        /// Shows a confirmation dialog.
        /// </summary>
        /// <param name="message">The message to display.</param>
        /// <param name="title">The dialog title. Defaults to "Confirmation".</param>
        /// <param name="confirmText">Text for the confirm button. Defaults to "Yes".</param>
        /// <param name="cancelText">Text for the cancel button. Defaults to "No".</param>
        /// <returns>A task representing the asynchronous operation with the user's choice.</returns>
        public static Task<bool> ShowConfirmationAsync(string message, string title = "Confirmation",
            string confirmText = "Yes", string cancelText = "No")
        {
            return GetDialogService().ShowConfirmationAsync(title, message, confirmText, cancelText);
        }

        /// <summary>
        /// Shows a validation errors dialog.
        /// </summary>
        /// <param name="errors">Collection of error messages.</param>
        /// <param name="warnings">Collection of warning messages.</param>
        /// <param name="title">The dialog title. Defaults to "Validation Issues".</param>
        /// <returns>A task representing the asynchronous operation.</returns>
        public static Task ShowValidationErrorsAsync(IEnumerable<string> errors, IEnumerable<string> warnings,
            string title = "Validation Issues")
        {
            return GetDialogService().ShowValidationErrorsAsync(title, errors, warnings);
        }

        // Synchronous versions for compatibility (use carefully - may block UI)

        /// <summary>
        /// Shows an informational dialog synchronously. Use async version when possible.
        /// </summary>
        public static void ShowInfo(string message, string title = "Information")
        {
            ShowInfoAsync(message, title).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Shows a warning dialog synchronously. Use async version when possible.
        /// </summary>
        public static void ShowWarning(string message, string title = "Warning")
        {
            ShowWarningAsync(message, title).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Shows an error dialog synchronously. Use async version when possible.
        /// </summary>
        public static void ShowError(string message, string title = "Error", Exception? exception = null)
        {
            ShowErrorAsync(message, title, exception).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Shows a confirmation dialog synchronously. Use async version when possible.
        /// </summary>
        public static bool ShowConfirmation(string message, string title = "Confirmation",
            string confirmText = "Yes", string cancelText = "No")
        {
            return ShowConfirmationAsync(message, title, confirmText, cancelText).GetAwaiter().GetResult();
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Services\ThemeLoaderService.cs
================================================================================

using Avalonia.Platform;
using AvaloniaThemeManager.Theme;
using System.Text.Json;

namespace AvaloniaThemeManager.Services
{
    /// <summary>
    /// Defines a service for loading themes in an Avalonia application.
    /// </summary>
    /// <remarks>
    /// This interface provides methods to load theme skins from a specified directory.
    /// Implementations of this interface are responsible for parsing and managing theme-related resources.
    /// </remarks>
    public interface IThemeLoaderService
    {
        /// <summary>
        /// Loads a collection of theme skins from the specified root directory.
        /// </summary>
        /// <param name="themesRoot">
        /// The root directory containing theme skin definitions.
        /// </param>
        /// <returns>
        /// A list of <see cref="Skin"/> objects representing the loaded theme skins.
        /// </returns>
        List<Skin> LoadSkins(string themesRoot);
    }

    /// <summary>
    /// Provides functionality to load and manage themes for the Avalonia application.
    /// </summary>
    /// <remarks>
    /// This service is responsible for loading theme configurations and resources from a specified directory structure.
    /// It processes theme definitions, control themes, and styles, making them available for use within the application.
    /// </remarks>
    public class ThemeLoaderService : IThemeLoaderService
    {

        // List of known embedded themes (keep in sync with package)
        private readonly string[] _embeddedThemes = new[]
        {
            "Dark", "Light", "Ocean Blue", "Cyberpunk",
            "RetroTerminal", "Purple Haze", "Forest Green", "High Contrast", "ModernIce"
        };

        /// <summary>
        /// Loads a collection of <see cref="Skin"/> objects from the specified root directory.
        /// </summary>
        /// <returns>
        /// A list of <see cref="Skin"/> objects representing the loaded themes.
        /// </returns>
        /// <remarks>
        /// This method scans the specified directory for subdirectories containing theme definitions.
        /// Each theme is expected to have a "theme.json" file and optionally "ControlThemes" and "Styles" directories
        /// containing .axaml files. The method parses these resources and constructs <see cref="Skin"/> objects
        /// with appropriate URIs for control themes and styles.
        /// </remarks>
        public List<Skin> LoadSkins(string _ = "")
        {
            var jsonOptions = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
            var skins = new List<Skin>();

            foreach (var themeName in _embeddedThemes)
            {
                var basePath = $"avares://AvaloniaThemeManager/Themes/{themeName}";
                var themeJsonPath = $"{basePath}/theme.json";

                try
                {
                    using var stream = AssetLoader.Open(new Uri(themeJsonPath));
                    using var reader = new StreamReader(stream);
                    var json = reader.ReadToEnd();

                    var serializableTheme = JsonSerializer.Deserialize<SerializableTheme>(json, jsonOptions);
                    if (serializableTheme is null) continue;

                    var skin = serializableTheme.ToSkin();

                    // Load ControlTheme resources
                    var controlThemes = new[]
                    {
                        "Button", "TextBlock", "TextBox", "CheckBox",
                        "ComboBox", "Expander", "Slider", "TabControl"
                    };

                    foreach (var key in controlThemes)
                    {
                        var controlPath = $"{basePath}/ControlThemes/{key}.axaml";
                        skin.ControlThemeUris[key] = controlPath;
                    }

                    skins.Add(skin);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Failed to load theme '{themeName}': {ex.Message}");
                }
            }

            return skins;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\InheritableSkin.cs
================================================================================

// Theme/ThemeInheritance.cs
using Avalonia;
using Avalonia.Media;
using System.Text.Json;

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// Represents a theme that can inherit from a base theme and override specific properties.
    /// </summary>
    public class InheritableSkin : Skin
    {
        /// <summary>
        /// Gets or sets the name of the base theme this theme inherits from.
        /// </summary>
        public string? BaseThemeName { get; set; }

        /// <summary>
        /// Gets or sets the collection of property overrides for this theme.
        /// </summary>
        public Dictionary<string, object> PropertyOverrides { get; set; } = new();

        /// <summary>
        /// Creates a resolved skin by applying inheritance and overrides.
        /// </summary>
        /// <param name="baseTheme">The base theme to inherit from.</param>
        /// <returns>A fully resolved Skin with all properties applied.</returns>
        public Skin CreateResolvedSkin(Skin? baseTheme = null)
        {
            var resolved = new Skin();

            // Start with base theme if provided
            if (baseTheme != null)
            {
                CopyPropertiesFrom(resolved, baseTheme);
            }

            // Apply current theme's base properties
            CopyPropertiesFrom(resolved, this);

            // Apply property overrides
            ApplyOverrides(resolved);

            return resolved;
        }

        private void CopyPropertiesFrom(Skin target, Skin source)
        {
            target.PrimaryColor = source.PrimaryColor;
            target.SecondaryColor = source.SecondaryColor;
            target.AccentColor = source.AccentColor;
            target.PrimaryBackground = source.PrimaryBackground;
            target.SecondaryBackground = source.SecondaryBackground;
            target.PrimaryTextColor = source.PrimaryTextColor;
            target.SecondaryTextColor = source.SecondaryTextColor;
            target.FontFamily = source.FontFamily;
            target.FontSizeSmall = source.FontSizeSmall;
            target.FontSizeMedium = source.FontSizeMedium;
            target.FontSizeLarge = source.FontSizeLarge;
            target.FontWeight = source.FontWeight;
            target.BorderColor = source.BorderColor;
            target.BorderThickness = source.BorderThickness;
            target.BorderRadius = source.BorderRadius;
            target.ErrorColor = source.ErrorColor;
            target.WarningColor = source.WarningColor;
            target.SuccessColor = source.SuccessColor;
            target.Name = source.Name;
        }

        private void ApplyOverrides(Skin target)
        {
            foreach (var kvp in PropertyOverrides)
            {
                var property = typeof(Skin).GetProperty(kvp.Key);
                if (property != null && property.CanWrite)
                {
                    try
                    {
                        var value = ConvertValue(kvp.Value, property.PropertyType);
                        property.SetValue(target, value);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Failed to apply override for {kvp.Key}: {ex.Message}");
                    }
                }
            }
        }

        // Update the ConvertValue method in InheritableSkin.cs
        private object? ConvertValue(object? value, Type targetType)
        {
            if (value == null) return null;

            if (targetType == typeof(Color) && value is string colorString)
            {
                return Color.Parse(colorString);
            }

            if (targetType == typeof(FontFamily) && value is string fontString)
            {
                return new FontFamily(fontString);
            }

            if (targetType == typeof(FontWeight) && value is string fontWeightString)
            {
                return Enum.TryParse<FontWeight>(fontWeightString, out var weight)
                    ? weight
                    : FontWeight.Normal;
            }

            if (targetType == typeof(Thickness))
            {
                if (value is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Number)
                    {
                        return new Thickness(element.GetDouble());
                    }
                    else if (element.ValueKind == JsonValueKind.String)
                    {
                        return Thickness.Parse(element.GetString() ?? "0");
                    }
                    else if (element.ValueKind == JsonValueKind.Object)
                    {
                        var left = element.TryGetProperty("left", out var leftProp) ? leftProp.GetDouble() : 0;
                        var top = element.TryGetProperty("top", out var topProp) ? topProp.GetDouble() : 0;
                        var right = element.TryGetProperty("right", out var rightProp) ? rightProp.GetDouble() : 0;
                        var bottom = element.TryGetProperty("bottom", out var bottomProp) ? bottomProp.GetDouble() : 0;
                        return new Thickness(left, top, right, bottom);
                    }
                }
                else if (value is string thicknessString)
                {
                    return Thickness.Parse(thicknessString);
                }
            }

            if (targetType == typeof(CornerRadius))
            {
                if (value is JsonElement element)
                {
                    if (element.ValueKind == JsonValueKind.Number)
                    {
                        return new CornerRadius(element.GetDouble());
                    }
                    else if (element.ValueKind == JsonValueKind.String)
                    {
                        var radiusString = element.GetString() ?? "0";
                        return double.TryParse(radiusString, out var radius)
                            ? new CornerRadius(radius)
                            : new CornerRadius(0);
                    }
                }
                else if (value is string radiusString)
                {
                    return double.TryParse(radiusString, out var radius)
                        ? new CornerRadius(radius)
                        : new CornerRadius(0);
                }
            }

            // Try standard type conversion as fallback
            try
            {
                return Convert.ChangeType(value, targetType);
            }
            catch
            {
                return targetType.IsValueType ? Activator.CreateInstance(targetType) : null;
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ISkinManager.cs
================================================================================

namespace AvaloniaThemeManager.Theme;

/// <summary>
/// 
/// </summary>
public interface ISkinManager
{
    /// <summary>
    /// 
    /// </summary>
    Skin? CurrentSkin { get; }
    /// <summary>
    /// 
    /// </summary>
    event EventHandler? SkinChanged;
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="skin"></param>
    void RegisterSkin(string? name, Skin? skin);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <returns></returns>
    Skin? GetSkin(string? name);
    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    List<string> GetAvailableSkinNames();
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skinName"></param>
    void ApplySkin(string? skinName);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="skin"></param>
    void ApplySkin(Skin? skin);
    /// <summary>
    /// 
    /// </summary>
    /// <param name="themeName"></param>
    void SaveSelectedTheme(string? themeName);
    /// <summary>
    /// 
    /// </summary>
    void LoadSavedTheme();
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\IThemeValidationRule.cs
================================================================================

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// 
    /// </summary>
    public interface IThemeValidationRule
    {
        /// <summary>
        /// 
        /// </summary>
        ThemeValidationResult Validate(Skin theme);
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\SerializableTheme.cs
================================================================================

using Avalonia.Media;
using Avalonia;

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableTheme
    {
        /// <summary>
        /// Gets or sets the name of the theme.
        /// </summary>
        /// <remarks>
        /// This property represents the unique identifier or display name of the theme.
        /// It is a required field and must not be null, empty, or whitespace.
        /// </remarks>
        public string Name { get; set; } = "";
        /// <summary>
        /// Gets or sets a description of the theme, providing additional context or details about its purpose or design.
        /// </summary>
        public string Description { get; set; } = "";
        /// <summary>
        /// Gets or sets the version of the theme.
        /// </summary>
        /// <remarks>
        /// This property indicates the version of the theme, which can be useful for compatibility checks
        /// or identifying updates to the theme.
        /// </remarks>
        public string Version { get; set; } = "1.0";
        /// <summary>
        /// Gets or sets the author of the theme.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the name of the theme's author.
        /// </value>
        public string Author { get; set; } = "";
        /// <summary>
        /// Gets or sets the date and time when the theme was created.
        /// </summary>
        /// <value>
        /// A <see cref="DateTime"/> representing the creation date and time of the theme.
        /// </value>
        public DateTime CreatedDate { get; set; } = DateTime.Now;

        // Colors as hex strings for JSON serialization
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryColor { get; set; } = "#343B48";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryColor { get; set; } = "#3D4654";
        /// <summary>
        /// 
        /// </summary>
        public string AccentColor { get; set; } = "#3498DB";
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryBackground { get; set; } = "#2C313D";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryBackground { get; set; } = "#464F62";
        /// <summary>
        /// 
        /// </summary>
        public string PrimaryTextColor { get; set; } = "#FFFFFF";
        /// <summary>
        /// 
        /// </summary>
        public string SecondaryTextColor { get; set; } = "#CCCCCC";
        /// <summary>
        /// 
        /// </summary>
        public string BorderColor { get; set; } = "#5D6778";
        /// <summary>
        /// 
        /// </summary>
        public string ErrorColor { get; set; } = "#E74C3C";
        /// <summary>
        /// 
        /// </summary>
        public string WarningColor { get; set; } = "#F39C12";
        /// <summary>
        /// 
        /// </summary>
        public string SuccessColor { get; set; } = "#2ECC71";


        // Typography
        /// <summary>
        /// 
        /// </summary>
        public string FontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeSmall { get; set; } = 10;
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeMedium { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>
        public double FontSizeLarge { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public string FontWeight { get; set; } = "Normal";

        // Layout
        /// <summary>
        /// 
        /// </summary>
        public double BorderRadius { get; set; } = 4;
        /// <summary>
        /// 
        /// </summary>
        public SerializableThickness BorderThickness { get; set; } = new() { Left = 1, Top = 1, Right = 1, Bottom = 1 };

        // Advanced typography (optional)
        /// <summary>
        /// 
        /// </summary>
        public SerializableTypography? AdvancedTypography { get; set; }

        // Inheritance (optional)
        /// <summary>
        /// 
        /// </summary>
        public string? BaseTheme { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public Dictionary<string, object>? PropertyOverrides { get; set; }
    }

    /// <summary>
    /// 
    /// </summary>
    public static class ThemeConverterExtensions
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="theme"></param>
        /// <returns></returns>
        public static Skin ToSkin(this SerializableTheme theme)
        {
            return new Skin
            {
                Name = theme.Name,
                PrimaryColor = Color.Parse(theme.PrimaryColor),
                SecondaryColor = Color.Parse(theme.SecondaryColor),
                AccentColor = Color.Parse(theme.AccentColor),
                PrimaryBackground = Color.Parse(theme.PrimaryBackground),
                SecondaryBackground = Color.Parse(theme.SecondaryBackground),
                PrimaryTextColor = Color.Parse(theme.PrimaryTextColor),
                SecondaryTextColor = Color.Parse(theme.SecondaryTextColor),
                BorderColor = Color.Parse(theme.BorderColor),
                ErrorColor = Color.Parse(theme.ErrorColor),
                WarningColor = Color.Parse(theme.WarningColor),
                SuccessColor = Color.Parse(theme.SuccessColor),
                FontFamily = new FontFamily(theme.FontFamily),
                FontSizeSmall = theme.FontSizeSmall,
                FontSizeMedium = theme.FontSizeMedium,
                FontSizeLarge = theme.FontSizeLarge,
                FontWeight = Enum.TryParse<FontWeight>(theme.FontWeight, true, out var fw) ? fw : FontWeight.Normal,
                BorderRadius = theme.BorderRadius,
                BorderThickness = new Thickness(
                    theme.BorderThickness.Left,
                    theme.BorderThickness.Top,
                    theme.BorderThickness.Right,
                    theme.BorderThickness.Bottom
                ),
                // AdvancedTypography and PropertyOverrides could be used here too if needed
            };
        }
    }

}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\SerializableThickness.cs
================================================================================

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableThickness
    {
        /// <summary>
        /// 
        /// </summary>
        public double Left { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Top { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Right { get; set; }
        /// <summary>
        /// 
        /// </summary>
        public double Bottom { get; set; }

    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\SerializableTypography.cs
================================================================================

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// 
    /// </summary>
    public class SerializableTypography
    {
        /// <summary>
        /// 
        /// </summary>
        public double DisplayLarge { get; set; } = 57;
        /// <summary>
        /// 
        /// </summary>
        public double DisplayMedium { get; set; } = 45;
        /// <summary>
        /// 
        /// </summary>
        public double DisplaySmall { get; set; } = 36;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineLarge { get; set; } = 32;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineMedium { get; set; } = 28;
        /// <summary>
        /// 
        /// </summary>
        public double HeadlineSmall { get; set; } = 24;
        /// <summary>
        /// 
        /// </summary>
        public double TitleLarge { get; set; } = 22;
        /// <summary>
        /// 
        /// </summary>
        public double TitleMedium { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public double TitleSmall { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double LabelLarge { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double LabelMedium { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>
        public double LabelSmall { get; set; } = 11;
        /// <summary>
        /// 
        /// </summary>
        public double BodyLarge { get; set; } = 16;
        /// <summary>
        /// 
        /// </summary>
        public double BodyMedium { get; set; } = 14;
        /// <summary>
        /// 
        /// </summary>
        public double BodySmall { get; set; } = 12;
        /// <summary>
        /// 
        /// </summary>

        /// <summary>
        /// 
        /// </summary>
        public string HeaderFontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public string BodyFontFamily { get; set; } = "Segoe UI, San Francisco, Helvetica, Arial, sans-serif";
        /// <summary>
        /// 
        /// </summary>
        public string MonospaceFontFamily { get; set; } = "Consolas, Monaco, 'Courier New', monospace";
        /// <summary>
        /// 
        /// </summary>
        public double LineHeight { get; set; } = 1.5;
        /// <summary>
        /// 
        /// </summary>
        public double LetterSpacing { get; set; } = 0;
        /// <summary>
        /// 
        /// </summary>
        public bool EnableLigatures { get; set; } = true;
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\Skin.cs
================================================================================

using Avalonia;
using Avalonia.Media;

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// Represents a customizable theme skin for an Avalonia application, defining colors, fonts, and other visual properties.
    /// </summary>
    /// <remarks>
    /// The <see cref="Skin"/> class provides a set of properties to define the appearance of an application, 
    /// including primary and secondary colors, background colors, text colors, font settings, and additional UI properties.
    /// It also includes functionality to convert colors to brushes and a default constructor for initializing a dark theme.
    /// </remarks>
    public class Skin
    {
        // Basic colors
        /// <summary>
        /// Gets or sets the primary color of the theme skin.
        /// </summary>
        /// <remarks>
        /// This color is typically used as the main color for UI elements and serves as a foundation
        /// for the overall theme design. The default value for the dark theme is GunMetal Dark (#343B48).
        /// </remarks>
        public Color PrimaryColor { get; set; }
        /// <summary>
        /// Gets or sets the secondary color used in the theme skin.
        /// </summary>
        /// <remarks>
        /// This color is typically used for medium-tone elements within the theme.
        /// The default value for the dark theme is <c>#3D4654</c> (GunMetal Medium).
        /// </remarks>
        public Color SecondaryColor { get; set; }
        /// <summary>
        /// Gets or sets the accent color of the theme.
        /// </summary>
        /// <remarks>
        /// The accent color is used to highlight key elements in the user interface,
        /// providing a visually distinct color that complements the primary and secondary colors.
        /// </remarks>
        public Color AccentColor { get; set; }

        // Backgrounds
        /// <summary>
        /// Gets or sets the primary background color of the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the primary background color.
        /// </value>
        public Color PrimaryBackground { get; set; }
        /// <summary>
        /// Gets or sets the secondary background color of the skin.
        /// </summary>
        /// <remarks>
        /// This property defines the secondary background color used in the theme. 
        /// It is typically a lighter shade of the primary background color to provide contrast and visual hierarchy.
        /// </remarks>
        public Color SecondaryBackground { get; set; }
        /// <summary>
        /// Gets or sets the primary text color used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the primary text color. 
        /// The default value is white (<c>#FFFFFF</c>).
        /// </value>
        public Color PrimaryTextColor { get; set; }
        /// <summary>
        /// Gets or sets the color used for secondary text elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the secondary text color. The default value is a light gray color (#CCCCCC).
        /// </value>
        public Color SecondaryTextColor { get; set; }

        // Font properties
        /// <summary>
        /// Gets or sets the font family used for text rendering in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="FontFamily"/> representing the font family. The default value is "Segoe UI, San Francisco, Helvetica, Arial, sans-serif".
        /// </value>
        public FontFamily FontFamily { get; set; }
        /// <summary>
        /// Gets or sets the font size for small text elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for small text elements. The default value is 10.
        /// </value>
        public double FontSizeSmall { get; set; }
        /// <summary>
        /// Gets or sets the medium font size used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the medium font size.
        /// </value>
        public double FontSizeMedium { get; set; }
        /// <summary>
        /// Gets or sets the font size for large text elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for large text elements. 
        /// The default value is 16.
        /// </value>
        public double FontSizeLarge { get; set; }
        /// <summary>
        /// Gets or sets the font weight used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="FontWeight"/> value that specifies the weight of the font.
        /// The default value is <see cref="FontWeight.Normal"/>.
        /// </value>
        public FontWeight FontWeight { get; set; }

        /// <summary>
        /// Gets or sets the color of the border in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the border color.
        /// </value>
        public Color BorderColor { get; set; }

        /// <summary>
        /// Gets or sets the thickness of the border for the theme skin.
        /// </summary>
        /// <value>
        /// A <see cref="Thickness"/> structure that specifies the thickness of the border.
        /// </value>
        public Thickness BorderThickness { get; set; }
        /// <summary>
        /// Gets or sets the border radius applied to UI elements in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the radius of the border corners, in device-independent units (DIPs).
        /// </value>
        public double BorderRadius { get; set; }

        // Additional UI properties
        /// <summary>
        /// Gets or sets the color used to represent error states in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the error color. The default value is typically a shade of red.
        /// </value>
        public Color ErrorColor { get; set; }
        /// <summary>
        /// Gets or sets the color used to represent warnings in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the warning color. The default value is "#F39C12".
        /// </value>
        public Color WarningColor { get; set; }
        /// <summary>
        /// Gets or sets the color used to represent success states in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="Color"/> representing the success color.
        /// </value>
        public Color SuccessColor { get; set; }

        // Name of the skin
        /// <summary>
        /// Gets or sets the name of the skin.
        /// </summary>
        /// <value>
        /// A <see cref="string"/> representing the name of the skin. 
        /// The default value is "Dark".
        /// </value>
        public string? Name { get; set; }

        // Constructor with default values
        // URIs to ControlTheme resources mapped by control type or key
        /// <summary>
        /// Gets or sets the dictionary of control theme resource URIs used in the skin.
        /// </summary>
        /// <remarks>
        /// Keys typically represent control types or identifiers, and values are the associated resource URIs (e.g., avares URIs).
        /// </remarks>
        public Dictionary<string, string> ControlThemeUris { get; set; } = new();

        // URIs to general Style resources mapped by key
        /// <summary>
        /// Gets or sets the dictionary of style resource URIs used in the skin.
        /// </summary>
        /// <remarks>
        /// These styles can define visual behavior for multiple controls or layout elements.
        /// </remarks>
        public Dictionary<string, string> StyleUris { get; set; } = new();

        // Extended typography information such as font scaling and weight map
        /// <summary>
        /// Gets or sets the typography scale for the skin.
        /// </summary>
        /// <value>
        /// A <see cref="TypographyScale"/> object used to define consistent typography sizing and scaling for various text styles.
        /// </value>
        public TypographyScale Typography { get; set; } = new();

        // Additional font families for specific text roles
        /// <summary>
        /// Gets or sets the font family used for headers.
        /// </summary>
        public FontFamily HeaderFontFamily { get; set; }

        /// <summary>
        /// Gets or sets the font family used for body text.
        /// </summary>
        public FontFamily BodyFontFamily { get; set; }

        /// <summary>
        /// Gets or sets the font family used for monospace content (e.g., code blocks).
        /// </summary>
        public FontFamily MonospaceFontFamily { get; set; }

        // Line height and spacing for typographic elements
        /// <summary>
        /// Gets or sets the line height multiplier used in text layout.
        /// </summary>
        /// <remarks>
        /// This is typically a multiplier on the font size to determine the vertical spacing between lines.
        /// </remarks>
        public double LineHeight { get; set; } = 1.5;

        /// <summary>
        /// Gets or sets the letter spacing used in the theme.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing additional space between letters in DIPs. Default is 0.
        /// </value>
        public double LetterSpacing { get; set; } = 0;

        /// <summary>
        /// Gets or sets a value indicating whether ligatures are enabled in text rendering.
        /// </summary>
        /// <value>
        /// <c>true</c> to enable ligatures; otherwise, <c>false</c>.
        /// </value>
        public bool EnableLigatures { get; set; } = true;


        /// <summary>
        /// 
        /// </summary>
        public Skin()
        {
            // Set default values for Dark theme
            PrimaryColor = Color.Parse("#343B48");        // GunMetal Dark
            SecondaryColor = Color.Parse("#3D4654");      // GunMetal Medium
            AccentColor = Color.Parse("#3498DB");         // Accent Blue
            PrimaryBackground = Color.Parse("#2C313D");   // Dark background
            SecondaryBackground = Color.Parse("#464F62"); // GunMetal Light
            PrimaryTextColor = Color.Parse("#FFFFFF");
            SecondaryTextColor = Color.Parse("#CCCCCC");
            FontFamily = new FontFamily("Segoe UI, San Francisco, Helvetica, Arial, sans-serif");
            FontSizeSmall = 10;
            FontSizeMedium = 12;
            FontSizeLarge = 16;
            FontWeight = FontWeight.Normal;
            BorderColor = Color.Parse("#5D6778");
            BorderThickness = new Thickness(1);
            BorderRadius = 4;
            ErrorColor = Color.Parse("#E74C3C");
            WarningColor = Color.Parse("#F39C12");
            SuccessColor = Color.Parse("#2ECC71");
            HeaderFontFamily = FontFamily;
            BodyFontFamily = FontFamily;
            MonospaceFontFamily = new FontFamily("Consolas, Monaco, 'Courier New', monospace");

            Name = "Dark";
        }

        // Creates a brush from a color
        /// <summary>
        /// Converts the specified <see cref="Color"/> to a <see cref="SolidColorBrush"/>.
        /// </summary>
        /// <param name="color">The <see cref="Color"/> to convert.</param>
        /// <returns>A <see cref="SolidColorBrush"/> representing the specified color.</returns>
        public static SolidColorBrush ToBrush(Color color)
        {
            return new SolidColorBrush(color);
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\SkinManager.cs
================================================================================

using AvaloniaThemeManager.Models;
using AvaloniaThemeManager.Services;
using Microsoft.Extensions.DependencyInjection;

namespace AvaloniaThemeManager.Theme
{
    using Avalonia;
    using Avalonia.Controls;
    using Avalonia.Markup.Xaml.Styling;
    using Avalonia.Media;
    using Avalonia.Styling;

    namespace AvaloniaThemeManager.Theme
    {
        /// <summary>
        /// Manages the skins (themes) for an Avalonia application, providing functionality to register, retrieve, and apply skins.
        /// </summary>
        /// <remarks>
        /// This class serves as a singleton instance to manage the available skins and the currently applied skin. 
        /// It provides methods to register new skins, retrieve existing skins by name, and apply a specific skin.
        /// Additionally, it raises events when the skin is changed, allowing other components to react to theme updates.
        /// </remarks>
        public class SkinManager : ISkinManager
        {
            private readonly IThemeLoaderService _themeLoaderService;
            private static SkinManager? _instance;
            private readonly Dictionary<string, Skin?> _availableSkins = new();
            private Skin? _currentSkin;
            private readonly Application _application;
            private readonly List<IStyle> _appliedControlThemes = new();

            /// <summary>
            /// Gets the singleton instance of the <see cref="SkinManager"/> class, 
            /// which is responsible for managing skins (themes) in an Avalonia application.
            /// </summary>
            /// <value>
            /// The singleton instance of <see cref="SkinManager"/>.
            /// </value>
            /// <remarks>
            /// This property ensures that only one instance of <see cref="SkinManager"/> exists throughout the application.
            /// It provides centralized access to skin management functionality, including registering, retrieving, and applying skins.
            /// </remarks>
            public static SkinManager Instance => _instance ??= new SkinManager();

            /// <summary>
            /// Gets the currently applied <see cref="Skin"/> in the application.
            /// </summary>
            /// <value>
            /// The <see cref="Skin"/> instance representing the current theme, or <c>null</c> if no theme is applied.
            /// </value>
            /// <remarks>
            /// Use this property to retrieve or monitor the active theme in the application. 
            /// Changes to the current skin can be handled through the <see cref="SkinManager.SkinChanged"/> event.
            /// </remarks>
            public Skin? CurrentSkin
            {
                get => _currentSkin;
                private set => _currentSkin = value;
            }

            /// <summary>
            /// Event that is raised when the skin is changed.
            /// </summary>
            public event EventHandler? SkinChanged;

            private SkinManager(IThemeLoaderService themeLoaderService)
            {
                _themeLoaderService = themeLoaderService;
                _application = Application.Current ?? throw new InvalidOperationException("Application.Current must not be null.");
                RegisterDefaultSkins();
            }

            private SkinManager()
            {
                // Replace IServiceProvider.GetRequiredService<IThemeLoaderService>() with a valid service provider instance
                var serviceProvider = new ServiceCollection()
                    .AddSingleton<IThemeLoaderService, ThemeLoaderService>() // Register your service
                    .BuildServiceProvider();

                _themeLoaderService = serviceProvider.GetRequiredService<IThemeLoaderService>();
                _application = Application.Current ?? throw new InvalidOperationException("Application.Current must not be null.");
                RegisterDefaultSkins();
            }

            private void RegisterDefaultSkins()
            {
                string themePath = Path.Combine(AppContext.BaseDirectory, "Themes");
                var skins = _themeLoaderService.LoadSkins(themePath);
                foreach (var skin in skins)
                    RegisterSkin(skin.Name, skin);
            }

            /// <summary>
            /// Registers a new skin with the specified name.
            /// </summary>
            /// <param name="name">The name of the skin to register. This value must not be <c>null</c>.</param>
            /// <param name="skin">The <see cref="Skin"/> instance to register. This value must not be <c>null</c>.</param>
            /// <remarks>
            /// If both <paramref name="name"/> and <paramref name="skin"/> are not <c>null</c>, the skin is added to the collection of available skins.
            /// </remarks>
            public void RegisterSkin(string? name, Skin? skin)
            {
                if (skin != null && name != null)
                {
                    skin.Name = name;
                    _availableSkins[name] = skin;
                }
            }

            /// <summary>
            /// Retrieves a <see cref="Skin"/> instance by its name.
            /// </summary>
            /// <param name="name">The name of the skin to retrieve. If <c>null</c>, the current skin is returned.</param>
            /// <returns>
            /// The <see cref="Skin"/> instance associated with the specified name, 
            /// or the current skin if the name is not found or is <c>null</c>.
            /// </returns>
            public Skin? GetSkin(string? name)
            {
                if (name != null && _availableSkins.TryGetValue(name, out Skin? skin))
                    return skin;
                return _currentSkin;
            }

            /// <summary>
            /// Retrieves the names of all available skins registered in the <see cref="SkinManager"/>.
            /// </summary>
            /// <returns>A list of strings representing the names of the available skins.</returns>
            public List<string> GetAvailableSkinNames() => _availableSkins.Keys.ToList();

            /// <summary>
            /// Applies a skin to the application by its name.
            /// </summary>
            /// <param name="skinName">
            /// The name of the skin to apply. If the skin with the specified name is not found, 
            /// an error message will be logged.
            /// </param>
            /// <remarks>
            /// If the specified skin exists, it will be applied, and the selected theme will be saved.
            /// If the skin does not exist or an error occurs during the application, an appropriate 
            /// message will be logged.
            /// </remarks>
            /// <exception cref="Exception">
            /// Logs any exception that occurs while applying the skin.
            /// </exception>
            public void ApplySkin(string? skinName)
            {
                try
                {
                    if (skinName != null && _availableSkins.TryGetValue(skinName, out Skin? skin))
                    {
                        ApplySkin(skin);
                        SaveSelectedTheme(skinName);
                    }
                    else
                    {
                        Console.WriteLine($"Skin not found: {skinName}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error applying skin {skinName}: {ex.Message}");
                }
            }

            /// <summary>
            /// Applies the specified skin to the application, updating resources and triggering the <see cref="SkinChanged"/> event.
            /// </summary>
            /// <param name="skin">The <see cref="Skin"/> to be applied. If <c>null</c>, a default skin will be applied.</param>
            /// <remarks>
            /// This method updates the application's resources and typography settings based on the provided skin.
            /// If an exception occurs during the application of the skin, it will be logged to the console.
            /// </remarks>
            public void ApplySkin(Skin? skin)
            {
                if (skin == null)
                    skin = new Skin();

                _currentSkin = skin;

                try
                {
                    UpdateResources();
                    UpdateTypographyResources(skin);
                    SkinChanged?.Invoke(this, EventArgs.Empty);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error applying custom skin: {ex.Message}");
                }
            }

            private void UpdateTypographyResources(Skin skin)
            {
                var resources = Application.Current?.Resources;
                if (resources == null) return;

                try
                {
                    // Typography scale
                    resources["DisplayLargeFontSize"] = skin.Typography.DisplayLarge;
                    resources["DisplayMediumFontSize"] = skin.Typography.DisplayMedium;
                    resources["DisplaySmallFontSize"] = skin.Typography.DisplaySmall;
                    resources["HeadlineLargeFontSize"] = skin.Typography.HeadlineLarge;
                    resources["HeadlineMediumFontSize"] = skin.Typography.HeadlineMedium;
                    resources["HeadlineSmallFontSize"] = skin.Typography.HeadlineSmall;
                    resources["TitleLargeFontSize"] = skin.Typography.TitleLarge;
                    resources["TitleMediumFontSize"] = skin.Typography.TitleMedium;
                    resources["TitleSmallFontSize"] = skin.Typography.TitleSmall;
                    resources["LabelLargeFontSize"] = skin.Typography.LabelLarge;
                    resources["LabelMediumFontSize"] = skin.Typography.LabelMedium;
                    resources["LabelSmallFontSize"] = skin.Typography.LabelSmall;
                    resources["BodyLargeFontSize"] = skin.Typography.BodyLarge;
                    resources["BodyMediumFontSize"] = skin.Typography.BodyMedium;
                    resources["BodySmallFontSize"] = skin.Typography.BodySmall;

                    // Font families
                    resources["HeaderFontFamily"] = skin.HeaderFontFamily;
                    resources["BodyFontFamily"] = skin.BodyFontFamily;
                    resources["MonospaceFontFamily"] = skin.MonospaceFontFamily;

                    // Text properties
                    resources["DefaultLineHeight"] = skin.LineHeight;
                    resources["DefaultLetterSpacing"] = skin.LetterSpacing;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error updating typography resources: {ex.Message}");
                }
            }


            private void UpdateResources()
            {
                if (_application == null || _currentSkin == null)
                    return;

                var resources = _application.Resources;
                if (resources == null)
                    return;

                UpdateBrush(resources, "PrimaryColorBrush", _currentSkin.PrimaryColor);
                UpdateBrush(resources, "SecondaryColorBrush", _currentSkin.SecondaryColor);
                UpdateBrush(resources, "AccentBlueBrush", _currentSkin.AccentColor);
                UpdateBrush(resources, "GunMetalDarkBrush", _currentSkin.PrimaryColor);
                UpdateBrush(resources, "GunMetalMediumBrush", _currentSkin.SecondaryColor);
                UpdateBrush(resources, "GunMetalLightBrush", _currentSkin.SecondaryBackground);
                UpdateBrush(resources, "BackgroundBrush", _currentSkin.PrimaryBackground);
                UpdateBrush(resources, "BackgroundLightBrush", _currentSkin.SecondaryBackground);
                var dark = new Color(_currentSkin.PrimaryBackground.A, (byte)(_currentSkin.PrimaryBackground.R * 0.8), (byte)(_currentSkin.PrimaryBackground.G * 0.8), (byte)(_currentSkin.PrimaryBackground.B * 0.8));
                UpdateBrush(resources, "BackgroundDarkBrush", dark);
                UpdateBrush(resources, "TextPrimaryBrush", _currentSkin.PrimaryTextColor);
                UpdateBrush(resources, "TextSecondaryBrush", _currentSkin.SecondaryTextColor);
                UpdateBrush(resources, "BorderBrush", _currentSkin.BorderColor);
                UpdateBrush(resources, "ErrorBrush", _currentSkin.ErrorColor);
                UpdateBrush(resources, "WarningBrush", _currentSkin.WarningColor);
                UpdateBrush(resources, "SuccessBrush", _currentSkin.SuccessColor);

                resources["DefaultFontFamily"] = _currentSkin.FontFamily;
                resources["FontSizeSmall"] = _currentSkin.FontSizeSmall;
                resources["FontSizeMedium"] = _currentSkin.FontSizeMedium;
                resources["FontSizeLarge"] = _currentSkin.FontSizeLarge;
                resources["DefaultFontWeight"] = _currentSkin.FontWeight;
                resources["BorderThickness"] = _currentSkin.BorderThickness;
                resources["CornerRadius"] = new CornerRadius(_currentSkin.BorderRadius);

                ApplyControlThemes(_currentSkin);
                ForceVisualUpdate();
            }

            private void ApplyControlThemes(Skin skin)
            {
                foreach (var style in _appliedControlThemes)
                    _application.Styles.Remove(style);
                _appliedControlThemes.Clear();

                foreach (var kvp in skin.ControlThemeUris)
                {
                    var style = new StyleInclude(new Uri("avares://AvaloniaThemeManager"))
                    {
                        Source = new Uri(kvp.Value)
                    };
                    _application.Styles.Add(style);
                    _appliedControlThemes.Add(style);
                }

                foreach (var kvp in skin.ControlThemeUris)
                {
                    var style = new StyleInclude(new Uri("avares://AvaloniaThemeManager"))
                    {
                        Source = new Uri(kvp.Value)
                    };
                    _application.Styles.Add(style);
                    _appliedControlThemes.Add(style);
                }

            }

            private void UpdateBrush(IResourceDictionary dict, string key, Color color)
            {
                if (dict.TryGetValue(key, out var existingBrush) && existingBrush is SolidColorBrush brush)
                    brush.Color = color;
                else
                    dict[key] = new SolidColorBrush(color);
            }

            private void ForceVisualUpdate()
            {
                if (_application.ApplicationLifetime is Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime desktop)
                {
                    foreach (var window in desktop.Windows)
                    {
                        window.InvalidateVisual();
                        InvalidateRecursive(window);
                    }
                }
            }

            private void InvalidateRecursive(Control control)
            {
                control.InvalidateVisual();

                if (control is Panel panel)
                {
                    foreach (var child in panel.Children)
                        InvalidateRecursive(child);
                }
                else if (control is ContentControl cc && cc.Content is Control c)
                    InvalidateRecursive(c);
                else if (control is ItemsControl ic && ic.ItemsPanelRoot is Control ip)
                    InvalidateRecursive(ip);
            }

            /// <summary>
            /// Saves the name of the currently selected theme to the application settings.
            /// </summary>
            /// <param name="themeName">
            /// The name of the theme to save. If <c>null</c>, no action is performed.
            /// </param>
            /// <remarks>
            /// This method updates the theme name in the application settings and persists the changes.
            /// It is typically called after applying a new theme to ensure the selected theme is remembered
            /// across application sessions.
            /// </remarks>
            public void SaveSelectedTheme(string? themeName)
            {
                if (themeName != null)
                {
                    AppSettings.Instance.Theme = themeName;
                    AppSettings.Instance.Save();
                }
            }

            /// <summary>
            /// Loads the previously saved theme and applies it to the application.
            /// </summary>
            /// <remarks>
            /// This method retrieves the saved theme name from the application settings and applies it if it exists
            /// in the list of available skins. If no saved theme is found or the saved theme is not available,
            /// no changes are made to the current theme.
            /// </remarks>
            /// <example>
            /// Example usage:
            /// <code>
            /// var themeManager = SkinManager.Instance;
            /// themeManager.LoadSavedTheme();
            /// </code>
            /// </example>
            public void LoadSavedTheme()
            {
                var themeName = AppSettings.Instance.Theme;
                if (!string.IsNullOrEmpty(themeName) && _availableSkins.ContainsKey(themeName))
                    ApplySkin(themeName);
            }
        }
    }




    /// <summary>
    /// Helper class to refresh all windows in an Avalonia application.
    /// </summary>
    public static class AvaloniaResourceHelper
    {
        /// <summary>
        /// Refreshes all windows in the specified Avalonia application by invalidating their visuals.
        /// </summary>
        /// <param name="app">
        /// The <see cref="Application"/> instance whose windows should be refreshed. 
        /// This is typically the main application instance of an Avalonia application.
        /// </param>
        /// <remarks>
        /// on each of them to trigger a visual refresh. It is particularly useful when applying theme or resource changes.
        /// </remarks>
        public static void RefreshAllWindows(Application app)
        {
            if (app.ApplicationLifetime is Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime desktop)
            {
                foreach (var window in desktop.Windows)
                {
                    window.InvalidateVisual();
                }
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ThemeImportExport.cs
================================================================================

// Theme/ThemeImportExport.cs
using Avalonia;
using Avalonia.Media;
using AvaloniaThemeManager.Models;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// Handles theme import and export operations.
    /// </summary>
    public static class ThemeImportExport
    {
        private static readonly JsonSerializerOptions _jsonOptions = new()
        {
            WriteIndented = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        };

        /// <summary>
        /// Exports a theme to a JSON file.
        /// </summary>
        public static async Task<bool> ExportThemeAsync(Skin theme, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableTheme = ConvertToSerializable(theme, description, author);
                var json = JsonSerializer.Serialize(serializableTheme, _jsonOptions);

                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting theme: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Exports an advanced theme with typography to a JSON file.
        /// </summary>
        public static async Task<bool> ExportAdvancedThemeAsync(Skin theme, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableTheme = ConvertToSerializable(theme, description, author);

                // Add advanced typography
                serializableTheme.AdvancedTypography = new SerializableTypography
                {
                    DisplayLarge = theme.Typography.DisplayLarge,
                    DisplayMedium = theme.Typography.DisplayMedium,
                    DisplaySmall = theme.Typography.DisplaySmall,
                    HeadlineLarge = theme.Typography.HeadlineLarge,
                    HeadlineMedium = theme.Typography.HeadlineMedium,
                    HeadlineSmall = theme.Typography.HeadlineSmall,
                    TitleLarge = theme.Typography.TitleLarge,
                    TitleMedium = theme.Typography.TitleMedium,
                    TitleSmall = theme.Typography.TitleSmall,
                    LabelLarge = theme.Typography.LabelLarge,
                    LabelMedium = theme.Typography.LabelMedium,
                    LabelSmall = theme.Typography.LabelSmall,
                    BodyLarge = theme.Typography.BodyLarge,
                    BodyMedium = theme.Typography.BodyMedium,
                    BodySmall = theme.Typography.BodySmall,
                    HeaderFontFamily = theme.HeaderFontFamily.ToString(),
                    BodyFontFamily = theme.BodyFontFamily.ToString(),
                    MonospaceFontFamily = theme.MonospaceFontFamily.ToString(),
                    LineHeight = theme.LineHeight,
                    LetterSpacing = theme.LetterSpacing,
                    EnableLigatures = theme.EnableLigatures
                };

                var json = JsonSerializer.Serialize(serializableTheme, _jsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting advanced theme: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Exports an inheritable theme to a JSON file.
        /// </summary>
        public static async Task<bool> ExportInheritableThemeAsync(InheritableSkin theme, string filePath, string? description = null, string? author = null)
        {
            try
            {
                var serializableTheme = ConvertToSerializable(theme, description, author);

                // Add inheritance information
                serializableTheme.BaseTheme = theme.BaseThemeName;
                serializableTheme.PropertyOverrides = theme.PropertyOverrides;

                var json = JsonSerializer.Serialize(serializableTheme, _jsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting inheritable theme: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// Imports a theme from a JSON file.
        /// </summary>
        public static async Task<ThemeImportResult> ImportThemeAsync(string filePath)
        {
            var result = new ThemeImportResult();

            try
            {
                if (!File.Exists(filePath))
                {
                    result.ErrorMessage = $"Theme file does not exist: {filePath}";
                    return result;
                }

                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableTheme>(json, _jsonOptions);

                if (serializableTheme == null)
                {
                    result.ErrorMessage = "Invalid theme file format";
                    return result;
                }

                // Validate before converting
                var validation = await ValidateThemeFileAsync(filePath);
                if (!validation.IsValid)
                {
                    result.ErrorMessage = $"Theme validation failed: {string.Join(", ", validation.Errors)}";
                    result.Warnings.AddRange(validation.Warnings);
                    return result;
                }

                result.Theme = ConvertFromSerializable(serializableTheme);
                result.Success = true;
            }
            catch (JsonException ex)
            {
                result.ErrorMessage = $"JSON parsing error: {ex.Message}";
            }
            catch (Exception ex)
            {
                result.ErrorMessage = $"Unexpected error importing theme: {ex.Message}";
            }

            return result;
        }

        /// <summary>
        /// Imports an advanced theme from a JSON file.
        /// </summary>
        public static async Task<Skin?> ImportAdvancedThemeAsync(string filePath)
        {
            try
            {
                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableTheme>(json, _jsonOptions);

                if (serializableTheme == null) return null;

                var baseSkin = ConvertFromSerializable(serializableTheme);
                

                // Apply advanced typography if present
                if (serializableTheme.AdvancedTypography != null)
                {
                    var typography = serializableTheme.AdvancedTypography;

                    baseSkin.Typography = new TypographyScale
                    {
                        DisplayLarge = typography.DisplayLarge,
                        DisplayMedium = typography.DisplayMedium,
                        DisplaySmall = typography.DisplaySmall,
                        HeadlineLarge = typography.HeadlineLarge,
                        HeadlineMedium = typography.HeadlineMedium,
                        HeadlineSmall = typography.HeadlineSmall,
                        TitleLarge = typography.TitleLarge,
                        TitleMedium = typography.TitleMedium,
                        TitleSmall = typography.TitleSmall,
                        LabelLarge = typography.LabelLarge,
                        LabelMedium = typography.LabelMedium,
                        LabelSmall = typography.LabelSmall,
                        BodyLarge = typography.BodyLarge,
                        BodyMedium = typography.BodyMedium,
                        BodySmall = typography.BodySmall
                    };

                    baseSkin.HeaderFontFamily = new FontFamily(typography.HeaderFontFamily);
                    baseSkin.BodyFontFamily = new FontFamily(typography.BodyFontFamily);
                    baseSkin.MonospaceFontFamily = new FontFamily(typography.MonospaceFontFamily);
                    baseSkin.LineHeight = typography.LineHeight;
                    baseSkin.LetterSpacing = typography.LetterSpacing;
                    baseSkin.EnableLigatures = typography.EnableLigatures;
                }

                return baseSkin;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error importing advanced theme: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Imports an inheritable theme from a JSON file.
        /// </summary>
        public static async Task<InheritableSkin?> ImportInheritableThemeAsync(string filePath)
        {
            try
            {
                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableTheme>(json, _jsonOptions);

                if (serializableTheme == null) return null;

                var baseSkin = ConvertFromSerializable(serializableTheme);
                var inheritableSkin = new InheritableSkin();

                // Copy all properties from base skin
                CopyPropertiesToInheritable(inheritableSkin, baseSkin);

                // Set inheritance properties
                inheritableSkin.BaseThemeName = serializableTheme.BaseTheme;
                inheritableSkin.PropertyOverrides = serializableTheme.PropertyOverrides ?? new Dictionary<string, object>();

                return inheritableSkin;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error importing inheritable theme: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// Validates a theme file before importing.
        /// </summary>
        public static async Task<ThemeValidationResult> ValidateThemeFileAsync(string filePath)
        {
            var result = new ThemeValidationResult();

            try
            {
                if (!File.Exists(filePath))
                {
                    result.AddError("Theme file does not exist");
                    return result;
                }

                var json = await File.ReadAllTextAsync(filePath);
                var serializableTheme = JsonSerializer.Deserialize<SerializableTheme>(json, _jsonOptions);

                if (serializableTheme == null)
                {
                    result.AddError("Invalid JSON format");
                    return result;
                }

                // Validate required fields
                if (string.IsNullOrWhiteSpace(serializableTheme.Name))
                {
                    result.AddError("Theme name is required");
                }

                // Try to convert to validate color formats
                try
                {
                    var skin = ConvertFromSerializable(serializableTheme);
                    var validator = new ThemeValidator();
                    var validationResult = validator.ValidateTheme(skin);

                    result.Errors.AddRange(validationResult.Errors);
                    result.Warnings.AddRange(validationResult.Warnings);
                    result.IsValid = validationResult.IsValid && result.Errors.Count == 0;
                }
                catch (Exception ex)
                {
                    result.AddError($"Invalid theme data: {ex.Message}");
                }
            }
            catch (Exception ex)
            {
                result.AddError($"Error reading theme file: {ex.Message}");
            }

            return result;
        }

        /// <summary>
        /// Exports multiple themes to a theme pack file.
        /// </summary>
        public static async Task<bool> ExportThemePackAsync(Dictionary<string, Skin> themes, string filePath, string packName, string? description = null)
        {
            try
            {
                var themePack = new
                {
                    Name = packName,
                    Description = description,
                    Version = "1.0",
                    CreatedDate = DateTime.Now,
                    Themes = themes.Select(kvp => ConvertToSerializable(kvp.Value, null, null)).ToArray()
                };

                var json = JsonSerializer.Serialize(themePack, _jsonOptions);
                await File.WriteAllTextAsync(filePath, json);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error exporting theme pack: {ex.Message}");
                return false;
            }
        }

        private static SerializableTheme ConvertToSerializable(Skin theme, string? description, string? author)
        {
            return new SerializableTheme
            {
                Name = theme.Name ?? "Unnamed Theme",
                Description = description ?? "",
                Author = author ?? "",
                PrimaryColor = theme.PrimaryColor.ToString(),
                SecondaryColor = theme.SecondaryColor.ToString(),
                AccentColor = theme.AccentColor.ToString(),
                PrimaryBackground = theme.PrimaryBackground.ToString(),
                SecondaryBackground = theme.SecondaryBackground.ToString(),
                PrimaryTextColor = theme.PrimaryTextColor.ToString(),
                SecondaryTextColor = theme.SecondaryTextColor.ToString(),
                BorderColor = theme.BorderColor.ToString(),
                ErrorColor = theme.ErrorColor.ToString(),
                WarningColor = theme.WarningColor.ToString(),
                SuccessColor = theme.SuccessColor.ToString(),
                FontFamily = theme.FontFamily.ToString(),
                FontSizeSmall = theme.FontSizeSmall,
                FontSizeMedium = theme.FontSizeMedium,
                FontSizeLarge = theme.FontSizeLarge,
                FontWeight = theme.FontWeight.ToString(),
                BorderRadius = theme.BorderRadius,
                BorderThickness = new SerializableThickness
                {
                    Left = theme.BorderThickness.Left,
                    Top = theme.BorderThickness.Top,
                    Right = theme.BorderThickness.Right,
                    Bottom = theme.BorderThickness.Bottom
                }
            };
        }

        private static Skin ConvertFromSerializable(SerializableTheme serializableTheme)
        {
            var fontWeight = Enum.TryParse<FontWeight>(serializableTheme.FontWeight, out var weight)
                ? weight
                : FontWeight.Normal;

            return new Skin
            {
                Name = serializableTheme.Name,
                PrimaryColor = Color.Parse(serializableTheme.PrimaryColor),
                SecondaryColor = Color.Parse(serializableTheme.SecondaryColor),
                AccentColor = Color.Parse(serializableTheme.AccentColor),
                PrimaryBackground = Color.Parse(serializableTheme.PrimaryBackground),
                SecondaryBackground = Color.Parse(serializableTheme.SecondaryBackground),
                PrimaryTextColor = Color.Parse(serializableTheme.PrimaryTextColor),
                SecondaryTextColor = Color.Parse(serializableTheme.SecondaryTextColor),
                BorderColor = Color.Parse(serializableTheme.BorderColor),
                ErrorColor = Color.Parse(serializableTheme.ErrorColor),
                WarningColor = Color.Parse(serializableTheme.WarningColor),
                SuccessColor = Color.Parse(serializableTheme.SuccessColor),
                FontFamily = new FontFamily(serializableTheme.FontFamily),
                FontSizeSmall = serializableTheme.FontSizeSmall,
                FontSizeMedium = serializableTheme.FontSizeMedium,
                FontSizeLarge = serializableTheme.FontSizeLarge,
                FontWeight = fontWeight,
                BorderRadius = serializableTheme.BorderRadius,
                BorderThickness = new Thickness(
                    serializableTheme.BorderThickness.Left,
                    serializableTheme.BorderThickness.Top,
                    serializableTheme.BorderThickness.Right,
                    serializableTheme.BorderThickness.Bottom
                )
            };
        }

        private static void CopyPropertiesToInheritable(InheritableSkin target, Skin source)
        {
            target.PrimaryColor = source.PrimaryColor;
            target.SecondaryColor = source.SecondaryColor;
            target.AccentColor = source.AccentColor;
            target.PrimaryBackground = source.PrimaryBackground;
            target.SecondaryBackground = source.SecondaryBackground;
            target.PrimaryTextColor = source.PrimaryTextColor;
            target.SecondaryTextColor = source.SecondaryTextColor;
            target.FontFamily = source.FontFamily;
            target.FontSizeSmall = source.FontSizeSmall;
            target.FontSizeMedium = source.FontSizeMedium;
            target.FontSizeLarge = source.FontSizeLarge;
            target.FontWeight = source.FontWeight;
            target.BorderColor = source.BorderColor;
            target.BorderThickness = source.BorderThickness;
            target.BorderRadius = source.BorderRadius;
            target.ErrorColor = source.ErrorColor;
            target.WarningColor = source.WarningColor;
            target.SuccessColor = source.SuccessColor;
            target.Name = source.Name;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ThemeInheritanceManager.cs
================================================================================

using AvaloniaThemeManager.Theme.AvaloniaThemeManager.Theme;

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// 
    /// </summary>
    public class ThemeInheritanceManager
    {
        private readonly Dictionary<string, InheritableSkin> _inheritableThemes = new();
        private readonly Dictionary<string, Skin> _resolvedCache = new();

        /// <summary>
        /// Registers an inheritable theme.
        /// </summary>
        public void RegisterInheritableTheme(string name, InheritableSkin theme)
        {
            theme.Name = name;
            _inheritableThemes[name] = theme;
            _resolvedCache.Remove(name); // Clear cache
        }

        /// <summary>
        /// Gets a resolved theme with inheritance applied.
        /// </summary>
        public Skin? GetResolvedTheme(string name)
        {
            if (_resolvedCache.TryGetValue(name, out var cached))
            {
                return cached;
            }

            if (!_inheritableThemes.TryGetValue(name, out var inheritableTheme))
            {
                return null;
            }

            var baseTheme = GetBaseTheme(inheritableTheme);
            var resolved = inheritableTheme.CreateResolvedSkin(baseTheme);

            _resolvedCache[name] = resolved;
            return resolved;
        }

        private Skin? GetBaseTheme(InheritableSkin theme)
        {
            if (string.IsNullOrEmpty(theme.BaseThemeName))
            {
                return null;
            }

            // Handle recursive inheritance
            if (_inheritableThemes.TryGetValue(theme.BaseThemeName, out var baseInheritable))
            {
                return GetResolvedTheme(theme.BaseThemeName);
            }

            // Fall back to regular skin manager
            return SkinManager.Instance.GetSkin(theme.BaseThemeName);
        }

        /// <summary>
        /// Creates a theme variant by overriding specific properties.
        /// </summary>
        public InheritableSkin CreateVariant(string baseName, string variantName, Dictionary<string, object> overrides)
        {
            var variant = new InheritableSkin
            {
                Name = variantName,
                BaseThemeName = baseName,
                PropertyOverrides = overrides
            };

            RegisterInheritableTheme(variantName, variant);
            return variant;
        }

        /// <summary>
        /// Clears the resolved theme cache.
        /// </summary>
        public void ClearCache()
        {
            _resolvedCache.Clear();
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ThemeValidationResult.cs
================================================================================

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// Represents the result of theme validation.
    /// </summary>
    public class ThemeValidationResult
    {
        /// <summary>
        /// Gets or sets a value indicating whether the theme validation was successful.
        /// </summary>
        /// <value>
        /// <c>true</c> if the theme validation passed without errors; otherwise, <c>false</c>.
        /// </value>
        public bool IsValid { get; set; }
        /// <summary>
        /// Gets or sets the list of error messages encountered during theme validation.
        /// </summary>
        /// <value>
        /// A <see cref="List{T}"/> of <see cref="string"/> representing the validation errors.
        /// </value>
        public List<string> Errors { get; set; } = new();
        /// <summary>
        /// Gets or sets the list of warnings encountered during theme validation.
        /// </summary>
        /// <value>
        /// A list of warning messages that provide additional information about potential issues
        /// in the theme that do not necessarily invalidate it.
        /// </value>
        public List<string> Warnings { get; set; } = new();

        /// <summary>
        /// Adds an error message to the list of validation errors.
        /// </summary>
        /// <param name="error">The error message to add.</param>
        public void AddError(string error) => Errors.Add(error);
        /// <summary>
        /// Adds a warning message to the list of validation warnings.
        /// </summary>
        /// <param name="warning">The warning message to add.</param>
        public void AddWarning(string warning) => Warnings.Add(warning);
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ThemeValidator.cs
================================================================================

// Theme/ThemeValidation.cs

using Avalonia.Media;
using AvaloniaThemeManager.Theme.ValidationRules;

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// Validates theme configurations and provides error recovery.
    /// </summary>
    public class ThemeValidator
    {
        private readonly List<IThemeValidationRule> _validationRules;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThemeValidator"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor sets up the default validation rules for theme validation, 
        /// including checks for color contrast, font size, border consistency, naming conventions, 
        /// and accessibility compliance.
        /// </remarks>
        public ThemeValidator()
        {
            _validationRules = new List<IThemeValidationRule>
            {
                new ColorContrastValidationRule(),
                new FontSizeValidationRule(),
                //new BorderValidationRule(),
                //new NameValidationRule(),
                //new AccessibilityValidationRule()
            };
        }

        /// <summary>
        /// Validates a theme and returns validation results.
        /// </summary>
        // Update the ValidateTheme method in ThemeValidator class
        public ThemeValidationResult ValidateTheme(Skin theme)
        {
            var result = new ThemeValidationResult();

            foreach (var rule in _validationRules)
            {
                var ruleResult = rule.Validate(theme);

                result.Errors.AddRange(ruleResult.Errors);
                result.Warnings.AddRange(ruleResult.Warnings);
            }

            // FIX: Properly set IsValid based on errors
            result.IsValid = result.Errors.Count == 0;

            return result;
        }

        /// <summary>
        /// Attempts to fix validation errors automatically.
        /// </summary>
        public Skin AutoFixTheme(Skin theme)
        {
            var fixedTheme = CloneSkin(theme);

            // Fix null or invalid name
            if (string.IsNullOrWhiteSpace(fixedTheme.Name))
            {
                fixedTheme.Name = "Custom Theme";
            }

            // Ensure font sizes are within reasonable bounds
            fixedTheme.FontSizeSmall = Math.Max(8, Math.Min(20, fixedTheme.FontSizeSmall));
            fixedTheme.FontSizeMedium = Math.Max(10, Math.Min(24, fixedTheme.FontSizeMedium));
            fixedTheme.FontSizeLarge = Math.Max(12, Math.Min(32, fixedTheme.FontSizeLarge));

            // Ensure border radius is positive
            fixedTheme.BorderRadius = Math.Max(0, fixedTheme.BorderRadius);

            // Fix color contrast issues
            fixedTheme = FixColorContrast(fixedTheme);

            return fixedTheme;
        }

        private Skin CloneSkin(Skin original)
        {
            return new Skin
            {
                Name = original.Name,
                PrimaryColor = original.PrimaryColor,
                SecondaryColor = original.SecondaryColor,
                AccentColor = original.AccentColor,
                PrimaryBackground = original.PrimaryBackground,
                SecondaryBackground = original.SecondaryBackground,
                PrimaryTextColor = original.PrimaryTextColor,
                SecondaryTextColor = original.SecondaryTextColor,
                FontFamily = original.FontFamily,
                FontSizeSmall = original.FontSizeSmall,
                FontSizeMedium = original.FontSizeMedium,
                FontSizeLarge = original.FontSizeLarge,
                FontWeight = original.FontWeight,
                BorderColor = original.BorderColor,
                BorderThickness = original.BorderThickness,
                BorderRadius = original.BorderRadius,
                ErrorColor = original.ErrorColor,
                WarningColor = original.WarningColor,
                SuccessColor = original.SuccessColor
            };
        }

        private Skin FixColorContrast(Skin theme)
        {
            // Calculate contrast ratio and adjust if needed
            var primaryContrastRatio = CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);

            if (primaryContrastRatio < 4.5) // WCAG AA minimum
            {
                // Adjust text color for better contrast
                theme.PrimaryTextColor = AdjustColorForContrast(theme.PrimaryTextColor, theme.PrimaryBackground, 4.5);
            }

            var secondaryContrastRatio = CalculateContrastRatio(theme.SecondaryTextColor, theme.SecondaryBackground);

            if (secondaryContrastRatio < 3.0) // More lenient for secondary text
            {
                theme.SecondaryTextColor =
                    AdjustColorForContrast(theme.SecondaryTextColor, theme.SecondaryBackground, 3.0);
            }

            return theme;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="foreground"></param>
        /// <param name="background"></param>
        /// <returns></returns>
        public double CalculateContrastRatio(Color foreground, Color background)
        {
            try
            {
                var fgLuminance = GetRelativeLuminance(foreground);
                var bgLuminance = GetRelativeLuminance(background);

                var lighter = Math.Max(fgLuminance, bgLuminance);
                var darker = Math.Min(fgLuminance, bgLuminance);

                return (lighter + 0.05) / (darker + 0.05);
            }
            catch (Exception)
            {
                // Return a safe default contrast ratio
                return 1.0;
            }
        }

        private double GetRelativeLuminance(Color color)
        {
            var r = GetLuminanceComponent(color.R / 255.0);
            var g = GetLuminanceComponent(color.G / 255.0);
            var b = GetLuminanceComponent(color.B / 255.0);

            return 0.2126 * r + 0.7152 * g + 0.0722 * b;
        }

        private double GetLuminanceComponent(double component)
        {
            return component <= 0.03928
                ? component / 12.92
                : Math.Pow((component + 0.055) / 1.055, 2.4);
        }

        private Color AdjustColorForContrast(Color foreground, Color background, double targetRatio)
        {
            var bgLuminance = GetRelativeLuminance(background);
            var isDarkBackground = bgLuminance < 0.5;

            // For dark backgrounds, make text lighter; for light backgrounds, make text darker
            var step = isDarkBackground ? 10 : -10;
            var adjustedColor = foreground;

            for (int i = 0; i < 25; i++) // Limit iterations to prevent infinite loop
            {
                var ratio = CalculateContrastRatio(adjustedColor, background);
                if (ratio >= targetRatio) break;

                adjustedColor = Color.FromRgb(
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.R + step)),
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.G + step)),
                    (byte)Math.Max(0, Math.Min(255, adjustedColor.B + step))
                );
            }

            return adjustedColor;
        }
    }
   
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\TypographyScale.cs
================================================================================

// Theme/TypographySystem.cs

namespace AvaloniaThemeManager.Theme
{
    /// <summary>
    /// Defines typography scale and settings for themes.
    /// </summary>
    public class TypographyScale
    {
        // Display sizes (largest)
        /// <summary>
        /// Gets or sets the size of the largest display typography.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the size of the largest display typography. 
        /// The default value is 57.
        /// </value>
        public double DisplayLarge { get; set; } = 57;
        /// <summary>
        /// Gets or sets the medium display typography size.
        /// </summary>
        /// <value>
        /// The size of the medium display typography, typically used for prominent text elements.
        /// The default value is 45.
        /// </value>
        public double DisplayMedium { get; set; } = 45;
        /// <summary>
        /// Gets or sets the size of the "Display Small" typography, typically used for smaller display text.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the size of the "Display Small" typography. The default value is 36.
        /// </value>
        public double DisplaySmall { get; set; } = 36;

        // Headline sizes
        /// <summary>
        /// Gets or sets the font size for large headlines in the typography scale.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for large headlines. 
        /// The default value is 32.
        /// </value>
        public double HeadlineLarge { get; set; } = 32;
        /// <summary>
        /// Gets or sets the font size for medium-sized headlines in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized headlines, typically used for emphasizing content
        /// that is less prominent than large headlines but more significant than small headlines.
        /// The default value is 28.
        /// </value>
        public double HeadlineMedium { get; set; } = 28;
        /// <summary>
        /// Gets or sets the font size for small headline text in the typography scale.
        /// </summary>
        /// <value>
        /// A <see cref="double"/> representing the font size for small headline text. 
        /// The default value is 24.
        /// </value>
        public double HeadlineSmall { get; set; } = 24;

        // Title sizes
        /// <summary>
        /// Gets or sets the font size for large titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for large titles, typically used for prominent headings or titles.
        /// The default value is 22.
        /// </value>
        public double TitleLarge { get; set; } = 22;
        /// <summary>
        /// Gets or sets the font size for medium-sized titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized titles, typically used for medium emphasis text elements.
        /// The default value is 16.
        /// </value>
        public double TitleMedium { get; set; } = 16;
        /// <summary>
        /// Gets or sets the font size for small titles in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for small titles, typically used for less prominent headings or titles.
        /// The default value is 14.
        /// </value>
        public double TitleSmall { get; set; } = 14;

        // Label sizes
        /// <summary>
        /// Gets or sets the font size for large labels in the typography scale.
        /// </summary>
        /// <value>
        /// The size of the font for large labels, typically used for prominent labeling.
        /// The default value is 14.
        /// </value>
        public double LabelLarge { get; set; } = 14;
        /// <summary>
        /// Gets or sets the font size for medium-sized labels in the typography scale.
        /// </summary>
        /// <value>
        /// The font size for medium-sized labels. The default value is 12.
        /// </value>
        public double LabelMedium { get; set; } = 12;
        /// <summary>
        /// Gets or sets the font size for small labels in the typography scale.
        /// </summary>
        /// <value>
        /// The font size, in device-independent units (DIPs), for small labels. The default value is 11.
        /// </value>
        public double LabelSmall { get; set; } = 11;

        // Body sizes
        /// <summary>
        /// Gets or sets the font size for large body text.
        /// </summary>
        /// <value>
        /// The font size for large body text, typically used for primary content areas.
        /// Default value is 16.
        /// </value>
        public double BodyLarge { get; set; } = 16;
        /// <summary>
        /// Gets or sets the font size for medium body text in the typography scale.
        /// </summary>
        /// <value>
        /// The font size, in device-independent units (DIPs), for medium body text. 
        /// The default value is 14.
        /// </value>
        public double BodyMedium { get; set; } = 14;
        /// <summary>
        /// Gets or sets the font size for small body text.
        /// </summary>
        /// <value>
        /// The font size for small body text, typically used for less prominent content.
        /// </value>
        public double BodySmall { get; set; } = 12;

        /// <summary>
        /// Applies a scale factor to all typography sizes.
        /// </summary>
        public void ApplyScale(double scaleFactor)
        {
            DisplayLarge *= scaleFactor;
            DisplayMedium *= scaleFactor;
            DisplaySmall *= scaleFactor;
            HeadlineLarge *= scaleFactor;
            HeadlineMedium *= scaleFactor;
            HeadlineSmall *= scaleFactor;
            TitleLarge *= scaleFactor;
            TitleMedium *= scaleFactor;
            TitleSmall *= scaleFactor;
            LabelLarge *= scaleFactor;
            LabelMedium *= scaleFactor;
            LabelSmall *= scaleFactor;
            BodyLarge *= scaleFactor;
            BodyMedium *= scaleFactor;
            BodySmall *= scaleFactor;
        }

        // Add these methods to TypographyScale.cs
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public TypographyScale Clone()
        {
            return new TypographyScale
            {
                DisplayLarge = DisplayLarge,
                DisplayMedium = DisplayMedium,
                DisplaySmall = DisplaySmall,
                HeadlineLarge = HeadlineLarge,
                HeadlineMedium = HeadlineMedium,
                HeadlineSmall = HeadlineSmall,
                TitleLarge = TitleLarge,
                TitleMedium = TitleMedium,
                TitleSmall = TitleSmall,
                LabelLarge = LabelLarge,
                LabelMedium = LabelMedium,
                LabelSmall = LabelSmall,
                BodyLarge = BodyLarge,
                BodyMedium = BodyMedium,
                BodySmall = BodySmall
            };
        }

        /// <summary>
        /// 
        /// </summary>
        public void Reset()
        {
            DisplayLarge = 57;
            DisplayMedium = 45;
            DisplaySmall = 36;
            HeadlineLarge = 32;
            HeadlineMedium = 28;
            HeadlineSmall = 24;
            TitleLarge = 22;
            TitleMedium = 16;
            TitleSmall = 14;
            LabelLarge = 14;
            LabelMedium = 12;
            LabelSmall = 11;
            BodyLarge = 16;
            BodyMedium = 14;
            BodySmall = 12;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool ValidateScale()
        {
            return DisplayLarge > DisplayMedium &&
                   DisplayMedium > DisplaySmall &&
                   HeadlineLarge > HeadlineMedium &&
                   HeadlineMedium > HeadlineSmall &&
                   TitleLarge > TitleMedium &&
                   TitleMedium > TitleSmall &&
                   BodyLarge > BodyMedium &&
                   BodyMedium > BodySmall;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\AppTheme.axaml
================================================================================

<!--  Themes/AppTheme.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/ColorTheme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/CustomThemes.axaml" />

    </ResourceDictionary.MergedDictionaries>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Border.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="DefaultBorderTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12" />
    </ControlTheme>

    <ControlTheme x:Key="CardBorderTheme" TargetType="Border">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="12" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="BoxShadow" Value="0 1 3 0 #15000000" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarBorderTheme" TargetType="Border">
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,1,0,0" />
    </ControlTheme>

    <!--  NEW: Toolbar Container Border Theme  -->
    <ControlTheme x:Key="ToolbarContainerBorderTheme" TargetType="Border">
        <Setter Property="Padding" Value="10,5" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Button.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Design.PreviewWith>
        <StackPanel
            Width="300"
            Background="{DynamicResource BackgroundBrush}"
            Spacing="20">
            <Button Content="Primary Button" Theme="{StaticResource PrimaryButtonTheme}" />
            <Button Content="Secondary Button" Theme="{StaticResource SecondaryButtonTheme}" />
            <Button Content="Browse Button" Theme="{StaticResource BrowseButtonTheme}" />
            <Button Content="Click Me!" />
            <Button Classes="accent" Content="Click Me!" />
            <Button Content="Disabled Button" IsEnabled="False" />
        </StackPanel>
    </Design.PreviewWith>

    <!--  Primary Button Theme  -->
    <ControlTheme x:Key="PrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Secondary Button Theme  -->
    <ControlTheme x:Key="SecondaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinWidth" Value="100" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Browse Button Theme  -->
    <ControlTheme x:Key="BrowseButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="IsHitTestVisible" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="PART_Border"
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 2 0 #10000000"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    IsHitTestVisible="True">
                    <ContentPresenter
                        x:Name="PART_ContentPresenter"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        IsHitTestVisible="True" />
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource BackgroundDarkBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryDark}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="{x:Type Button}" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="RenderTransform" Value="none" />
        <Setter Property="Transitions">
            <Transitions>
                <TransformOperationsTransition Property="RenderTransform" Duration="0:0:.075" />
            </Transitions>
        </Setter>

        <Setter Property="Template">
            <ControlTemplate>
                <ContentPresenter
                    x:Name="PART_ContentPresenter"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    CornerRadius="{TemplateBinding CornerRadius}"
                    RecognizesAccessKey="True" />
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:pressed">
            <Setter Property="RenderTransform" Value="scale(0.98)" />
        </Style>

        <Style Selector="^:pressed  /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

        <Style Selector="^.accent">
            <Style Selector="^ /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Opacity" Value="0.9" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:pressed  /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Opacity" Value="0.8" />
                <Setter Property="BorderBrush" Value="Transparent" />
                <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            </Style>

            <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
                <Setter Property="Opacity" Value="0.6" />
            </Style>
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="ToolbarButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="15,5" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  NEW: Toolbar Primary Button Theme (for Analyze button)  -->
    <ControlTheme x:Key="ToolbarPrimaryButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Padding" Value="20,8" />
        <Setter Property="Margin" Value="0,0,10,0" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Padding="{TemplateBinding Padding}"
                        HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}" />
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  Existing default ControlTheme  -->

</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\CheckBox.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Design.PreviewWith>
        <Border
            Width="300"
            Padding="20"
            Background="{DynamicResource BackgroundBrush}">
            <StackPanel Spacing="10">
                <CheckBox Content="Unchecked" />
                <CheckBox Content="Checked" IsChecked="True" />
                <CheckBox
                    Content="Indeterminate"
                    IsChecked="{x:Null}"
                    IsThreeState="True" />
                <CheckBox Content="Disabled" IsEnabled="False" />
                <CheckBox
                    Content="Disabled Checked"
                    IsChecked="True"
                    IsEnabled="False" />
            </StackPanel>
        </Border>
    </Design.PreviewWith>

    <ControlTheme x:Key="CustomCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="8,2,0,0" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid ColumnDefinitions="Auto,*">
                    <Border
                        Name="PART_Border"
                        Width="16"
                        Height="16"
                        VerticalAlignment="Center"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{DynamicResource CornerRadius}">
                        <Panel>
                            <!--  Checked state checkmark  -->
                            <Path
                                Name="CheckMark"
                                Width="10"
                                Height="10"
                                Margin="0,1,0,0"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Data="M 1,5 L 4,9 L 9,1"
                                IsVisible="False"
                                Stretch="Uniform"
                                Stroke="{DynamicResource TextPrimaryBrush}"
                                StrokeLineCap="Round"
                                StrokeThickness="2" />

                            <!--  Indeterminate state indicator  -->
                            <Rectangle
                                Name="IndeterminateMark"
                                Width="9"
                                Height="9"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                Fill="{DynamicResource TextPrimaryBrush}"
                                IsVisible="False"
                                RadiusX="1"
                                RadiusY="1" />
                        </Panel>
                    </Border>
                    <ContentPresenter
                        Name="PART_ContentPresenter"
                        Grid.Column="1"
                        Margin="{TemplateBinding Padding}"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Content="{TemplateBinding Content}"
                        ContentTemplate="{TemplateBinding ContentTemplate}"
                        Foreground="{TemplateBinding Foreground}"
                        TextWrapping="Wrap" />
                </Grid>
            </ControlTemplate>
        </Setter>

        <!--  Normal state  -->
        <Style Selector="^">
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        </Style>

        <!--  PointerOver state  -->
        <Style Selector="^:pointerover /template/ Border#PART_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>

        <!--  Checked state  -->
        <Style Selector="^:checked /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <Style Selector="^:checked /template/ Path#CheckMark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Indeterminate state  -->
        <Style Selector="^:indeterminate /template/ Border#PART_Border">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.7" />
        </Style>

        <Style Selector="^:indeterminate /template/ Rectangle#IndeterminateMark">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ColorTheme.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=netstandard">

    <!--  Color Brushes  -->
    <!--  Base colors  -->
    <Color x:Key="GunMetalDark">#343B48</Color>
    <Color x:Key="GunMetalMedium">#3D4654</Color>
    <Color x:Key="GunMetalLight">#464F62</Color>

    <Color x:Key="PrimaryColor">#2C313D</Color>
    <Color x:Key="SecondaryColor">#3D4654</Color>
    <Color x:Key="BackgroundLight">#F5F5F5</Color>
    <Color x:Key="BackgroundDark">#222831</Color>

    <Color x:Key="TextPrimaryLight">Pink</Color>
    <Color x:Key="TextPrimaryDark">#FFFFFF</Color>
    <Color x:Key="TextSecondaryLight">#555555</Color>
    <Color x:Key="TextSecondaryDark">#BBCDE5</Color>
    <Color x:Key="BorderLight">#CCCCCC</Color>
    <Color x:Key="BorderDark">#5D6778</Color>


    <!--  Accent Colors  -->
    <Color x:Key="AccentBlue">#2D7DD2</Color>
    <Color x:Key="AccentGreen">#52A447</Color>
    <Color x:Key="AccentRed">#E45649</Color>
    <Color x:Key="AccentOrange">#E5C07B</Color>
    <Color x:Key="AccentPurple">#C678DD</Color>
    <Color x:Key="AccentCyan">#56B6C2</Color>


    <!--  Status colors  -->
    <Color x:Key="ErrorColor">#E74C3C</Color>
    <Color x:Key="WarningColor">#F39C12</Color>
    <Color x:Key="SuccessColor">#2ECC71</Color>

    <!--  Brushes - Dynamic based on theme  -->
    <SolidColorBrush x:Key="GunMetalDarkBrush" Color="{DynamicResource GunMetalDark}" />
    <SolidColorBrush x:Key="GunMetalMediumBrush" Color="{DynamicResource GunMetalMedium}" />
    <SolidColorBrush x:Key="GunMetalLightBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="GunMetalAccentBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="AccentBlueBrush" Color="{DynamicResource AccentBlue}" />
    <SolidColorBrush x:Key="PrimaryColorBrush" Color="{DynamicResource PrimaryColor}" />
    <SolidColorBrush x:Key="SecondaryColorBrush" Color="{DynamicResource SecondaryColor}" />

    <!--  Dynamic Background Brushes  -->
    <SolidColorBrush x:Key="BackgroundBrush" Color="{DynamicResource BackgroundDark}" />
    <SolidColorBrush x:Key="BackgroundLightBrush" Color="{DynamicResource GunMetalLight}" />
    <SolidColorBrush x:Key="BackgroundDarkBrush" Color="{DynamicResource BackgroundDark}" />

    <!--  Dynamic Text Brushes  -->
    <SolidColorBrush x:Key="TextPrimaryBrush" Color="{DynamicResource TextPrimaryDark}" />
    <SolidColorBrush x:Key="TextSecondaryBrush" Color="{DynamicResource TextSecondaryDark}" />

    <!--  Border Brush  -->
    <SolidColorBrush x:Key="BorderBrush" Color="{DynamicResource BorderDark}" />

    <!--  Status Brushes  -->
    <SolidColorBrush x:Key="ErrorBrush" Color="{DynamicResource ErrorColor}" />
    <SolidColorBrush x:Key="WarningBrush" Color="{DynamicResource WarningColor}" />
    <SolidColorBrush x:Key="SuccessBrush" Color="{DynamicResource SuccessColor}" />

    <!--  Font Settings  -->
    <FontFamily x:Key="DefaultFontFamily">Segoe UI, San Francisco, Helvetica, Arial, sans-serif</FontFamily>
    <sys:Double x:Key="FontSizeSmall">12</sys:Double>
    <sys:Double x:Key="FontSizeNormal">14</sys:Double>
    <sys:Double x:Key="FontSizeMedium">16</sys:Double>
    <sys:Double x:Key="FontSizeLarge">24</sys:Double>
    <FontWeight x:Key="DefaultFontWeight">Normal</FontWeight>
    <FontWeight x:Key="HeadingFontWeight">SemiBold</FontWeight>

    <!--  Border Settings  -->
    <Thickness x:Key="BorderThickness">1</Thickness>
    <CornerRadius x:Key="CornerRadius">4</CornerRadius>

    <!--  Margin and Padding Presets  -->
    <Thickness x:Key="StandardMargin">16</Thickness>
    <Thickness x:Key="StandardPadding">16</Thickness>
    <Thickness x:Key="SmallMargin">8</Thickness>
    <Thickness x:Key="SmallPadding">8</Thickness>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ComboBox.Theme.axaml
================================================================================

<ResourceDictionary
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

  <!--  ComboBox Theming Constants  -->
  <x:Double x:Key="ComboBoxPopupMaxHeight">400</x:Double>
  <Thickness x:Key="ComboBoxDropdownContentMargin">4</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderThickness">1</Thickness>
  <Thickness x:Key="ComboBoxDropdownBorderPadding">4</Thickness>
  <Thickness x:Key="ComboBoxTopHeaderMargin">0,0,0,4</Thickness>
  <x:Int32 x:Key="ComboBoxPopupMaxNumberOfItems">15</x:Int32>
  <x:Int32 x:Key="ComboBoxPopupMaxNumberOfItemsThatCanBeShownOnOneSide">7</x:Int32>
  <Thickness x:Key="ComboBoxPadding">12,5,0,7</Thickness>
  <Thickness x:Key="ComboBoxEditableTextPadding">11,5,32,6</Thickness>
  <x:Double x:Key="ComboBoxMinHeight">32</x:Double>

  <ControlTheme x:Key="{x:Type ComboBox}" TargetType="ComboBox">
    <Setter Property="Padding" Value="{DynamicResource ComboBoxPadding}" />
    <Setter Property="FocusAdorner" Value="{x:Null}" />
    <Setter Property="MaxDropDownHeight" Value="504" />
    <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
    <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
    <Setter Property="MinHeight" Value="{DynamicResource ComboBoxMinHeight}" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Top" />
    <Setter Property="PlaceholderForeground" Value="{DynamicResource TextSecondaryBrush}" />
    <Setter Property="Template">
      <ControlTemplate>
        <DataValidationErrors>
          <Grid ColumnDefinitions="*,32">
            <Border
                x:Name="Background"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                MinWidth="120"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}" />
            <Border
                x:Name="HighlightBackground"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Background="{DynamicResource BackgroundLightBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                CornerRadius="{TemplateBinding CornerRadius}"
                IsVisible="False" />
            <TextBlock
                x:Name="PlaceholderTextBlock"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Foreground="{TemplateBinding PlaceholderForeground}"
                IsVisible="{TemplateBinding SelectionBoxItem,
                                                        Converter={x:Static ObjectConverters.IsNull}}"
                Text="{TemplateBinding PlaceholderText}" />
            <ContentControl
                x:Name="ContentPresenter"
                Grid.Column="0"
                Margin="{TemplateBinding Padding}"
                HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" />

            <Border
                x:Name="DropDownOverlay"
                Grid.Column="1"
                Width="30"
                Margin="0,1,1,1"
                HorizontalAlignment="Right"
                Background="Transparent"
                IsVisible="False" />

            <PathIcon
                x:Name="DropDownGlyph"
                Grid.Column="1"
                Width="12"
                Height="12"
                Margin="0,0,10,0"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Data="M1939 486L2029 576L1024 1581L19 576L109 486L1024 1401L1939 486Z"
                Foreground="{DynamicResource TextPrimaryBrush}"
                IsHitTestVisible="False"
                UseLayoutRounding="False" />

            <Popup
                Name="PART_Popup"
                MinWidth="{Binding Bounds.Width, RelativeSource={RelativeSource TemplatedParent}}"
                MaxHeight="{TemplateBinding MaxDropDownHeight}"
                InheritsTransform="True"
                IsLightDismissEnabled="True"
                IsOpen="{TemplateBinding IsDropDownOpen,
                                                     Mode=TwoWay}"
                PlacementTarget="Background"
                WindowManagerAddShadowHint="False">
              <Border
                  x:Name="PopupBorder"
                  Padding="{DynamicResource ComboBoxDropdownBorderPadding}"
                  HorizontalAlignment="Stretch"
                  Background="{DynamicResource BackgroundBrush}"
                  BorderBrush="{DynamicResource BorderBrush}"
                  BorderThickness="{DynamicResource ComboBoxDropdownBorderThickness}"
                  CornerRadius="{DynamicResource CornerRadius}">
                <ScrollViewer
                    HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                    IsDeferredScrollingEnabled="{TemplateBinding (ScrollViewer.IsDeferredScrollingEnabled)}"
                    VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
                  <ItemsPresenter
                      Name="PART_ItemsPresenter"
                      Margin="{DynamicResource ComboBoxDropdownContentMargin}"
                      ItemsPanel="{TemplateBinding ItemsPanel}" />
                </ScrollViewer>
              </Border>
            </Popup>
          </Grid>
        </DataValidationErrors>
      </ControlTemplate>
    </Setter>

    <!--  PointerOver State  -->
    <Style Selector="^:pointerover /template/ Border#Background">
      <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
      <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
    </Style>

    <!--  Pressed State  -->
    <Style Selector="^:pressed /template/ Border#Background">
      <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
      <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
    </Style>

    <!--  Error State  -->
    <Style Selector="^:error /template/ Border#Background">
      <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
    </Style>

    <!--  Focus Pressed State  -->
    <Style Selector="^:focused:pressed">
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
    </Style>

    <!--  Focused State  -->
    <Style Selector="^:focus-visible">
      <Style Selector="^ /template/ Border#HighlightBackground">
        <Setter Property="IsVisible" Value="True" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
      </Style>
    </Style>

    <!--  Disabled State  -->
    <Style Selector="^:disabled">
      <Style Selector="^ /template/ Border#Background">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Opacity" Value="0.6" />
      </Style>
      <Style Selector="^ /template/ ContentControl#ContentPresenter">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ TextBlock#PlaceholderTextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
      <Style Selector="^ /template/ PathIcon#DropDownGlyph">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      </Style>
    </Style>
  </ControlTheme>

  <ControlTheme x:Key="{x:Type ComboBoxItem}" TargetType="ComboBoxItem">
    <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    <Setter Property="Background" Value="Transparent" />
    <Setter Property="Padding" Value="8,4" />
    <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    <Setter Property="Template">
      <ControlTemplate>
        <ContentPresenter
            Name="PART_ContentPresenter"
            Padding="{TemplateBinding Padding}"
            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            Content="{TemplateBinding Content}"
            ContentTemplate="{TemplateBinding ContentTemplate}"
            CornerRadius="{TemplateBinding CornerRadius}"
            Foreground="{TemplateBinding Foreground}" />
      </ControlTemplate>
    </Setter>

    <!--  PointerOver state  -->
    <Style Selector="^:pointerover /template/ ContentPresenter">
      <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </Style>

    <!--  Disabled state  -->
    <Style Selector="^:disabled /template/ ContentPresenter">
      <Setter Property="Background" Value="Transparent" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
      <Setter Property="Opacity" Value="0.6" />
    </Style>

    <!--  Pressed state  -->
    <Style Selector="^:pressed /template/ ContentPresenter">
      <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
      <Setter Property="BorderBrush" Value="Transparent" />
      <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </Style>

    <!--  Selected state  -->
    <Style Selector="^:selected">
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
      </Style>
      <!--  Selected Disabled state  -->
      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.6" />
      </Style>
      <!--  Selected PointerOver state  -->
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.9" />
      </Style>
      <!--  Selected Pressed state  -->
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Opacity" Value="0.8" />
      </Style>
    </Style>
  </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\CustomThemes.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ResourceDictionary.MergedDictionaries>
        <!--  Colors and Brushes  -->
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/ColorTheme.axaml" />
        <!--  Controls  -->
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/Button.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/CheckBox.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/ComboBox.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/Expander.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/TabControl.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/TextBox.Theme.axaml" />

        <!--  New Themes  -->
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/Window.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/Separator.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/PathIcon.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/Border.Theme.axaml" />
        <ResourceInclude Source="avares://AvaloniaThemeManager/Themes/TextBlock.Theme.axaml" />


    </ResourceDictionary.MergedDictionaries>

    <!--  Default Control Mappings  -->
    <ControlTheme
        x:Key="{x:Type Window}"
        BasedOn="{StaticResource DefaultWindowTheme}"
        TargetType="Window" />
    <ControlTheme
        x:Key="{x:Type Button}"
        BasedOn="{StaticResource PrimaryButtonTheme}"
        TargetType="Button" />
    <ControlTheme
        x:Key="{x:Type CheckBox}"
        BasedOn="{StaticResource CustomCheckBoxTheme}"
        TargetType="CheckBox" />
    <ControlTheme
        x:Key="{x:Type TextBox}"
        BasedOn="{StaticResource DialogTextBoxTheme}"
        TargetType="TextBox" />

    <ControlTheme
        x:Key="{x:Type Separator}"
        BasedOn="{StaticResource HorizontalSeparatorTheme}"
        TargetType="Separator" />
    <Design.PreviewWith>
        <StackPanel Margin="25" Spacing="20">
            <Button Content="Default Button" />
            <CheckBox>Default Option</CheckBox>
            <ComboBox>
                <ComboBoxItem>Item 1</ComboBoxItem>
                <ComboBoxItem>Item 2</ComboBoxItem>
                <ComboBoxItem>Item 3</ComboBoxItem>
            </ComboBox>
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\DataGridCell.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type DataGridCell}" TargetType="DataGridCell">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="CellBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">
                    <Grid x:Name="PART_CellRoot" ColumnDefinitions="*,Auto">

                        <!--  Current/Selected Visual  -->
                        <Rectangle
                            x:Name="CurrencyVisual"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            Fill="Transparent"
                            IsHitTestVisible="False"
                            IsVisible="False"
                            Stroke="{DynamicResource AccentBlueBrush}"
                            StrokeThickness="2" />

                        <!--  Focus Visual  -->
                        <Grid
                            x:Name="FocusVisual"
                            Grid.Column="0"
                            IsHitTestVisible="False"
                            IsVisible="False">
                            <Rectangle
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                IsHitTestVisible="False"
                                Stroke="{DynamicResource AccentBlueBrush}"
                                StrokeThickness="2" />
                            <Rectangle
                                Margin="2"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch"
                                Fill="Transparent"
                                IsHitTestVisible="False"
                                Stroke="{DynamicResource BackgroundBrush}"
                                StrokeThickness="1" />
                        </Grid>

                        <!--  Content  -->
                        <ContentPresenter
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />

                        <!--  Invalid Visual  -->
                        <Rectangle
                            x:Name="InvalidVisualElement"
                            Grid.Column="0"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            IsHitTestVisible="False"
                            IsVisible="False"
                            Stroke="{DynamicResource ErrorBrush}"
                            StrokeThickness="2" />

                        <!--  Right Grid Line  -->
                        <Rectangle
                            Name="PART_RightGridLine"
                            Grid.Column="1"
                            Width="1"
                            VerticalAlignment="Stretch"
                            Fill="{DynamicResource BorderBrush}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Hover State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

        <!--  Selected State  -->
        <Style Selector="^:selected">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>

        <!--  Current Cell Visual  -->
        <Style Selector="^:current /template/ Rectangle#CurrencyVisual">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Focus Visual  -->
        <Style Selector="^:focus /template/ Grid#FocusVisual">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Invalid State  -->
        <Style Selector="^:invalid /template/ Rectangle#InvalidVisualElement">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Selected + Hover State  -->
        <Style Selector="^:selected:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
</ResourceDictionary>

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\DataGridColumnHeader.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="{x:Type DataGridColumnHeader}" TargetType="DataGridColumnHeader">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid>
                    <Border
                        Name="BackgroundBorder"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}">
                        
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <!-- Content -->
                            <ContentPresenter
                                Name="HeaderContent"
                                Grid.Column="0"
                                Margin="{TemplateBinding Padding}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Content="{TemplateBinding Content}"
                                ContentTemplate="{TemplateBinding ContentTemplate}"
                                Foreground="{TemplateBinding Foreground}" />

                            <!-- Sort Indicator -->
                            <Grid
                                Name="SortIndicator"
                                Grid.Column="1"
                                Width="16"
                                Height="16"
                                Margin="4,0,8,0"
                                VerticalAlignment="Center"
                                IsVisible="False">
                                
                                <!-- Ascending Arrow -->
                                <Path
                                    Name="SortAscending"
                                    Width="8"
                                    Height="8"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 4 L 4 0 L 8 4 Z"
                                    Fill="{DynamicResource AccentBlueBrush}"
                                    IsVisible="False"
                                    Stretch="Uniform" />

                                <!-- Descending Arrow -->
                                <Path
                                    Name="SortDescending"
                                    Width="8"
                                    Height="8"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Data="M 0 0 L 4 4 L 8 0 Z"
                                    Fill="{DynamicResource AccentBlueBrush}"
                                    IsVisible="False"
                                    Stretch="Uniform" />
                            </Grid>
                        </Grid>
                    </Border>

                    <!-- Resize Grip -->
                    <Thumb
                        Name="PART_RightHeaderGripper"
                        Width="8"
                        HorizontalAlignment="Right"
                        Background="Transparent"
                        BorderBrush="Transparent"
                        Cursor="SizeWE" />
                </Grid>
            </ControlTemplate>
        </Setter>

        <!-- Hover State -->
        <Style Selector="^:pointerover /template/ Border#BackgroundBorder">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!-- Pressed State -->
        <Style Selector="^:pressed /template/ Border#BackgroundBorder">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!-- Sort States --><!--
        <Style Selector="^[SortDirection=Ascending] /template/ Grid#SortIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^[SortDirection=Ascending] /template/ Path#SortAscending">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <Style Selector="^[SortDirection=Descending] /template/ Grid#SortIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>
        <Style Selector="^[SortDirection=Descending] /template/ Path#SortDescending">
            <Setter Property="IsVisible" Value="True" />
        </Style>-->

        <!-- Disabled State -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#HeaderContent">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\DataGridRow.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--<ControlTheme x:Key="{x:Type DataGridRow}" TargetType="DataGridRow">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="DGR_Border"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}">

                    <SelectiveScrollingGrid>
                        <SelectiveScrollingGrid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </SelectiveScrollingGrid.ColumnDefinitions>
                        <SelectiveScrollingGrid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </SelectiveScrollingGrid.RowDefinitions>

    -->
    <!--  Row Header  -->
    <!--
                        <DataGridRowHeader
                            Name="PART_RowHeader"
                            Grid.RowSpan="2"
                            Grid.Column="0"
                            IsVisible="{Binding HeadersVisibility}" />

    -->
    <!--  Cell Presenter  -->
    <!--
                        <DataGridCellsPresenter
                            Name="PART_CellsPresenter"
                            Grid.Row="0"
                            Grid.Column="1"
                            ItemsPanel="{TemplateBinding ItemsPanel}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

    -->
    <!--  Row Details  -->
    <!--
                        <DataGridDetailsPresenter
                            Name="PART_DetailsPresenter"
                            Grid.Row="1"
                            Grid.Column="1"
                            SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGridConverters.DataGridSelectiveScrollingOrientationConverter}, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                            Visibility="{TemplateBinding DetailsVisibility}" />
                    </SelectiveScrollingGrid>
                </Border>
            </ControlTemplate>
        </Setter>

    -->
    <!--  Normal State  -->
    <!--
        <Style Selector="^">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        </Style>

    -->
    <!--  Alternating Row  -->
    <!--
        <Style Selector="^:nth-child(2n)">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

    -->
    <!--  Hover State  -->
    <!--
        <Style Selector="^:pointerover /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
        </Style>

    -->
    <!--  Selected State  -->
    <!--
        <Style Selector="^:selected /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="0,1,0,1" />
        </Style>

    -->
    <!--  Selected + Hover State  -->
    <!--
        <Style Selector="^:selected:pointerover /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

    -->
    <!--  Focus State  -->
    <!--
        <Style Selector="^:focus /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="2" />
        </Style>

    -->
    <!--  Invalid State  -->
    <!--
        <Style Selector="^:invalid /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
            <Setter Property="BorderThickness" Value="1" />
        </Style>

    -->
    <!--  Disabled State  -->
    <!--
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>

    -->
    <!--  Editing State  -->
    <!--
        <Style Selector="^:editing /template/ Border#DGR_Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="BorderThickness" Value="2" />
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>

    -->
    <!--  New Item Placeholder  -->
    <!--
        <Style Selector="^:new-item-placeholder /template/ Border#DGR_Border">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="BorderThickness" Value="0,1,0,0" />
            <Setter Property="Opacity" Value="0.8" />
        </Style>
    </ControlTheme>-->

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Expander.axaml
================================================================================

<!--  Updated Expander Theme using ResumeForge Dynamic Color Resources  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ResumeForgeExpanderToggleButtonTheme" TargetType="ToggleButton">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Padding" Value="{DynamicResource StandardPadding}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    x:Name="ToggleButtonBackground"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid x:Name="ToggleButtonGrid" ColumnDefinitions="*,Auto">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />
                        <Border
                            x:Name="ExpandCollapseChevronBorder"
                            Grid.Column="1"
                            Width="20"
                            Height="20"
                            Margin="8,0"
                            Background="Transparent"
                            CornerRadius="2">
                            <Path
                                x:Name="ExpandCollapseChevron"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                RenderTransformOrigin="50%,50%"
                                Stretch="None"
                                Stroke="{DynamicResource TextPrimaryBrush}"
                                StrokeThickness="1.5">
                                <Path.RenderTransform>
                                    <RotateTransform />
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Rotation animations for expand/collapse  -->
        <Style Selector="^[Tag=expanded] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.15">
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <Style Selector="^[Tag=collapsed] /template/ Path#ExpandCollapseChevron">
            <Style.Animations>
                <Animation FillMode="Both" Duration="0:0:0.15">
                    <KeyFrame Cue="0%">
                        <Setter Property="RotateTransform.Angle" Value="180" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="RotateTransform.Angle" Value="0" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="Background" Duration="0:0:0.2" />
                    <BrushTransition Property="BorderBrush" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>
        <Style Selector="^:pointerover /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Transitions">
                <Transitions>
                    <BrushTransition Property="Stroke" Duration="0:0:0.2" />
                </Transitions>
            </Setter>
        </Style>

        <!--  Pressed State  -->
        <Style Selector="^:pressed /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:pressed /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource AccentBlueBrush}" />
        </Style>

        <!--  Disabled State  -->
        <Style Selector="^:disabled /template/ Border#ToggleButtonBackground">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:disabled /template/ ContentPresenter#PART_ContentPresenter">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
        <Style Selector="^:disabled /template/ Path#ExpandCollapseChevron">
            <Setter Property="Stroke" Value="{DynamicResource TextSecondaryBrush}" />
        </Style>
    </ControlTheme>

    <!--  Direction-specific themes  -->
    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonUpTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 7 L 7 0 L 14 7" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonDownTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 14 0" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonLeftTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 7 0 L 0 7 L 7 14" />
        </Style>
    </ControlTheme>

    <ControlTheme
        x:Key="ResumeForgeExpanderToggleButtonRightTheme"
        BasedOn="{StaticResource ResumeForgeExpanderToggleButtonTheme}"
        TargetType="ToggleButton">
        <Style Selector="^ /template/ Path#ExpandCollapseChevron">
            <Setter Property="Data" Value="M 0 0 L 7 7 L 0 14" />
        </Style>
    </ControlTheme>

    <!--  Main Expander Theme  -->
    <ControlTheme x:Key="ResumeForgeExpanderTheme" TargetType="Expander">
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="32" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="Padding" Value="{DynamicResource StandardPadding}" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Top" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="ContentTransition">
            <Setter.Value>
                <CrossFade Duration="00:00:00.25" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <ControlTemplate>
                <DockPanel MinWidth="{TemplateBinding MinWidth}" MaxWidth="{TemplateBinding MaxWidth}">
                    <ToggleButton
                        x:Name="ExpanderHeader"
                        MinHeight="{TemplateBinding MinHeight}"
                        Content="{TemplateBinding Header}"
                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsChecked="{TemplateBinding IsExpanded,
                                                    Mode=TwoWay}"
                        IsEnabled="{TemplateBinding IsEnabled}" />
                    <Border
                        x:Name="ExpanderContent"
                        MinHeight="{TemplateBinding MinHeight}"
                        Padding="{TemplateBinding Padding}"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}"
                        IsVisible="{TemplateBinding IsExpanded,
                                                    Mode=TwoWay}">
                        <ContentPresenter
                            x:Name="PART_ContentPresenter"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            Foreground="{TemplateBinding Foreground}" />
                    </Border>
                </DockPanel>
            </ControlTemplate>
        </Setter>

        <!--  Prevent render transform on pressed state  -->
        <Style Selector="^ /template/ ToggleButton#ExpanderHeader:pressed">
            <Setter Property="RenderTransform" Value="{x:Null}" />
        </Style>

        <!--  Left/Right direction alignment  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader, ^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="VerticalAlignment" Value="Stretch" />
        </Style>

        <!--  Tag setting for animation states  -->
        <Style Selector="^:expanded /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Tag" Value="expanded" />
        </Style>

        <Style Selector="^:not(:expanded) /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="{Binding $parent[Expander].CornerRadius}" />
            <Setter Property="Tag" Value="collapsed" />
        </Style>

        <!--  Corner radius adjustments for expanded states  -->
        <Style Selector="^:expanded:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="0,0,4,4" />
        </Style>
        <Style Selector="^:expanded:up /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="4,4,0,0" />
        </Style>
        <Style Selector="^:expanded:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="4,4,0,0" />
        </Style>
        <Style Selector="^:expanded:down /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="0,0,4,4" />
        </Style>
        <Style Selector="^:expanded:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="0,4,4,0" />
        </Style>
        <Style Selector="^:expanded:left /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="4,0,0,4" />
        </Style>
        <Style Selector="^:expanded:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="CornerRadius" Value="4,0,0,4" />
        </Style>
        <Style Selector="^:expanded:right /template/ Border#ExpanderContent">
            <Setter Property="CornerRadius" Value="0,4,4,0" />
        </Style>

        <!--  DockPanel positioning for different directions  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Right" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Bottom" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Left" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="DockPanel.Dock" Value="Top" />
        </Style>

        <!--  Theme assignment for different directions  -->
        <Style Selector="^:left /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonLeftTheme}" />
        </Style>
        <Style Selector="^:up /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonUpTheme}" />
        </Style>
        <Style Selector="^:right /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonRightTheme}" />
        </Style>
        <Style Selector="^:down /template/ ToggleButton#ExpanderHeader">
            <Setter Property="Theme" Value="{StaticResource ResumeForgeExpanderToggleButtonDownTheme}" />
        </Style>

        <!--  Border thickness adjustments for different directions  -->
        <Style Selector="^:left /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="1,0,0,0" />
        </Style>
        <Style Selector="^:up /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,1,0,0" />
        </Style>
        <Style Selector="^:right /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,0,1,0" />
        </Style>
        <Style Selector="^:down /template/ Border#ExpanderContent">
            <Setter Property="BorderThickness" Value="0,0,0,1" />
        </Style>
    </ControlTheme>

    <Design.PreviewWith>
        <Border Padding="20">
            <StackPanel
                Width="350"
                Orientation="Vertical"
                Spacing="20">
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Up"
                    Theme="{StaticResource SimpleExpanderToggleButtonTheme}">
                    <Expander.Header>
                        <Grid ColumnDefinitions="*, Auto">
                            <TextBlock Grid.Column="0" Text="Expand" />
                            <TextBlock Grid.Column="1" Text="Up" />
                        </Grid>
                    </Expander.Header>
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Down"
                    Header="Expand Down">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Left"
                    Header="Expand Left">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
                <Expander
                    CornerRadius="25"
                    ExpandDirection="Right"
                    Header="Expand Right">
                    <StackPanel>
                        <TextBlock Text="Expanded content" />
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>
    </Design.PreviewWith>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\OtherControlThemes.axaml
================================================================================

<!--  Themes/MissingControlThemes.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  TreeView Theme  -->
    <ControlTheme x:Key="{x:Type TreeView}" TargetType="TreeView">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Name="PART_ScrollViewer"
                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                        <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  TreeViewItem Theme  -->
    <ControlTheme x:Key="{x:Type TreeViewItem}" TargetType="TreeViewItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="Template">
            <ControlTemplate>
                <StackPanel>
                    <Border
                        Name="PART_Header"
                        MinHeight="24"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid ColumnDefinitions="Auto,Auto,*">
                            <Border Name="PART_Indent" Grid.Column="0" />
                            <ToggleButton
                                Name="PART_ExpandCollapseChevron"
                                Grid.Column="1"
                                Width="16"
                                Height="16"
                                Margin="2,0"
                                Background="Transparent"
                                BorderThickness="0"
                                Focusable="False"
                                IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                <Path
                                    Width="10"
                                    Height="10"
                                    Data="M 0 0 L 4 4 L 0 8 Z"
                                    Fill="{DynamicResource TextPrimaryBrush}"
                                    RenderTransformOrigin="50%,50%"
                                    Stretch="Uniform">
                                    <Path.RenderTransform>
                                        <RotateTransform Angle="90" />
                                    </Path.RenderTransform>
                                </Path>
                            </ToggleButton>
                            <ContentPresenter
                                Name="PART_HeaderPresenter"
                                Grid.Column="2"
                                Margin="{TemplateBinding Padding}"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}" />
                        </Grid>
                    </Border>
                    <ItemsPresenter
                        Name="PART_ItemsPresenter"
                        IsVisible="{TemplateBinding IsExpanded}"
                        ItemsPanel="{TemplateBinding ItemsPanel}" />
                </StackPanel>
            </ControlTemplate>
        </Setter>

        <!--  TreeViewItem States  -->
        <Style Selector="^:expanded /template/ RotateTransform#ExpandCollapseChevronRotateTransform">
            <Setter Property="Angle" Value="90" />
        </Style>
        <Style Selector="^:selected /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:pointerover /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:selected:pointerover /template/ Border#PART_Header">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  ListBox Theme  -->
    <ControlTheme x:Key="{x:Type ListBox}" TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ScrollViewer
                        Name="PART_ScrollViewer"
                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                        <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                    </ScrollViewer>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  ListBoxItem Theme  -->
    <ControlTheme x:Key="{x:Type ListBoxItem}" TargetType="ListBoxItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <ContentPresenter
                    Name="PART_ContentPresenter"
                    Padding="{TemplateBinding Padding}"
                    HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Content="{TemplateBinding Content}"
                    ContentTemplate="{TemplateBinding ContentTemplate}"
                    CornerRadius="2" />
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:selected /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        </Style>
        <Style Selector="^:selected:pointerover /template/ ContentPresenter">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
            <Setter Property="Opacity" Value="0.9" />
        </Style>
    </ControlTheme>

    <!--  Menu Theme  -->
    <ControlTheme x:Key="{x:Type Menu}" TargetType="Menu">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  MenuItem Theme  -->
    <ControlTheme x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="8,4" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Border
                        Name="PART_LayoutRoot"
                        Padding="{TemplateBinding Padding}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter
                                Name="PART_IconPresenter"
                                Grid.Column="0"
                                Width="16"
                                Height="16"
                                Margin="0,0,8,0"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Icon}" />

                            <ContentPresenter
                                Name="PART_HeaderPresenter"
                                Grid.Column="1"
                                VerticalAlignment="Center"
                                Content="{TemplateBinding Header}"
                                ContentTemplate="{TemplateBinding HeaderTemplate}" />

                            <TextBlock
                                Name="PART_InputGestureText"
                                Grid.Column="2"
                                Margin="8,0,0,0"
                                VerticalAlignment="Center"
                                FontSize="11"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="{TemplateBinding InputGesture}" />

                            <Path
                                Name="PART_ChevronPath"
                                Grid.Column="3"
                                Width="8"
                                Height="8"
                                Margin="8,0,0,0"
                                VerticalAlignment="Center"
                                Data="M 0 0 L 4 4 L 0 8 Z"
                                Fill="{DynamicResource TextSecondaryBrush}"
                                IsVisible="False" />
                        </Grid>
                    </Border>

                    <Popup
                        Name="PART_Popup"
                        HorizontalOffset="-1"
                        IsLightDismissEnabled="False"
                        IsOpen="{TemplateBinding IsSubMenuOpen,
                                                 Mode=TwoWay}"
                        OverlayInputPassThroughElement="{Binding $parent[Menu]}"
                        Placement="RightEdgeAlignedTop"
                        VerticalOffset="-1">
                        <Border
                            MinWidth="120"
                            Padding="4"
                            Background="{DynamicResource BackgroundBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="1"
                            CornerRadius="4">
                            <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                            </ScrollViewer>
                        </Border>
                    </Popup>
                </Panel>
            </ControlTemplate>
        </Setter>

        <!--  MenuItem States  -->
        <Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        </Style>
        <Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
        <Style Selector="^:separator">
            <Setter Property="Template">
                <ControlTemplate>
                    <Separator Margin="8,2" />
                </ControlTemplate>
            </Setter>
        </Style>
        <Style Selector="^:selected /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:submenuopen /template/ Path#PART_ChevronPath">
            <Setter Property="IsVisible" Value="True" />
        </Style>
    </ControlTheme>

    <!--  ProgressBar Theme  -->
    <ControlTheme x:Key="{x:Type ProgressBar}" TargetType="ProgressBar">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Name="PART_Track"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid ClipToBounds="True">
                        <Border
                            Name="PART_Indicator"
                            HorizontalAlignment="Left"
                            Background="{TemplateBinding Foreground}"
                            CornerRadius="{TemplateBinding CornerRadius}" />
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <!--  Indeterminate state animation  -->
        <Style Selector="^:indeterminate /template/ Border#PART_Indicator">
            <Style.Animations>
                <Animation IterationCount="Infinite" Duration="0:0:2">
                    <KeyFrame Cue="0%">
                        <Setter Property="TranslateTransform.X" Value="{Binding $parent[ProgressBar].TemplateSettings.ContainerAnimationStartPosition}" />
                    </KeyFrame>
                    <KeyFrame Cue="100%">
                        <Setter Property="TranslateTransform.X" Value="{Binding $parent[ProgressBar].TemplateSettings.ContainerAnimationEndPosition}" />
                    </KeyFrame>
                </Animation>
            </Style.Animations>
        </Style>
    </ControlTheme>

    <!--  Slider Theme  -->
    <ControlTheme x:Key="{x:Type Slider}" TargetType="Slider">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Grid>
                    <Grid.Styles>
                        <Style Selector="Track">
                            <Setter Property="Minimum" Value="{TemplateBinding Minimum}" />
                            <Setter Property="Maximum" Value="{TemplateBinding Maximum}" />
                            <Setter Property="Value" Value="{TemplateBinding Value, Mode=TwoWay}" />
                        </Style>
                    </Grid.Styles>

                    <!--  Horizontal Slider  -->
                    <Border
                        Name="HorizontalTemplate"
                        MinHeight="20"
                        Background="Transparent">
                        <Grid RowDefinitions="*,Auto,*">
                            <Track
                                Name="PART_Track"
                                Grid.Row="1"
                                Orientation="Horizontal">
                                <Track.DecreaseButton>
                                    <RepeatButton
                                        Name="PART_DecreaseButton"
                                        Height="4"
                                        Background="{TemplateBinding Foreground}"
                                        BorderThickness="0"
                                        CornerRadius="2" />
                                </Track.DecreaseButton>
                                <Track.IncreaseButton>
                                    <RepeatButton
                                        Name="PART_IncreaseButton"
                                        Height="4"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2" />
                                </Track.IncreaseButton>
                                <Track.Thumb>
                                    <Thumb
                                        Width="20"
                                        Height="20"
                                        Background="{TemplateBinding Foreground}"
                                        BorderBrush="{DynamicResource TextPrimaryBrush}"
                                        BorderThickness="2"
                                        CornerRadius="10" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>

                    <!--  Vertical Slider  -->
                    <Border
                        Name="VerticalTemplate"
                        MinWidth="20"
                        Background="Transparent">
                        <Grid ColumnDefinitions="*,Auto,*">
                            <Track
                                Name="PART_Track"
                                Grid.Column="1"
                                Orientation="Vertical">
                                <Track.DecreaseButton>
                                    <RepeatButton
                                        Name="PART_DecreaseButton"
                                        Width="4"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="1"
                                        CornerRadius="2" />
                                </Track.DecreaseButton>
                                <Track.IncreaseButton>
                                    <RepeatButton
                                        Name="PART_IncreaseButton"
                                        Width="4"
                                        Background="{TemplateBinding Foreground}"
                                        BorderThickness="0"
                                        CornerRadius="2" />
                                </Track.IncreaseButton>
                                <Track.Thumb>
                                    <Thumb
                                        Width="20"
                                        Height="20"
                                        Background="{TemplateBinding Foreground}"
                                        BorderBrush="{DynamicResource TextPrimaryBrush}"
                                        BorderThickness="2"
                                        CornerRadius="10" />
                                </Track.Thumb>
                            </Track>
                        </Grid>
                    </Border>
                </Grid>
            </ControlTemplate>
        </Setter>

        <!--  Orientation-specific visibility  -->
        <Style Selector="^:horizontal /template/ Border#VerticalTemplate">
            <Setter Property="IsVisible" Value="False" />
        </Style>
        <Style Selector="^:vertical /template/ Border#HorizontalTemplate">
            <Setter Property="IsVisible" Value="False" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

    <!--  DatePicker Theme  -->
    <ControlTheme x:Key="{x:Type DatePicker}" TargetType="DatePicker">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Grid ColumnDefinitions="*,Auto">
                        <Border
                            Grid.Column="0"
                            Grid.ColumnSpan="2"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Button
                            Name="PART_TextButton"
                            Grid.Column="0"
                            Padding="8,4"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}" />

                        <Button
                            Name="PART_CalendarButton"
                            Grid.Column="1"
                            Width="30"
                            Background="Transparent"
                            BorderThickness="0"
                            Foreground="{TemplateBinding Foreground}">
                            <Path
                                Width="16"
                                Height="16"
                                Data="M19,3H18V1H16V3H8V1H6V3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M19,19H5V8H19M7,10V12H9V10M11,10V12H13V10M15,10V12H17V10"
                                Fill="{DynamicResource AccentBlueBrush}"
                                Stretch="Uniform" />
                        </Button>

                        <Popup
                            Name="PART_Popup"
                            Grid.Column="0"
                            InheritsTransform="True"
                            IsLightDismissEnabled="True"
                            PlacementTarget="{TemplateBinding}">
                            <Border
                                Padding="8"
                                Background="{DynamicResource BackgroundBrush}"
                                BorderBrush="{DynamicResource BorderBrush}"
                                BorderThickness="1"
                                CornerRadius="4">
                                <Calendar Name="PART_Calendar" />
                            </Border>
                        </Popup>
                    </Grid>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  States  -->
        <Style Selector="^:pointerover /template/ Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:focus /template/ Border">
            <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\PathIcon.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <ControlTheme x:Key="DefaultPathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="20" />
        <Setter Property="Height" Value="20" />
    </ControlTheme>

    <ControlTheme x:Key="SmallPathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
    </ControlTheme>

    <ControlTheme x:Key="LargePathIconTheme" TargetType="PathIcon">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Width" Value="24" />
        <Setter Property="Height" Value="24" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarWarningIconTheme" TargetType="Path">
        <Setter Property="Width" Value="12" />
        <Setter Property="Height" Value="12" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Fill" Value="{DynamicResource WarningBrush}" />
        <Setter Property="Stretch" Value="Uniform" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Separator.Theme.axaml
================================================================================

<!-- Separator.Theme.axaml -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    
    <ControlTheme x:Key="HorizontalSeparatorTheme" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Height" Value="1" />
        <Setter Property="Margin" Value="0,8,0,8" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
    </ControlTheme>
    
    <ControlTheme x:Key="VerticalSeparatorTheme" TargetType="Separator">
        <Setter Property="Background" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Width" Value="1" />
        <Setter Property="Margin" Value="8,0,8,0" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
    </ControlTheme>
    
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\TabControl.Theme.axaml
================================================================================


<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  ====================== TAB CONTROL THEME ======================  -->
    <ControlTheme x:Key="CustomTabControlTheme" TargetType="TabControl">
        <Setter Property="Padding" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Padding="{TemplateBinding Padding}"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    CornerRadius="{DynamicResource CornerRadius}">
                    <DockPanel>
                        <Border
                            Padding="4,8,4,0"
                            Background="{DynamicResource GunMetalDarkBrush}"
                            BorderBrush="{DynamicResource BorderBrush}"
                            BorderThickness="0"
                            BoxShadow="0 1 5 0 #20000000"
                            CornerRadius="{DynamicResource CornerRadius}"
                            DockPanel.Dock="Top">
                            <ItemsPresenter Name="PART_ItemsPresenter" ItemsPanel="{TemplateBinding ItemsPanel}" />
                        </Border>
                        <ContentPresenter
                            Name="PART_SelectedContentHost"
                            Margin="0,12,0,0"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding SelectedContent}"
                            ContentTemplate="{TemplateBinding SelectedContentTemplate}" />
                    </DockPanel>
                </Border>
            </ControlTemplate>
        </Setter>
    </ControlTheme>

    <!--  ====================== TAB ITEM THEME ======================  -->
    <ControlTheme x:Key="CustomTabItemTheme" TargetType="TabItem">
        <Setter Property="FontSize" Value="14" />
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="Margin" Value="4,0,4,0" />
        <Setter Property="Padding" Value="16,10" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="Template">
            <ControlTemplate>
                <Panel>
                    <Border
                        Name="PART_LayoutRoot"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{TemplateBinding CornerRadius}">
                        <ContentPresenter
                            Name="PART_ContentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Header}"
                            ContentTemplate="{TemplateBinding HeaderTemplate}"
                            TextBlock.FontFamily="{TemplateBinding FontFamily}"
                            TextBlock.FontSize="{TemplateBinding FontSize}"
                            TextBlock.FontWeight="{TemplateBinding FontWeight}" />
                    </Border>
                    <Border
                        Name="PART_SelectedIndicator"
                        Height="3"
                        Margin="0"
                        VerticalAlignment="Bottom"
                        Background="{DynamicResource AccentBlueBrush}"
                        CornerRadius="1.5"
                        IsVisible="False" />
                </Panel>
            </ControlTemplate>
        </Setter>

        <!--  Selected state  -->
        <Style Selector="^:selected">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="FontWeight" Value="SemiBold" />
        </Style>
        <Style Selector="^:selected /template/ Border#PART_SelectedIndicator">
            <Setter Property="IsVisible" Value="True" />
        </Style>

        <!--  Pointer over (hover) state  -->
        <Style Selector="^:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
            <Setter Property="Cursor" Value="Hand" />
        </Style>

        <!--  Selected + hover state  -->
        <Style Selector="^:selected:pointerover /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource SecondaryColorBrush}" />
        </Style>

        <!--  Pressed state  -->
        <Style Selector="^:pressed /template/ Border#PART_LayoutRoot">
            <Setter Property="Background" Value="{DynamicResource GunMetalDarkBrush}" />
        </Style>

        <!--  Disabled state  -->
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.5" />
        </Style>
    </ControlTheme>

    <!--  Add this theme to set the items panel for the tab control  -->
    <ItemsPanelTemplate x:Key="TabItemsPanelTemplate">
        <WrapPanel Orientation="Horizontal" />
    </ItemsPanelTemplate>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\TextBlock.Theme.axaml
================================================================================

<!--  TextBlock.Theme.axaml  -->
<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="CaptionTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeSmall}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>

    <ControlTheme x:Key="StatsTitleTheme" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
    </ControlTheme>
    <ControlTheme x:Key="MediumTextBlock" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme
        x:Key="LabelTextBlockTheme"
        BasedOn="{StaticResource MediumTextBlock}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Medium" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Margin" Value="5,0" />
    </ControlTheme>
    <ControlTheme
        x:Key="SubheaderTextBlockTheme"
        BasedOn="{StaticResource MediumTextBlock}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
    </ControlTheme>
    <ControlTheme x:Key="TextBlockLargePrimaryBrush" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
    <ControlTheme
        x:Key="StatsValueTheme"
        BasedOn="{StaticResource TextBlockLargePrimaryBrush}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Margin" Value="0,5,0,5" />
    </ControlTheme>
    <ControlTheme
        x:Key="SectionHeaderTheme"
        BasedOn="{StaticResource TextBlockLargePrimaryBrush}"
        TargetType="TextBlock">
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="Margin" Value="0,0,0,5" />
    </ControlTheme>
    <ControlTheme x:Key="HeaderTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme x:Key="TitleBarTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeLarge}" />
        <Setter Property="FontWeight" Value="SemiBold" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <ControlTheme x:Key="StatusBarMainTextTheme" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>

    <ControlTheme x:Key="StatusBarWarningTextTheme" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Foreground" Value="{DynamicResource WarningBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
    <!--  Design Preview for TextBlock Themes  -->
    <Design.PreviewWith>
        <StackPanel Spacing="8">
            <TextBlock Text="Caption TextBlock Theme" Theme="{StaticResource CaptionTextBlockTheme}" />
            <TextBlock Text="Stats Title Theme" Theme="{StaticResource StatsTitleTheme}" />
            <TextBlock Text="Medium TextBlock" Theme="{StaticResource MediumTextBlock}" />
            <TextBlock Text="Label TextBlock Theme" Theme="{StaticResource LabelTextBlockTheme}" />
            <TextBlock Text="Subheader TextBlock Theme" Theme="{StaticResource SubheaderTextBlockTheme}" />
            <TextBlock Text="TextBlock Large Primary Brush" Theme="{StaticResource TextBlockLargePrimaryBrush}" />
            <TextBlock Text="Stats Value Theme" Theme="{StaticResource StatsValueTheme}" />
            <TextBlock Text="Section Header Theme" Theme="{StaticResource SectionHeaderTheme}" />
            <TextBlock Text="Header TextBlock Theme" Theme="{StaticResource HeaderTextBlockTheme}" />
            <TextBlock Text="Title Bar TextBlock Theme" Theme="{StaticResource TitleBarTextBlockTheme}" />
            <TextBlock Text="StatusBar Main Text" Theme="{StaticResource StatusBarMainTextTheme}" />
            <TextBlock Text="StatusBar Warning Text" Theme="{StaticResource StatusBarWarningTextTheme}" />

        </StackPanel>
    </Design.PreviewWith>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\TextBox.Theme.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--  TextBox Theme with Static TextPresenter Properties  -->
    <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="/Themes/ColorTheme.axaml" />
    </ResourceDictionary.MergedDictionaries>
    <ControlTheme x:Key="DialogTextBoxTheme" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="CaretBrush" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="SelectionBrush" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="BorderThickness" Value="{DynamicResource BorderThickness}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="Padding" Value="5,5" />
        <Setter Property="FocusAdorner" Value="{x:Null}" />
        <Setter Property="ScrollViewer.IsScrollChainingEnabled" Value="True" />
        <Setter Property="Template">
            <ControlTemplate>
                <DataValidationErrors>
                    <Panel>
                        <Border
                            Name="PART_BorderElement"
                            MinWidth="{TemplateBinding MinWidth}"
                            MinHeight="{TemplateBinding MinHeight}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{TemplateBinding CornerRadius}" />

                        <Border Margin="{TemplateBinding BorderThickness}">
                            <Grid ColumnDefinitions="Auto,*,Auto">
                                <ContentPresenter
                                    Grid.Column="0"
                                    Grid.ColumnSpan="1"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerLeftContent}" />
                                <DockPanel
                                    x:Name="PART_InnerDockPanel"
                                    Grid.Column="1"
                                    Grid.ColumnSpan="1"
                                    Margin="{TemplateBinding Padding}">
                                    <TextBlock
                                        Name="PART_FloatingWatermark"
                                        DockPanel.Dock="Top"
                                        Foreground="{DynamicResource AccentBlueBrush}"
                                        IsVisible="False"
                                        Text="{TemplateBinding Watermark}" />
                                    <ScrollViewer
                                        Name="PART_ScrollViewer"
                                        AllowAutoHide="{TemplateBinding (ScrollViewer.AllowAutoHide)}"
                                        BringIntoViewOnFocusChange="{TemplateBinding (ScrollViewer.BringIntoViewOnFocusChange)}"
                                        HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                                        IsScrollChainingEnabled="{TemplateBinding (ScrollViewer.IsScrollChainingEnabled)}"
                                        VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                                        <Panel>
                                            <TextBlock
                                                Name="PART_Watermark"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                Foreground="{DynamicResource TextSecondaryBrush}"
                                                Opacity="0.6"
                                                Text="{TemplateBinding Watermark}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}">
                                                <TextBlock.IsVisible>
                                                    <MultiBinding Converter="{x:Static BoolConverters.And}">
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            ElementName="PART_TextPresenter"
                                                            Path="PreeditText" />
                                                        <Binding
                                                            Converter="{x:Static StringConverters.IsNullOrEmpty}"
                                                            Path="Text"
                                                            RelativeSource="{RelativeSource TemplatedParent}" />
                                                    </MultiBinding>
                                                </TextBlock.IsVisible>
                                            </TextBlock>
                                            <TextPresenter
                                                Name="PART_TextPresenter"
                                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                CaretBrush="{TemplateBinding CaretBrush}"
                                                CaretIndex="{TemplateBinding CaretIndex}"
                                                LetterSpacing="{TemplateBinding LetterSpacing}"
                                                LineHeight="{TemplateBinding LineHeight}"
                                                PasswordChar="{TemplateBinding PasswordChar}"
                                                RevealPassword="{TemplateBinding RevealPassword}"
                                                SelectionBrush="{TemplateBinding SelectionBrush}"
                                                SelectionEnd="{TemplateBinding SelectionEnd}"
                                                SelectionStart="{TemplateBinding SelectionStart}"
                                                Text="{TemplateBinding Text,
                                                                       Mode=TwoWay}"
                                                TextAlignment="{TemplateBinding TextAlignment}"
                                                TextWrapping="{TemplateBinding TextWrapping}" />
                                        </Panel>
                                        <ScrollViewer.Styles>
                                            <Style Selector="ScrollContentPresenter#PART_ContentPresenter">
                                                <Setter Property="Cursor" Value="IBeam" />
                                            </Style>
                                        </ScrollViewer.Styles>
                                    </ScrollViewer>
                                </DockPanel>
                                <ContentPresenter
                                    Grid.Column="2"
                                    Grid.ColumnSpan="1"
                                    VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                    Content="{TemplateBinding InnerRightContent}" />
                            </Grid>
                        </Border>
                    </Panel>
                </DataValidationErrors>
            </ControlTemplate>
        </Setter>

        <!--  Disabled State  -->
        <Style Selector="^:disabled">
            <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            <Setter Property="Opacity" Value="0.6" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark, ^ /template/ TextBlock#PART_FloatingWatermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>
        </Style>

        <!--  PointerOver State  -->
        <Style Selector="^:pointerover">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
            <Setter Property="Opacity" Value="0.9" />

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
                <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
            </Style>

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>
        </Style>

        <!--  Focused State  -->
        <Style Selector="^:focus">
            <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />

            <Style Selector="^ /template/ TextBlock#PART_Watermark">
                <Setter Property="Foreground" Value="{DynamicResource TextSecondaryBrush}" />
            </Style>

            <Style Selector="^ /template/ Border#PART_BorderElement">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
                <Setter Property="BorderBrush" Value="{DynamicResource AccentBlueBrush}" />
            </Style>
        </Style>

        <Style Selector="^:error /template/ Border#PART_BorderElement">
            <Setter Property="BorderBrush" Value="{DynamicResource ErrorBrush}" />
        </Style>

        <Style Selector="^ /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="Cursor" Value="IBeam" />
        </Style>

        <Style Selector="^[UseFloatingWatermark=true]:not(:empty) /template/ TextBlock#PART_FloatingWatermark">
            <Setter Property="IsVisible" Value="True" />
        </Style>
    </ControlTheme>
    <ControlTheme x:Key="CustomTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource GunMetalMediumBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="Padding" Value="12,10" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <ControlTemplate>
                <Border
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    BoxShadow="0 1 3 0 #15000000"
                    CornerRadius="{TemplateBinding CornerRadius}">
                    <Grid>
                        <TextBlock
                            x:Name="PART_Watermark"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Foreground="#99FFFFFF"
                            IsVisible="{TemplateBinding Text,
                                                        Converter={x:Static StringConverters.IsNullOrEmpty}}"
                            Text="{TemplateBinding Watermark}" />

                        <ScrollViewer
                            x:Name="PART_ScrollViewer"
                            HorizontalScrollBarVisibility="{TemplateBinding (ScrollViewer.HorizontalScrollBarVisibility)}"
                            VerticalScrollBarVisibility="{TemplateBinding (ScrollViewer.VerticalScrollBarVisibility)}">
                            <Panel>
                                <TextPresenter
                                    x:Name="PART_TextPresenter"
                                    Margin="{TemplateBinding Padding}"
                                    CaretBrush="{DynamicResource TextPrimaryBrush}"
                                    CaretIndex="{TemplateBinding CaretIndex}"
                                    Foreground="{StaticResource TextPrimaryBrush}"
                                    PasswordChar="{TemplateBinding PasswordChar}"
                                    RevealPassword="{TemplateBinding RevealPassword}"
                                    SelectionBrush="{DynamicResource AccentBlueBrush}"
                                    SelectionEnd="{TemplateBinding SelectionEnd}"
                                    SelectionForegroundBrush="{DynamicResource TextPrimaryBrush}"
                                    SelectionStart="{TemplateBinding SelectionStart}"
                                    Text="{TemplateBinding Text,
                                                           Mode=TwoWay}"
                                    TextAlignment="{TemplateBinding TextAlignment}"
                                    TextWrapping="{TemplateBinding TextWrapping}" />
                            </Panel>
                        </ScrollViewer>
                    </Grid>
                </Border>
            </ControlTemplate>
        </Setter>

        <Style Selector="^:pointerover">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
        </Style>
        <Style Selector="^:focus">
            <Setter Property="Background" Value="{DynamicResource GunMetalLightBrush}" />
            <Setter Property="BorderThickness" Value="0" />
        </Style>
        <Style Selector="^:disabled">
            <Setter Property="Opacity" Value="0.6" />
        </Style>
    </ControlTheme>
    <Design.PreviewWith>
        <StackPanel Background="{DynamicResource BackgroundLightBrush}">
            <TextBox
                Margin="10"
                Background="{DynamicResource BackgroundBrush}"
                Text="Sample Text"
                Theme="{StaticResource CustomTextBoxTheme}" />
            <TextBox
                Margin="10"
                Background="{DynamicResource BackgroundBrush}"
                Text="Sample Text"
                Theme="{StaticResource DialogTextBoxTheme}" />
        </StackPanel>
    </Design.PreviewWith>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Window.Theme.axaml
================================================================================

<!-- Window.Theme.axaml -->
<ResourceDictionary xmlns="https://github.com/avaloniaui"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- Window Theme -->
    <ControlTheme x:Key="DefaultWindowTheme" TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>

    <!-- Dialog Window Theme -->
    <ControlTheme x:Key="DialogWindowTheme" BasedOn="{StaticResource DefaultWindowTheme}" TargetType="Window">
        <Setter Property="SystemDecorations" Value="Full" />
        <Setter Property="WindowStartupLocation" Value="CenterScreen" />
        <Setter Property="SizeToContent" Value="Height" />
        <Setter Property="MinWidth" Value="400" />
        <Setter Property="MaxWidth" Value="600" />
        <Setter Property="Padding" Value="8" />
    </ControlTheme>

</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Utility\WindowTools.cs
================================================================================

using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Controls;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Avalonia;

namespace AvaloniaThemeManager.Utility
{
    /// <summary>
    /// Provides utility methods for working with Avalonia <see cref="Window"/> instances,
    /// including retrieving the main application window.
    /// </summary>
    public static class WindowTools
    {
        /// <summary>
        /// Attempts to retrieve the main application <see cref="Window"/>.
        /// </summary>
        /// <returns>
        /// The main <see cref="Window"/> instance of the application if available; otherwise, <c>null</c>.
        /// </returns>
        public static Window? TryGetMainWindow()
        {
            if (Application.Current?.ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)
            {
                return desktop.MainWindow;
            }
            return null;
        }

        /// <summary>
        /// Retrieves the main application window.
        /// </summary>
        /// <returns>The main <see cref="Window"/> instance of the application.</returns>
        /// <exception cref="InvalidOperationException">
        /// Thrown when the main window is not available.
        /// </exception>
        public static Window GetMainWindow()
        {
            return TryGetMainWindow() ?? throw new InvalidOperationException("Main window is not available");
        }
    }

}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\ViewModels\QuickThemeSwitcherViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using Avalonia.Media;
using AvaloniaThemeManager.Theme.AvaloniaThemeManager.Theme;
using Microsoft.Extensions.Logging;
using ReactiveUI;

namespace AvaloniaThemeManager.ViewModels
{
    /// <summary>
    /// 
    /// </summary>
    public class QuickThemeSwitcherViewModel : ViewModelBase
    {
        private readonly ILogger _logger;
        private ThemeInfo? _selectedTheme;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickThemeSwitcherViewModel"/> class
        /// with a default logger instance.
        /// </summary>
        public QuickThemeSwitcherViewModel() : this(
            Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuickThemeSwitcherViewModel"/> class
        /// with the specified logger instance.
        /// </summary>
        /// <param name="logger">
        /// An instance of <see cref="ILogger"/> used for logging operations within the view model.
        /// </param>
        public QuickThemeSwitcherViewModel(ILogger logger)
        {
            _logger = logger;
            AvailableThemes = new ObservableCollection<ThemeInfo>();

            LoadAvailableThemes();
            LoadCurrentTheme();

            // Subscribe to skin manager changes to keep in sync
            SkinManager.Instance.SkinChanged += OnSkinChanged;
        }

        /// <summary>
        /// Gets the collection of available themes that can be selected and applied
        /// within the application.
        /// </summary>
        /// <remarks>
        /// This property is populated by the <see cref="LoadAvailableThemes"/> method,
        /// which retrieves the themes from the <see cref="SkinManager"/>. The collection
        /// is updated dynamically to reflect the available themes.
        /// </remarks>
        public ObservableCollection<ThemeInfo> AvailableThemes { get; }

        /// <summary>
        /// Gets or sets the currently selected theme.
        /// </summary>
        /// <remarks>
        /// When a new theme is selected, the corresponding theme is applied automatically.
        /// The selected theme is synchronized with the <see cref="AvailableThemes"/> collection.
        /// </remarks>
        public ThemeInfo? SelectedTheme
        {
            get => _selectedTheme;
            set
            {
                if (this.RaiseAndSetIfChanged(ref _selectedTheme, value) != null)
                {
                    ApplyTheme(value);
                }
            }
        }

        private void LoadAvailableThemes()
        {
            try
            {
                var skinManager = SkinManager.Instance;
                var themeNames = skinManager.GetAvailableSkinNames();

                AvailableThemes.Clear();

                foreach (var themeName in themeNames)
                {
                    var skin = skinManager.GetSkin(themeName);
                    if (skin != null)
                    {
                        var themeInfo = new ThemeInfo
                        {
                            Name = themeName,
                            Description = GetThemeDescription(themeName),
                            PreviewColor = new SolidColorBrush(skin.AccentColor)
                        };
                        AvailableThemes.Add(themeInfo);
                    }
                }

                _logger.LogDebug("Loaded {ThemeCount} themes for quick switcher", AvailableThemes.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load themes for quick switcher");
            }
        }

        private void LoadCurrentTheme()
        {
            try
            {
                var currentSkin = SkinManager.Instance.CurrentSkin;
                if (currentSkin?.Name != null)
                {
                    var currentTheme = AvailableThemes.FirstOrDefault(t => t.Name == currentSkin.Name);
                    if (currentTheme != null)
                    {
                        // Set without triggering the setter to avoid recursive application
                        _selectedTheme = currentTheme;
                        this.RaisePropertyChanged(nameof(SelectedTheme));
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load current theme for quick switcher");
            }
        }

        private void ApplyTheme(ThemeInfo? themeInfo)
        {
            try
            {
                if (themeInfo != null)
                {
                    SkinManager.Instance.ApplySkin(themeInfo.Name);
                    _logger.LogInformation("Quick theme switch to: {ThemeName}", themeInfo.Name);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to apply theme via quick switcher: {ThemeName}", themeInfo?.Name);
            }
        }

        private void OnSkinChanged(object? sender, EventArgs e)
        {
            // Update selected theme when skin changes externally
            try
            {
                LoadCurrentTheme();
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to update quick switcher after skin change");
            }
        }

        private static string GetThemeDescription(string themeName)
        {
            return themeName switch
            {
                "Dark" => "Professional dark theme",
                "Light" => "Clean light theme",
                "Ocean Blue" => "Deep blue ocean theme",
                "Forest Green" => "Nature-inspired green",
                "Purple Haze" => "Rich purple theme",
                "High Contrast" => "Maximum contrast",
                "Cyberpunk" => "Futuristic neon theme",
                _ => "Custom theme"
            };
        }

        /// <summary>
        /// Releases the resources used by the <see cref="QuickThemeSwitcherViewModel"/> class.
        /// </summary>
        /// <param name="disposing">
        /// A value indicating whether the method is being called explicitly to release managed resources.
        /// If <c>true</c>, managed resources are released; otherwise, only unmanaged resources are released.
        /// </param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                SkinManager.Instance.SkinChanged -= OnSkinChanged;
            }
            base.Dispose(disposing);
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\ViewModels\ThemeSettingsViewModel.cs
================================================================================

using System.Collections.ObjectModel;
using System.Reactive;
using Avalonia.Media;
using AvaloniaThemeManager.Theme.AvaloniaThemeManager.Theme;
using Microsoft.Extensions.Logging;
using ReactiveUI;

namespace AvaloniaThemeManager.ViewModels
{
    /// <summary>
    /// ViewModel responsible for managing theme settings within the application.
    /// </summary>
    /// <remarks>
    /// This class provides functionality to load available themes, apply a selected theme, 
    /// and reset to a default theme. It interacts with the UI to allow users to preview and 
    /// change themes dynamically. Logging is utilized to track theme changes and operations.
    /// </remarks>
    public class ThemeSettingsViewModel : ViewModelBase
    {
        private readonly ILogger _logger;
        private ThemeInfo? _selectedTheme;

        /// <summary>
        /// Initializes a new instance of the <see cref="ThemeSettingsViewModel"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor sets up the ViewModel with a default logger instance. It initializes
        /// the collection of available themes, the command for applying themes, and loads the
        /// current theme and available themes.
        /// </remarks>
        public ThemeSettingsViewModel() : this(
            Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ThemeSettingsViewModel"/> class with the specified logger.
        /// </summary>
        /// <param name="logger">
        /// An instance of <see cref="ILogger"/> used for logging theme-related operations and errors.
        /// </param>
        /// <remarks>
        /// This constructor allows dependency injection of a logger instance, enabling detailed logging
        /// of theme management operations. It initializes the collection of available themes, sets up
        /// the command for applying themes, and loads the current theme and available themes.
        /// </remarks>
        public ThemeSettingsViewModel(ILogger logger)
        {
            _logger = logger;

            AvailableThemes = new ObservableCollection<ThemeInfo>();
            ApplyThemeCommand = ReactiveCommand.Create(ApplyTheme);

            LoadAvailableThemes();
            LoadCurrentTheme();
        }

        /// <summary>
        /// Gets the collection of available themes that can be applied within the application.
        /// </summary>
        /// <remarks>
        /// This property provides a list of <see cref="ThemeInfo"/> objects, each representing a theme 
        /// with its name, description, and preview color. The collection is populated by the 
        /// <c>LoadAvailableThemes</c> method and is used to display theme options in the UI.
        /// </remarks>
        public ObservableCollection<ThemeInfo> AvailableThemes { get; }
        /// <summary>
        /// Gets the command used to apply the currently selected theme.
        /// </summary>
        /// <remarks>
        /// This command executes the logic to apply the theme selected by the user in the UI.
        /// It ensures that the application's appearance is updated dynamically to reflect the chosen theme.
        /// </remarks>
        public ReactiveCommand<Unit, Unit> ApplyThemeCommand { get; }

        /// <summary>
        /// Gets or sets the currently selected theme.
        /// </summary>
        /// <remarks>
        /// When a new theme is selected, it is immediately applied to the application for preview purposes.
        /// The selected theme is logged for tracking purposes. If the theme is set to <c>null</c>, no changes are applied.
        /// </remarks>
        public ThemeInfo? SelectedTheme
        {
            get => _selectedTheme;
            set
            {
                if (this.RaiseAndSetIfChanged(ref _selectedTheme, value) != null)
                {
                    // Apply theme immediately for preview
                    if (value != null)
                    {
                        SkinManager.Instance.ApplySkin(value.Name);
                        _logger.LogInformation("Theme changed to: {ThemeName}", value.Name);
                    }
                }
            }
        }

        private void LoadAvailableThemes()
        {
            try
            {
                var skinManager = SkinManager.Instance;
                var themeNames = skinManager.GetAvailableSkinNames();

                AvailableThemes.Clear();

                foreach (var themeName in themeNames)
                {
                    var skin = skinManager.GetSkin(themeName);
                    if (skin != null)
                    {
                        var themeInfo = new ThemeInfo
                        {
                            Name = themeName,
                            Description = GetThemeDescription(themeName),
                            PreviewColor = new SolidColorBrush(skin.AccentColor)
                        };
                        AvailableThemes.Add(themeInfo);
                    }
                }

                _logger.LogInformation("Loaded {ThemeCount} available themes", AvailableThemes.Count);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load available themes");
            }
        }

        private void LoadCurrentTheme()
        {
            try
            {
                var currentSkin = SkinManager.Instance.CurrentSkin;
                if (currentSkin?.Name != null)
                {
                    SelectedTheme = AvailableThemes.FirstOrDefault(t => t.Name == currentSkin.Name);
                }

                // Fallback to Dark theme if current theme not found
                SelectedTheme ??= AvailableThemes.FirstOrDefault(t => t.Name == "Dark");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to load current theme");
            }
        }

        private void ApplyTheme()
        {
            try
            {
                if (SelectedTheme != null)
                {
                    SkinManager.Instance.ApplySkin(SelectedTheme.Name);
                    _logger.LogInformation("Applied theme: {ThemeName}", SelectedTheme.Name);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to apply theme: {ThemeName}", SelectedTheme?.Name);
            }
        }

        /// <summary>
        /// Resets the theme settings to the default theme.
        /// </summary>
        /// <remarks>
        /// This method attempts to reset the currently selected theme to the default theme, 
        /// which is identified by the name "Dark". If the default theme is found in the 
        /// <see cref="AvailableThemes"/> collection, it is applied as the selected theme. 
        /// Logs information about the operation or errors if the reset fails.
        /// </remarks>
        /// <exception cref="Exception">
        /// Logs any exceptions that occur during the reset operation.
        /// </exception>
        public void ResetToDefault()
        {
            try
            {
                var defaultTheme = AvailableThemes.FirstOrDefault(t => t.Name == "Dark");
                if (defaultTheme != null)
                {
                    SelectedTheme = defaultTheme;
                    _logger.LogInformation("Reset to default theme: Dark");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to reset to default theme");
            }
        }

        private static string GetThemeDescription(string themeName)
        {
            return themeName switch
            {
                "Dark" => "Professional dark theme with blue accents. Easy on the eyes for extended use.",
                "Light" => "Clean light theme with dark text. Perfect for bright environments.",
                "Ocean Blue" => "Deep blue theme inspired by ocean depths. Calming and focused.",
                "Forest Green" => "Nature-inspired green theme. Relaxing and earthy.",
                "Purple Haze" => "Rich purple theme with mystical vibes. Creative and bold.",
                "High Contrast" => "Maximum contrast for accessibility. Clear and distinct colors.",
                "Cyberpunk" => "Futuristic neon theme with hot pink accents. Edgy and modern.",
                _ => "Custom theme with unique color combinations."
            };
        }
    }

    /// <summary>
    /// Represents information about a theme, including its name, description, and a preview color.
    /// </summary>
    /// <remarks>
    /// This class is used to encapsulate the details of a theme, which can be displayed in the UI
    /// or used for theme management purposes within the application.
    /// </remarks>
    public class ThemeInfo
    {
        /// <summary>
        /// Gets or sets the name of the theme.
        /// </summary>
        /// <remarks>
        /// The name uniquely identifies the theme and is used for selection and application purposes.
        /// </remarks>
        public string Name { get; set; } = "";
        /// <summary>
        /// Gets or sets the description of the theme.
        /// </summary>
        /// <remarks>
        /// This property provides a textual description of the theme, which can be displayed in the user interface
        /// to give users more context about the theme's purpose or appearance.
        /// </remarks>
        public string Description { get; set; } = "";
        /// <summary>
        /// Gets or sets the brush used to represent the preview color of the theme.
        /// </summary>
        /// <remarks>
        /// This property is typically used to display a visual representation of the theme's accent color
        /// in the user interface, such as in theme selection controls.
        /// </remarks>
        public IBrush PreviewColor { get; set; } = Brushes.Transparent;
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\ViewModels\ViewModelBase.cs
================================================================================

using ReactiveUI;

namespace AvaloniaThemeManager.ViewModels
{
    /// <summary>
    /// Serves as the base class for all ViewModel classes in the AvaloniaThemeManager application.
    /// </summary>
    /// <remarks>
    /// This class provides common functionality for ViewModel classes, including support for 
    /// reactive property changes and resource management through the <see cref="IDisposable"/> interface.
    /// </remarks>
    public class ViewModelBase : ReactiveObject, IDisposable
    {
        /// <summary>
        /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
        /// </summary>
        /// <remarks>
        /// This method is part of the <see cref="IDisposable"/> implementation and ensures that 
        /// both managed and unmanaged resources are properly released. It calls the 
        /// <see cref="Dispose(bool)"/> method with a value of <c>true</c>, and suppresses 
        /// finalization of the object to prevent redundant resource cleanup.
        /// </remarks>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                // TODO release managed resources here
            }
        }

        /// <summary>
        /// Releases all resources used by the <see cref="ViewModelBase"/> instance.
        /// </summary>
        /// <remarks>
        /// This method calls the <see cref="Dispose(bool)"/> method with a value of <c>true</c> 
        /// to release managed resources and suppresses finalization of the object.
        /// </remarks>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ConfirmationDialog.axaml
================================================================================

<Window
    x:Class="AvaloniaThemeManager.Views.ConfirmationDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:icons="clr-namespace:AvaloniaThemeManager.Icons"
    Title="Confirmation"
    Width="400"
    Height="250"
    MinWidth="350"
    MinHeight="200"
    Background="{DynamicResource BackgroundBrush}"
    CanResize="False"
    Icon="avares://AvaloniaThemeManager/Icons/Assets/jonBuilt.ico"
    ShowInTaskbar="False"
    SizeToContent="WidthAndHeight"
    WindowStartupLocation="CenterOwner">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource AccentBlueBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1">
            <StackPanel Orientation="Horizontal" Spacing="12">
                <Path
                    Width="24"
                    Height="24"
                    Data="{x:Static icons:ApplicationIcons.InformationGeometry}"
                    Fill="{DynamicResource TextPrimaryBrush}"
                    Stretch="Uniform" />
                <TextBlock
                    x:Name="TitleText"
                    VerticalAlignment="Center"
                    FontSize="16"
                    FontWeight="Bold"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    Text="Confirmation" />
            </StackPanel>
        </Border>

        <!--  Content  -->
        <Grid Grid.Row="1" Margin="20">
            <StackPanel
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Spacing="15">
                <!--  Question Icon  -->
                <Path
                    Width="48"
                    Height="48"
                    HorizontalAlignment="Center"
                    Data="{x:Static icons:ApplicationIcons.InformationGeometry}"
                    Fill="{DynamicResource AccentBlueBrush}"
                    Stretch="Uniform" />

                <!--  Main Message  -->
                <TextBlock
                    x:Name="MessageText"
                    MaxWidth="320"
                    HorizontalAlignment="Center"
                    FontSize="14"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    TextAlignment="Center"
                    TextWrapping="Wrap" />
            </StackPanel>
        </Grid>

        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">
                <Button
                    x:Name="CancelButton"
                    Padding="20,8"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    Content="Cancel"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    IsCancel="True" />
                <Button
                    x:Name="ConfirmButton"
                    Padding="20,8"
                    Background="{DynamicResource AccentBlueBrush}"
                    Content="Yes"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    IsDefault="True" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ConfirmationDialog.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Interactivity;
using AvaloniaThemeManager.Utility;

namespace AvaloniaThemeManager.Views
{
    /// <summary>
    /// A dialog for requesting user confirmation with customizable buttons.
    /// </summary>
    public partial class ConfirmationDialog : Window
    {
        /// <summary>
        /// Gets or sets the message to display in the confirmation dialog.
        /// </summary>
        public string Message { get; set; } = "";

        /// <summary>
        /// Gets or sets the text for the confirm button.
        /// </summary>
        public string ConfirmText { get; set; } = "Yes";

        /// <summary>
        /// Gets or sets the text for the cancel button.
        /// </summary>
        public string CancelText { get; set; } = "No";

        /// <summary>
        /// Gets the result of the dialog interaction.
        /// </summary>
        public bool? DialogResult { get; private set; }

        /// <summary>
        /// Initializes a new instance of the ConfirmationDialog class.
        /// </summary>
        public ConfirmationDialog()
        {
            InitializeComponent();
            ConfirmButton.Click += ConfirmButton_Click;
            CancelButton.Click += CancelButton_Click;
        }

        /// <summary>
        /// Called when the window is opened to update the dialog content.
        /// </summary>
        protected override void OnOpened(EventArgs e)
        {
            base.OnOpened(e);
            UpdateContent();
        }

        private void UpdateContent()
        {
            MessageText.Text = Message;
            ConfirmButton.Content = ConfirmText;
            CancelButton.Content = CancelText;
        }

        private void ConfirmButton_Click(object? sender, RoutedEventArgs e)
        {
            DialogResult = true;
            Close(true);
        }

        private void CancelButton_Click(object? sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close(false);
        }

        /// <summary>
        /// Shows the confirmation dialog and returns the user's choice.
        /// </summary>
        /// <param name="owner">The parent window</param>
        /// <returns>True if confirmed, false if cancelled, null if closed without choice</returns>
        public new async Task<bool?> ShowDialog(Window? owner = null)
        {
            if (owner != null)
            {
                return await ShowDialog<bool?>(owner);
            }
            else
            {
                return await ShowDialog<bool?>(WindowTools.GetMainWindow()!);
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ErrorDialog.axaml
================================================================================

<Window
    x:Class="AvaloniaThemeManager.Views.ErrorDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:icons="clr-namespace:AvaloniaThemeManager.Icons"
    Title="Error"
    Width="500"
    Height="400"
    MinWidth="400"
    MinHeight="300"
    MaxHeight="700"
    Background="{DynamicResource BackgroundBrush}"
    CanResize="True"
    Icon="avares://AvaloniaThemeManager/Icons/Assets/jonBuilt.ico"
    ShowInTaskbar="False"
    SizeToContent="Height"
    WindowStartupLocation="CenterOwner">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource ErrorBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1">
            <StackPanel Orientation="Horizontal" Spacing="12">
                <Path
                    Width="24"
                    Height="24"
                    Data="{x:Static icons:ApplicationIcons.ErrorGeometry}"
                    Fill="{DynamicResource TextPrimaryBrush}"
                    Stretch="Uniform" />
                <TextBlock
                    x:Name="TitleText"
                    VerticalAlignment="Center"
                    FontSize="16"
                    FontWeight="Bold"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    Text="Error" />
            </StackPanel>
        </Border>

        <!--  Content  -->
        <StackPanel
            Grid.Row="1"
            Margin="20"
            Spacing="15">

            <!--  Main Message  -->
            <TextBlock
                x:Name="MessageText"
                FontSize="14"
                Foreground="{DynamicResource TextPrimaryBrush}"
                TextWrapping="Wrap" />

            <!--  Exception Details Expander  -->
            <Expander
                x:Name="ExceptionExpander"
                Header="Technical Details"
                IsVisible="False">
                <Border
                    Margin="0,10,0,0"
                    Padding="12"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    BorderThickness="1"
                    CornerRadius="4">
                    <ScrollViewer MaxHeight="200" VerticalScrollBarVisibility="Auto">
                        <TextBlock
                            x:Name="ExceptionText"
                            FontFamily="Consolas, Monaco, 'Courier New', monospace"
                            FontSize="11"
                            Foreground="{DynamicResource TextSecondaryBrush}"
                            TextWrapping="Wrap" />
                    </ScrollViewer>
                </Border>
            </Expander>

            <!--  Help Text  -->
            <Border
                Padding="12"
                Background="{DynamicResource BackgroundLightBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1"
                CornerRadius="4">
                <StackPanel Spacing="8">
                    <TextBlock
                        FontSize="12"
                        FontWeight="Medium"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="What you can do:" />
                    <TextBlock
                        FontSize="11"
                        Foreground="{DynamicResource TextSecondaryBrush}"
                        Text="• Try the operation again"
                        TextWrapping="Wrap" />
                    <TextBlock
                        FontSize="11"
                        Foreground="{DynamicResource TextSecondaryBrush}"
                        Text="• Check if the file or resource is accessible"
                        TextWrapping="Wrap" />
                    <TextBlock
                        FontSize="11"
                        Foreground="{DynamicResource TextSecondaryBrush}"
                        Text="• If the problem persists, please report this error"
                        TextWrapping="Wrap" />
                </StackPanel>
            </Border>
        </StackPanel>

        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">
                <Button
                    x:Name="CopyButton"
                    Padding="12,6"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    Content="Copy Details"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    IsVisible="False" />
                <Button
                    x:Name="CloseButton"
                    Padding="12,6"
                    Background="{DynamicResource AccentBlueBrush}"
                    Content="Close"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    IsDefault="True" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ErrorDialog.axaml.cs
================================================================================

using System.Text;
using Avalonia.Controls;
using Avalonia.Interactivity;

namespace AvaloniaThemeManager.Views
{
    /// <summary>
    /// 
    /// </summary>
    public partial class ErrorDialog : Window
    {
        /// <summary>
        /// 
        /// </summary>
        public string Message { get; set; } = "";
        /// <summary>
        /// 
        /// </summary>
        public Exception? Exception { get; set; }

        /// <summary>
        /// 
        /// </summary>
        public ErrorDialog()
        {
            InitializeComponent();
            CloseButton.Click += CloseButton_Click;
            CopyButton.Click += CopyButton_Click;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="e"></param>
        protected override void OnOpened(EventArgs e)
        {
            base.OnOpened(e);
            UpdateContent();
        }

        private void UpdateContent()
        {
            // Update title
            if (!string.IsNullOrEmpty(Title))
            {
                TitleText.Text = Title;
            }

            // Update message
            MessageText.Text = Message;

            // Update exception details
            if (Exception != null)
            {
                ExceptionExpander.IsVisible = true;
                CopyButton.IsVisible = true;
                ExceptionText.Text = FormatException(Exception);
            }
        }

        private string FormatException(Exception ex)
        {
            var sb = new StringBuilder();

            var currentEx = ex;
            var level = 0;

            while (currentEx != null)
            {
                if (level > 0)
                {
                    sb.AppendLine();
                    sb.AppendLine($"--- Inner Exception {level} ---");
                }

                sb.AppendLine($"Type: {currentEx.GetType().FullName}");
                sb.AppendLine($"Message: {currentEx.Message}");

                if (!string.IsNullOrEmpty(currentEx.StackTrace))
                {
                    sb.AppendLine("Stack Trace:");
                    sb.AppendLine(currentEx.StackTrace);
                }

                currentEx = currentEx.InnerException;
                level++;
            }

            return sb.ToString();
        }

        private void CloseButton_Click(object? sender, RoutedEventArgs e)
        {
            Close();
        }

        private async void CopyButton_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                var clipboard = GetTopLevel(this)?.Clipboard;
                if (clipboard != null)
                {
                    var details = new StringBuilder();
                    details.AppendLine($"Error: {Title}");
                    details.AppendLine($"Message: {Message}");
                    details.AppendLine($"Time: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");

                    if (Exception != null)
                    {
                        details.AppendLine();
                        details.AppendLine("Exception Details:");
                        details.AppendLine(FormatException(Exception));
                    }

                    await clipboard.SetTextAsync(details.ToString());

                    // Briefly show feedback
                    var originalText = CopyButton.Content?.ToString();
                    CopyButton.Content = "Copied!";
                    await Task.Delay(1000);
                    CopyButton.Content = originalText;
                }
            }
            catch
            {
                // Ignore clipboard errors
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\NotificationDialog.axaml
================================================================================

<Window
    x:Class="AvaloniaThemeManager.Views.NotificationDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:icons="clr-namespace:AvaloniaThemeManager.Icons"
    Title="Notification"
    Width="450"
    Height="300"
    MinWidth="350"
    MinHeight="200"
    Background="{DynamicResource BackgroundBrush}"
    CanResize="True"
    Icon="avares://AvaloniaThemeManager/Icons/Assets/jonBuilt.ico"
    ShowInTaskbar="False"
    WindowStartupLocation="CenterOwner">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            x:Name="HeaderBorder"
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource AccentBlueBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1">
            <StackPanel Orientation="Horizontal" Spacing="12">
                <Path
                    x:Name="HeaderIcon"
                    Width="24"
                    Height="24"
                    Data="{x:Static icons:ApplicationIcons.InformationGeometry}"
                    Fill="{DynamicResource TextPrimaryBrush}"
                    Stretch="Uniform" />
                <TextBlock
                    x:Name="TitleText"
                    VerticalAlignment="Center"
                    FontSize="16"
                    FontWeight="Bold"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    Text="Information" />
            </StackPanel>
        </Border>

        <!--  Content  -->
        <ScrollViewer
            Grid.Row="1"
            Padding="20"
            VerticalScrollBarVisibility="Auto">
            <StackPanel Spacing="15">
                <!--  Main Message  -->
                <TextBlock
                    x:Name="MessageText"
                    FontSize="14"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    TextWrapping="Wrap" />

                <!--  Additional Content Area  -->
                <ContentPresenter x:Name="AdditionalContent" Content="{Binding AdditionalContent, RelativeSource={RelativeSource AncestorType=Window}}" />
            </StackPanel>
        </ScrollViewer>

        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">
                <Button
                    x:Name="OkButton"
                    Padding="20,8"
                    Background="{DynamicResource AccentBlueBrush}"
                    Content="OK"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    IsDefault="True" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\NotificationDialog.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Interactivity;
using Avalonia.Media;
using AvaloniaThemeManager.Icons;
using AvaloniaThemeManager.Services;
using AvaloniaThemeManager.Utility;

namespace AvaloniaThemeManager.Views
{
    /// <summary>
    /// A dialog for displaying notification messages with different types (Information, Warning, Error).
    /// </summary>
    public partial class NotificationDialog : Window
    {
        /// <summary>
        /// Gets or sets the message to display in the dialog.
        /// </summary>
        public string Message { get; set; } = "";

        /// <summary>
        /// Gets or sets the type of notification dialog.
        /// </summary>
        public NotificationDialogType DialogType { get; set; } = NotificationDialogType.Information;

        /// <summary>
        /// Initializes a new instance of the NotificationDialog class.
        /// </summary>
        public NotificationDialog()
        {
            InitializeComponent();
            OkButton.Click += OkButton_Click;
        }

        /// <summary>
        /// Called when the window is opened to configure the dialog based on its type.
        /// </summary>
        protected override void OnOpened(EventArgs e)
        {
            base.OnOpened(e);
            ConfigureDialogType();
            UpdateContent();
        }

        private void ConfigureDialogType()
        {
            switch (DialogType)
            {
                case NotificationDialogType.Information:
                    Title = "Information";
                    TitleText.Text = "Information";
                    HeaderIcon.Data = ApplicationIcons.InformationGeometry;
                    HeaderBorder.Background = WindowTools.GetMainWindow()!.FindResource("AccentBlueBrush") as IBrush;
                    break;

                case NotificationDialogType.Warning:
                    Title = "Warning";
                    TitleText.Text = "Warning";
                    HeaderIcon.Data = ApplicationIcons.WarningGeometry;
                    HeaderBorder.Background = WindowTools.GetMainWindow()!.FindResource("WarningBrush") as IBrush;
                    break;

                case NotificationDialogType.Error:
                    Title = "Error";
                    TitleText.Text = "Error";
                    HeaderIcon.Data = ApplicationIcons.ErrorGeometry;
                    HeaderBorder.Background = WindowTools.GetMainWindow()!.FindResource("ErrorBrush") as IBrush;
                    break;
            }
        }

        private void UpdateContent()
        {
            MessageText.Text = Message;
        }

        private void OkButton_Click(object? sender, RoutedEventArgs e)
        {
            Close();
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ThemeManagerDemoView.axaml
================================================================================

<UserControl
    x:Class="AvaloniaThemeManager.Views.ThemeManagerDemoView"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:AvaloniaThemeManager.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons="clr-namespace:AvaloniaThemeManager.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:AvaloniaThemeManager.ViewModels"
    MinWidth="1200"
    MinHeight="700"
    x:DataType="vm:ThemeSettingsViewModel"
    Background="{DynamicResource BackgroundBrush}"
    mc:Ignorable="d">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header with Theme Switcher  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1"
            Theme="{StaticResource ToolbarContainerBorderTheme}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <StackPanel
                    Grid.Column="0"
                    Orientation="Horizontal"
                    Spacing="15">
                    <Path
                        Width="32"
                        Height="32"
                        Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                        Fill="{DynamicResource AccentBlueBrush}"
                        Stretch="Uniform" />
                    <StackPanel VerticalAlignment="Center">
                        <TextBlock
                            FontSize="20"
                            FontWeight="Bold"
                            Foreground="{DynamicResource TextPrimaryBrush}"
                            Text="Avalonia Theme Manager"
                            Theme="{StaticResource HeaderTextBlockTheme}" />
                        <TextBlock
                            FontSize="12"
                            Foreground="{DynamicResource TextSecondaryBrush}"
                            Text="Comprehensive Theme System Demo - All Controls, Icons &amp; Features"
                            Theme="{StaticResource CaptionTextBlockTheme}" />
                    </StackPanel>
                </StackPanel>

                <controls:QuickThemeSwitcher Grid.Column="1" Margin="0,0,15,0" />

                <StackPanel
                    Grid.Column="2"
                    Orientation="Horizontal"
                    Spacing="10">
                    <Button Click="OpenThemeSettings_Click" Theme="{StaticResource ToolbarButtonTheme}">
                        <Button.Content>
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <Path
                                    Width="16"
                                    Height="16"
                                    Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                                    Fill="{DynamicResource TextPrimaryBrush}"
                                    Stretch="Uniform" />
                                <TextBlock Text="Settings" />
                            </StackPanel>
                        </Button.Content>
                    </Button>
                    <Button
                        Click="ExportTheme_Click"
                        Content="Export Theme"
                        Theme="{StaticResource ToolbarPrimaryButtonTheme}" />
                </StackPanel>
            </Grid>
        </Border>

        <!--  Main Content Area  -->
        <ScrollViewer
            Grid.Row="1"
            Margin="25"
            Padding="0,25,0,25"
            VerticalScrollBarVisibility="Auto">
            <StackPanel>

                <!--  Typography Showcase  -->
                <Border Theme="{StaticResource CardBorderTheme}">
                    <StackPanel Spacing="20">
                        <TextBlock Text="Typography Hierarchy" Theme="{StaticResource SectionHeaderTheme}" />

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Spacing="12">
                                <TextBlock
                                    FontSize="32"
                                    FontWeight="Bold"
                                    Text="Display Large (32px)" />
                                <TextBlock
                                    FontSize="24"
                                    FontWeight="SemiBold"
                                    Text="Headline Large (24px)" />
                                <TextBlock
                                    FontSize="20"
                                    FontWeight="Medium"
                                    Text="Title Large (20px)" />
                                <TextBlock
                                    FontSize="16"
                                    FontWeight="Normal"
                                    Text="Body Large (16px)" />
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Normal"
                                    Text="Body Medium (14px)" />
                                <TextBlock
                                    FontSize="12"
                                    FontWeight="Normal"
                                    Text="Body Small (12px)" />
                                <TextBlock
                                    FontSize="11"
                                    FontWeight="Normal"
                                    Text="Caption (11px)" />
                            </StackPanel>

                            <StackPanel Grid.Column="1" Spacing="12">
                                <TextBlock Text="Themed Text Styles" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                <TextBlock Text="Header Text Block Theme" Theme="{StaticResource HeaderTextBlockTheme}" />
                                <TextBlock Text="Section Header Theme" Theme="{StaticResource SectionHeaderTheme}" />
                                <TextBlock Text="Stats Value Theme" Theme="{StaticResource StatsValueTheme}" />
                                <TextBlock Text="Label Text Block Theme" Theme="{StaticResource LabelTextBlockTheme}" />
                                <TextBlock Text="Caption Text Block Theme" Theme="{StaticResource CaptionTextBlockTheme}" />
                                <TextBlock Text="Status Bar Main Text" Theme="{StaticResource StatusBarMainTextTheme}" />
                            </StackPanel>
                        </Grid>
                    </StackPanel>
                </Border>

                <!--  Controls Showcase  -->
                <Border Theme="{StaticResource CardBorderTheme}">
                    <StackPanel Spacing="20">
                        <TextBlock Text="Interactive Controls" Theme="{StaticResource SectionHeaderTheme}" />

                        <TabControl MinHeight="400" Theme="{StaticResource CustomTabControlTheme}">
                            <!--  Buttons Tab  -->
                            <TabItem Header="Buttons">
                                <ScrollViewer Padding="20">
                                    <StackPanel Spacing="20">
                                        <TextBlock Text="Button Themes" Theme="{StaticResource SubheaderTextBlockTheme}" />

                                        <WrapPanel>
                                            <Button Content="Primary Button" Theme="{StaticResource PrimaryButtonTheme}" />
                                            <Button Content="Secondary Button" Theme="{StaticResource SecondaryButtonTheme}" />
                                            <Button Content="Browse Button" Theme="{StaticResource BrowseButtonTheme}" />
                                            <Button Content="Toolbar Button" Theme="{StaticResource ToolbarButtonTheme}" />
                                            <Button Content="Toolbar Primary" Theme="{StaticResource ToolbarPrimaryButtonTheme}" />
                                            <Button Classes="accent" Content="Accent Button" />
                                            <Button Content="Disabled Button" IsEnabled="False" />
                                        </WrapPanel>

                                        <TextBlock Text="Buttons with Icons" Theme="{StaticResource SubheaderTextBlockTheme}" />

                                        <WrapPanel>
                                            <Button Theme="{StaticResource PrimaryButtonTheme}">
                                                <StackPanel Orientation="Horizontal" Spacing="8">
                                                    <Path
                                                        Width="16"
                                                        Height="16"
                                                        Data="{x:Static icons:ApplicationIcons.SearchGeometry}"
                                                        Fill="{DynamicResource TextPrimaryBrush}"
                                                        Stretch="Uniform" />
                                                    <TextBlock Text="Search" />
                                                </StackPanel>
                                            </Button>
                                            <Button Theme="{StaticResource SecondaryButtonTheme}">
                                                <StackPanel Orientation="Horizontal" Spacing="8">
                                                    <Path
                                                        Width="16"
                                                        Height="16"
                                                        Data="{x:Static icons:ApplicationIcons.RefreshGeometry}"
                                                        Fill="{DynamicResource TextPrimaryBrush}"
                                                        Stretch="Uniform" />
                                                    <TextBlock Text="Refresh" />
                                                </StackPanel>
                                            </Button>
                                            <Button Theme="{StaticResource BrowseButtonTheme}">
                                                <StackPanel Orientation="Horizontal" Spacing="8">
                                                    <Path
                                                        Width="16"
                                                        Height="16"
                                                        Data="{x:Static icons:ApplicationIcons.BrowseGeometry}"
                                                        Fill="{DynamicResource TextPrimaryBrush}"
                                                        Stretch="Uniform" />
                                                    <TextBlock Text="Browse" />
                                                </StackPanel>
                                            </Button>
                                        </WrapPanel>
                                    </StackPanel>
                                </ScrollViewer>
                            </TabItem>

                            <!--  Input Controls Tab  -->
                            <TabItem Header="Input Controls">
                                <ScrollViewer Padding="20">
                                    <StackPanel Spacing="25">
                                        <!--  TextBoxes  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Text Input Controls" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <StackPanel
                                                    Grid.Column="0"
                                                    Margin="0,0,10,0"
                                                    Spacing="10">
                                                    <TextBlock Text="Dialog TextBox Theme:" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <TextBox
                                                        Text="Sample text input"
                                                        Theme="{StaticResource DialogTextBoxTheme}"
                                                        Watermark="Enter text here..." />
                                                    <TextBox Theme="{StaticResource DialogTextBoxTheme}" Watermark="Placeholder example" />
                                                </StackPanel>
                                                <StackPanel Grid.Column="1" Spacing="10">
                                                    <TextBlock Text="Custom TextBox Theme:" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <TextBox
                                                        Text="Custom styled input"
                                                        Theme="{StaticResource CustomTextBoxTheme}"
                                                        Watermark="Custom style..." />
                                                    <TextBox
                                                        IsEnabled="False"
                                                        Text="Disabled input"
                                                        Theme="{StaticResource CustomTextBoxTheme}" />
                                                </StackPanel>
                                            </Grid>
                                        </StackPanel>

                                        <!--  CheckBoxes  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Selection Controls" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <WrapPanel>
                                                <StackPanel Spacing="8">
                                                    <CheckBox Content="Unchecked option" Theme="{StaticResource CustomCheckBoxTheme}" />
                                                    <CheckBox
                                                        Content="Checked option"
                                                        IsChecked="True"
                                                        Theme="{StaticResource CustomCheckBoxTheme}" />
                                                    <CheckBox
                                                        Content="Indeterminate option"
                                                        IsChecked="{x:Null}"
                                                        IsThreeState="True"
                                                        Theme="{StaticResource CustomCheckBoxTheme}" />
                                                    <CheckBox
                                                        Content="Disabled option"
                                                        IsEnabled="False"
                                                        Theme="{StaticResource CustomCheckBoxTheme}" />
                                                </StackPanel>
                                            </WrapPanel>
                                        </StackPanel>

                                        <!--  ComboBoxes  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Dropdown Controls" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>
                                                <StackPanel
                                                    Grid.Column="0"
                                                    Margin="0,0,10,0"
                                                    Spacing="10">
                                                    <TextBlock Text="Sample ComboBox:" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <ComboBox PlaceholderText="Select an option...">
                                                        <ComboBoxItem>Option 1</ComboBoxItem>
                                                        <ComboBoxItem>Option 2</ComboBoxItem>
                                                        <ComboBoxItem>Option 3</ComboBoxItem>
                                                        <ComboBoxItem>Very Long Option Name Example</ComboBoxItem>
                                                    </ComboBox>
                                                </StackPanel>
                                                <StackPanel Grid.Column="1" Spacing="10">
                                                    <TextBlock Text="With Selected Item:" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <ComboBox SelectedIndex="1">
                                                        <ComboBoxItem>First Choice</ComboBoxItem>
                                                        <ComboBoxItem>Selected Choice</ComboBoxItem>
                                                        <ComboBoxItem>Third Choice</ComboBoxItem>
                                                    </ComboBox>
                                                </StackPanel>
                                            </Grid>
                                        </StackPanel>
                                    </StackPanel>
                                </ScrollViewer>
                            </TabItem>

                            <!--  Layout & Containers Tab  -->
                            <TabItem Header="Layout Containers">
                                <ScrollViewer Padding="20">
                                    <StackPanel Spacing="25">
                                        <!--  Borders and Containers  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Border Themes" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>

                                                <Border
                                                    Grid.Column="0"
                                                    Margin="5"
                                                    Theme="{StaticResource DefaultBorderTheme}">
                                                    <StackPanel Spacing="8">
                                                        <TextBlock Text="Default Border" Theme="{StaticResource LabelTextBlockTheme}" />
                                                        <TextBlock Text="Standard container with padding and rounded corners." Theme="{StaticResource CaptionTextBlockTheme}" />
                                                    </StackPanel>
                                                </Border>

                                                <Border
                                                    Grid.Column="1"
                                                    Margin="5"
                                                    Theme="{StaticResource CardBorderTheme}">
                                                    <StackPanel Spacing="8">
                                                        <TextBlock Text="Card Border" Theme="{StaticResource LabelTextBlockTheme}" />
                                                        <TextBlock Text="Card-style container with subtle shadow effect." Theme="{StaticResource CaptionTextBlockTheme}" />
                                                    </StackPanel>
                                                </Border>

                                                <Border
                                                    Grid.Column="2"
                                                    Margin="5"
                                                    Theme="{StaticResource StatusBarBorderTheme}">
                                                    <StackPanel Spacing="8">
                                                        <TextBlock Text="Status Bar Border" Theme="{StaticResource LabelTextBlockTheme}" />
                                                        <TextBlock Text="Minimal border for status areas." Theme="{StaticResource CaptionTextBlockTheme}" />
                                                    </StackPanel>
                                                </Border>
                                            </Grid>
                                        </StackPanel>

                                        <!--  Expander  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Expandable Content" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>

                                                <Expander
                                                    Grid.Column="0"
                                                    Margin="5"
                                                    Header="Theme Configuration"
                                                    Theme="{StaticResource ResumeForgeExpanderTheme}">
                                                    <StackPanel Spacing="10">
                                                        <TextBlock Text="Expanded content area with theme settings and options." />
                                                        <Button Content="Sample Action" Theme="{StaticResource SecondaryButtonTheme}" />
                                                        <CheckBox Content="Enable advanced features" />
                                                    </StackPanel>
                                                </Expander>

                                                <Expander
                                                    Grid.Column="1"
                                                    Margin="5"
                                                    ExpandDirection="Up"
                                                    Header="Advanced Options"
                                                    IsExpanded="True"
                                                    Theme="{StaticResource ResumeForgeExpanderTheme}">
                                                    <StackPanel Spacing="10">
                                                        <TextBlock Text="This expander opens upward and is initially expanded." />
                                                        <Separator />
                                                        <TextBlock Text="Additional configuration options would go here." />
                                                    </StackPanel>
                                                </Expander>
                                            </Grid>
                                        </StackPanel>

                                        <!--  Separators  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Separators" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <TextBlock Text="Content above separator" />
                                            <Separator Theme="{StaticResource HorizontalSeparatorTheme}" />
                                            <TextBlock Text="Content below separator" />
                                        </StackPanel>
                                    </StackPanel>
                                </ScrollViewer>
                            </TabItem>

                            <!--  Icons & Status Tab  -->
                            <TabItem Header="Icons Status">
                                <ScrollViewer Padding="20">
                                    <StackPanel Spacing="25">
                                        <!--  Application Icons  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Application Icons" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                    <ColumnDefinition Width="*" />
                                                </Grid.ColumnDefinitions>

                                                <StackPanel Grid.Column="0" Spacing="15">
                                                    <TextBlock Text="System Icons" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <StackPanel Spacing="8">
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.FileGeometry}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="File" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.FolderGeometry}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Folder" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.SearchGeometry}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Search" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Settings" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </StackPanel>

                                                <StackPanel Grid.Column="1" Spacing="15">
                                                    <TextBlock Text="Status Icons" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <StackPanel Spacing="8">
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.InformationGeometry}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Information" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.WarningGeometry}"
                                                                Fill="{DynamicResource WarningBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Warning" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.ErrorGeometry}"
                                                                Fill="{DynamicResource ErrorBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Error" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.SuccessGeometry}"
                                                                Fill="{DynamicResource SuccessBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Success" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </StackPanel>

                                                <StackPanel Grid.Column="2" Spacing="15">
                                                    <TextBlock Text="Media Icons" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <StackPanel Spacing="8">
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.Image}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Image" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.Video}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Video" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.Audio}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Audio" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.Archive}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Archive" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </StackPanel>

                                                <StackPanel Grid.Column="3" Spacing="15">
                                                    <TextBlock Text="Document Icons" Theme="{StaticResource LabelTextBlockTheme}" />
                                                    <StackPanel Spacing="8">
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.WordDocument}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Word Doc" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.ExcelDocument}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Excel Doc" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.PdfDocument}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="PDF Doc" />
                                                        </StackPanel>
                                                        <StackPanel Orientation="Horizontal" Spacing="10">
                                                            <Path
                                                                Width="20"
                                                                Height="20"
                                                                Data="{x:Static icons:ApplicationIcons.Code}"
                                                                Fill="{DynamicResource AccentBlueBrush}"
                                                                Stretch="Uniform" />
                                                            <TextBlock VerticalAlignment="Center" Text="Code File" />
                                                        </StackPanel>
                                                    </StackPanel>
                                                </StackPanel>
                                            </Grid>
                                        </StackPanel>

                                        <!--  Status Messages  -->
                                        <StackPanel Spacing="15">
                                            <TextBlock Text="Status Messages" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                            <StackPanel Spacing="10">
                                                <Border
                                                    Padding="12,8"
                                                    Background="{DynamicResource BackgroundLightBrush}"
                                                    BorderBrush="{DynamicResource AccentBlueBrush}"
                                                    BorderThickness="1,0,0,0"
                                                    CornerRadius="2">
                                                    <StackPanel Orientation="Horizontal" Spacing="10">
                                                        <Path
                                                            Width="16"
                                                            Height="16"
                                                            Data="{x:Static icons:ApplicationIcons.InformationGeometry}"
                                                            Fill="{DynamicResource AccentBlueBrush}"
                                                            Stretch="Uniform" />
                                                        <TextBlock VerticalAlignment="Center" Text="Information: Theme loaded successfully." />
                                                    </StackPanel>
                                                </Border>

                                                <Border
                                                    Padding="12,8"
                                                    Background="{DynamicResource BackgroundLightBrush}"
                                                    BorderBrush="{DynamicResource WarningBrush}"
                                                    BorderThickness="1,0,0,0"
                                                    CornerRadius="2">
                                                    <StackPanel Orientation="Horizontal" Spacing="10">
                                                        <Path
                                                            Width="16"
                                                            Height="16"
                                                            Data="{x:Static icons:ApplicationIcons.WarningGeometry}"
                                                            Fill="{DynamicResource WarningBrush}"
                                                            Stretch="Uniform" />
                                                        <TextBlock VerticalAlignment="Center" Text="Warning: Theme validation found minor issues." />
                                                    </StackPanel>
                                                </Border>

                                                <Border
                                                    Padding="12,8"
                                                    Background="{DynamicResource BackgroundLightBrush}"
                                                    BorderBrush="{DynamicResource ErrorBrush}"
                                                    BorderThickness="1,0,0,0"
                                                    CornerRadius="2">
                                                    <StackPanel Orientation="Horizontal" Spacing="10">
                                                        <Path
                                                            Width="16"
                                                            Height="16"
                                                            Data="{x:Static icons:ApplicationIcons.ErrorGeometry}"
                                                            Fill="{DynamicResource ErrorBrush}"
                                                            Stretch="Uniform" />
                                                        <TextBlock VerticalAlignment="Center" Text="Error: Failed to import theme file." />
                                                    </StackPanel>
                                                </Border>

                                                <Border
                                                    Padding="12,8"
                                                    Background="{DynamicResource BackgroundLightBrush}"
                                                    BorderBrush="{DynamicResource SuccessBrush}"
                                                    BorderThickness="1,0,0,0"
                                                    CornerRadius="2">
                                                    <StackPanel Orientation="Horizontal" Spacing="10">
                                                        <Path
                                                            Width="16"
                                                            Height="16"
                                                            Data="{x:Static icons:ApplicationIcons.SuccessGeometry}"
                                                            Fill="{DynamicResource SuccessBrush}"
                                                            Stretch="Uniform" />
                                                        <TextBlock VerticalAlignment="Center" Text="Success: Theme exported successfully." />
                                                    </StackPanel>
                                                </Border>
                                            </StackPanel>
                                        </StackPanel>
                                    </StackPanel>
                                </ScrollViewer>
                            </TabItem>
                        </TabControl>
                    </StackPanel>
                </Border>

                <!--  Color Palette Showcase  -->
                <Border Theme="{StaticResource CardBorderTheme}">
                    <StackPanel Spacing="20">
                        <TextBlock Text="Current Theme Color Palette" Theme="{StaticResource SectionHeaderTheme}" />

                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!--  Primary Colors  -->
                            <StackPanel Grid.Row="0" Spacing="10">
                                <TextBlock Text="Primary Colors" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                <WrapPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource BackgroundBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Background" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource BackgroundLightBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Background Light" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource AccentBlueBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Accent" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource TextPrimaryBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Primary Text" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource TextSecondaryBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Secondary Text" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource BorderBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Border" />
                                    </StackPanel>
                                </WrapPanel>
                            </StackPanel>

                            <!--  Status Colors  -->
                            <StackPanel
                                Grid.Row="1"
                                Margin="0,20,0,0"
                                Spacing="10">
                                <TextBlock Text="Status Colors" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                <WrapPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource ErrorBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Error" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource WarningBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Warning" />
                                    </StackPanel>
                                    <StackPanel Spacing="5">
                                        <Border
                                            Width="60"
                                            Height="60"
                                            Background="{DynamicResource SuccessBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                        <TextBlock
                                            HorizontalAlignment="Center"
                                            FontSize="10"
                                            Text="Success" />
                                    </StackPanel>
                                </WrapPanel>
                            </StackPanel>
                        </Grid>
                    </StackPanel>
                </Border>

                <!--  Interactive Demo Section  -->
                <Border Margin="0,0,0,0" Theme="{StaticResource CardBorderTheme}">
                    <StackPanel>
                        <TextBlock Text="Interactive Demo" Theme="{StaticResource SectionHeaderTheme}" />

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <StackPanel Grid.Column="0" Margin="0,0,10,0">
                                <TextBlock Text="Theme Actions" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                <StackPanel Spacing="10">
                                    <Button
                                        Click="OpenThemeSettings_Click"
                                        Content="Open Theme Settings Dialog"
                                        Theme="{StaticResource PrimaryButtonTheme}" />
                                    <Button
                                        Click="ShowValidationDemo_Click"
                                        Content="Show Validation Dialog Demo"
                                        Theme="{StaticResource SecondaryButtonTheme}" />
                                    <Button
                                        Click="ShowErrorDemo_Click"
                                        Content="Show Error Dialog Demo"
                                        Theme="{StaticResource SecondaryButtonTheme}" />
                                    <Button
                                        Click="ShowConfirmationDemo_Click"
                                        Content="Show Confirmation Dialog Demo"
                                        Theme="{StaticResource SecondaryButtonTheme}" />
                                </StackPanel>
                            </StackPanel>

                            <StackPanel Grid.Column="1" Spacing="15">
                                <TextBlock Text="Quick Info" Theme="{StaticResource SubheaderTextBlockTheme}" />
                                <Border
                                    Padding="15"
                                    Background="{DynamicResource BackgroundLightBrush}"
                                    BorderBrush="{DynamicResource BorderBrush}"
                                    BorderThickness="1"
                                    CornerRadius="4">
                                    <StackPanel Spacing="8">
                                        <TextBlock FontWeight="Medium" Text="Available Features:" />
                                        <TextBlock
                                            FontSize="11"
                                            Text="• 7 Built-in Themes"
                                            Theme="{StaticResource CaptionTextBlockTheme}" />
                                        <TextBlock
                                            FontSize="11"
                                            Text="• 50+ SVG Icons"
                                            Theme="{StaticResource CaptionTextBlockTheme}" />
                                        <TextBlock
                                            FontSize="11"
                                            Text="• Comprehensive Control Themes"
                                            Theme="{StaticResource CaptionTextBlockTheme}" />
                                        <TextBlock
                                            FontSize="11"
                                            Text="• Typography System"
                                            Theme="{StaticResource CaptionTextBlockTheme}" />
                                        <TextBlock
                                            FontSize="11"
                                            Text="• Theme Import/Export"
                                            Theme="{StaticResource CaptionTextBlockTheme}" />
                                        <TextBlock
                                            FontSize="11"
                                            Text="• WCAG Accessibility Validation"
                                            Theme="{StaticResource CaptionTextBlockTheme}" />
                                    </StackPanel>
                                </Border>
                            </StackPanel>
                        </Grid>
                    </StackPanel>
                </Border>
            </StackPanel>
        </ScrollViewer>

        <!--  Status Bar  -->
        <Border
            Grid.Row="2"
            Margin="0,0"
            Theme="{StaticResource StatusBarBorderTheme}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <StackPanel
                    Grid.Column="0"
                    Orientation="Horizontal"
                    Spacing="15">
                    <TextBlock Text="Ready - All theme components loaded successfully" Theme="{StaticResource StatusBarMainTextTheme}" />
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <Path
                            Width="12"
                            Height="12"
                            Data="{x:Static icons:ApplicationIcons.SuccessGeometry}"
                            Fill="{DynamicResource SuccessBrush}"
                            Stretch="Uniform" />
                        <TextBlock Text="Theme validation passed" Theme="{StaticResource StatusBarMainTextTheme}" />
                    </StackPanel>
                </StackPanel>

                <StackPanel
                    Grid.Column="1"
                    Orientation="Horizontal"
                    Spacing="10">
                    <TextBlock Text="Version 1.0" Theme="{StaticResource StatusBarMainTextTheme}" />
                    <Separator
                        Width="1"
                        Height="16"
                        Background="{DynamicResource BorderBrush}" />
                    <TextBlock Text="Avalonia 11.3.0" Theme="{StaticResource StatusBarMainTextTheme}" />
                </StackPanel>
            </Grid>
        </Border>
    </Grid>
</UserControl>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ThemeManagerDemoView.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Interactivity;
using Avalonia.Platform.Storage;
using AvaloniaThemeManager.Services;
using AvaloniaThemeManager.Services.Interfaces;
using AvaloniaThemeManager.Theme;
using AvaloniaThemeManager.Theme.AvaloniaThemeManager.Theme;
using AvaloniaThemeManager.Utility;
using AvaloniaThemeManager.ViewModels;
using Microsoft.Extensions.Logging;

namespace AvaloniaThemeManager.Views
{
    /// <summary>
    /// Comprehensive demo view showcasing all AvaloniaThemeManager functionality.
    /// Demonstrates theme switching, control themes, icons, typography, and interactive features.
    /// </summary>
    /// <remarks>
    /// This view serves as both a demonstration and testing interface for all theme manager capabilities.
    /// It follows MVVM patterns while providing direct interaction with theme management services.
    /// </remarks>
    public partial class ThemeManagerDemoView : UserControl
    {
        private readonly ILogger _logger;
        private readonly IDialogService? _errorDialogService;

        /// <summary>
        /// Initializes a new instance of the ThemeManagerDemoView with default services.
        /// </summary>
        public ThemeManagerDemoView() : this(
            Microsoft.Extensions.Logging.Abstractions.NullLogger.Instance,
            null)
        {

            
        }

        /// <summary>
        /// Initializes a new instance of the ThemeManagerDemoView with dependency injection support.
        /// </summary>
        /// <param name="logger">Logger instance for tracking demo interactions and errors</param>
        /// <param name="errorDialogService">Service for displaying error dialogs (optional)</param>
        public ThemeManagerDemoView(ILogger logger, IDialogService? errorDialogService = null)
        {
            _logger = logger;
            _errorDialogService = errorDialogService;

            InitializeComponent();
            InitializeDemo();
        }

        /// <summary>
        /// Initializes the demo view with proper data context and event handlers.
        /// </summary>
        private void InitializeDemo()
        {
            try
            {
                // Set up the data context with the QuickThemeSwitcher ViewModel
                DataContext = new QuickThemeSwitcherViewModel(_logger);

                // Subscribe to theme changes for logging
                SkinManager.Instance.SkinChanged += OnThemeChanged;

                _logger.LogInformation("ThemeManagerDemoView initialized successfully");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to initialize ThemeManagerDemoView");
                ShowErrorMessage("Initialization Error", "Failed to initialize the demo view", ex);
            }
        }

        /// <summary>
        /// Handles theme change events for logging and demo purposes.
        /// </summary>
        private void OnThemeChanged(object? sender, EventArgs e)
        {
            try
            {
                var currentTheme = SkinManager.Instance.CurrentSkin?.Name ?? "Unknown";
                _logger.LogInformation("Theme changed to: {ThemeName}", currentTheme);
                                
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error handling theme change event");
            }
        }

        #region Event Handlers

        /// <summary>
        /// Opens the theme settings dialog for comprehensive theme management.
        /// </summary>
        private void OpenThemeSettings_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogDebug("Opening theme settings dialog");

                var mainWindow = WindowTools.GetMainWindow();
                if (mainWindow != null) new ThemeSettingsDialog().Show(mainWindow);

                _logger.LogInformation("Theme settings dialog closed");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to open theme settings dialog");
                ShowErrorMessage("Dialog Error", "Failed to open theme settings dialog", ex);
            }
        }

        /// <summary>
        /// Demonstrates theme export functionality.
        /// </summary>
        /// <summary>
        /// Demonstrates theme export functionality using modern StorageProvider API.
        /// </summary>
        private async void ExportTheme_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogDebug("Starting theme export demo");

                var currentSkin = SkinManager.Instance.CurrentSkin;
                if (currentSkin == null)
                {
                    ShowWarningMessage("Export Warning", "No theme is currently active to export.");
                    return;
                }

                var mainWindow = WindowTools.GetMainWindow();
                if (mainWindow?.StorageProvider == null)
                {
                    ShowErrorMessage("Storage Error", "Storage provider is not available.");
                    return;
                }

                // Define file type options
                var fileTypeChoices = new FilePickerFileType[]
                {
            new("Theme Files")
            {
                Patterns = new[] { "*.json" },
                MimeTypes = new[] { "application/json" }
            },
            FilePickerFileTypes.All
                };

                // Show save file picker
                var saveOptions = new FilePickerSaveOptions
                {
                    Title = "Export Current Theme",
                    FileTypeChoices = fileTypeChoices,
                    SuggestedFileName = $"{currentSkin.Name}_Theme.json",
                    DefaultExtension = "json"
                };

                var result = await mainWindow.StorageProvider.SaveFilePickerAsync(saveOptions);

                if (result != null)
                {
                    var filePath = result.Path.LocalPath;
                    var success = await ThemeImportExport.ExportThemeAsync(
                        currentSkin,
                        filePath,
                        $"Exported from Theme Manager Demo on {DateTime.Now:yyyy-MM-dd}",
                        "Theme Manager Demo User"
                    );

                    if (success)
                    {
                        _logger.LogInformation("Theme exported successfully to: {FilePath}", filePath);
                        ShowSuccessMessage("Export Successful", $"Theme '{currentSkin.Name}' has been exported successfully.");
                    }
                    else
                    {
                        _logger.LogError("Theme export failed to: {FilePath}", filePath);
                        ShowErrorMessage("Export Failed", "Failed to export the current theme. Please check the file path and permissions.");
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception during theme export");
                ShowErrorMessage("Export Error", "An error occurred while exporting the theme", ex);
            }
        }

        /// <summary>
        /// Demonstrates theme import functionality using modern StorageProvider API.
        /// </summary>
        private async void ImportTheme_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogDebug("Starting theme import demo");

                var mainWindow = WindowTools.GetMainWindow();
                if (mainWindow?.StorageProvider == null)
                {
                    ShowErrorMessage("Storage Error", "Storage provider is not available.");
                    return;
                }

                // Define file type options
                var fileTypeChoices = new FilePickerFileType[]
                {
            new("Theme Files")
            {
                Patterns = new[] { "*.json" },
                MimeTypes = new[] { "application/json" }
            },
            FilePickerFileTypes.All
                };

                // Show open file picker
                var openOptions = new FilePickerOpenOptions
                {
                    Title = "Import Theme",
                    FileTypeFilter = fileTypeChoices,
                    AllowMultiple = false
                };

                var result = await mainWindow.StorageProvider.OpenFilePickerAsync(openOptions);

                if (result.Count > 0)
                {
                    var filePath = result[0].Path.LocalPath;
                    var importResult = await ThemeImportExport.ImportThemeAsync(filePath);

                    if (importResult.Success && importResult.Theme != null)
                    {
                        // Register the imported theme
                        SkinManager.Instance.RegisterSkin(importResult.Theme.Name, importResult.Theme);

                        _logger.LogInformation("Theme imported successfully from: {FilePath}", filePath);
                        ShowSuccessMessage("Import Successful", $"Theme '{importResult.Theme.Name}' has been imported successfully.");

                        // Optionally apply the imported theme
                        SkinManager.Instance.ApplySkin(importResult.Theme.Name);
                    }
                    else
                    {
                        _logger.LogError("Theme import failed from: {FilePath}. Error: {Error}", filePath, importResult.ErrorMessage);

                        if (importResult.Warnings.Any())
                        {
                            await ShowValidationResults("Import Issues", new List<string> { importResult.ErrorMessage ?? "Unknown error" }, importResult.Warnings);
                        }
                        else
                        {
                            ShowErrorMessage("Import Failed", importResult.ErrorMessage ?? "Failed to import the theme file.");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception during theme import");
                ShowErrorMessage("Import Error", "An error occurred while importing the theme", ex);
            }
        }

        /// <summary>
        /// Shows validation results using the validation error dialog.
        /// </summary>
        private async Task ShowValidationResults(string title, IEnumerable<string> errors, IEnumerable<string> warnings)
        {
            try
            {
                var validationDialog = new ValidationErrorDialog
                {
                    Title = title
                };
                validationDialog.SetValidationResults(errors, warnings);
                await validationDialog.ShowDialog(WindowTools.GetMainWindow()!);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show validation results dialog");
            }
        }



        /// <summary>
        /// Demonstrates the validation error dialog with sample validation results.
        /// </summary>
        private async void ShowValidationDemo_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogDebug("Showing validation demo dialog");

                var validationDialog = new ValidationErrorDialog();

                // Create sample validation errors and warnings
                var sampleErrors = new List<string>
                {
                    "Primary text contrast ratio (3.2:1) is below WCAG AA standard (4.5:1)",
                    "Border color has insufficient contrast against secondary background (ratio: 1.4)",
                    "Theme name contains invalid characters"
                };

                var sampleWarnings = new List<string>
                {
                    "Primary text contrast ratio (5.1:1) is below WCAG AAA standard (7.0:1)",
                    "Medium and large font sizes are too similar for optimal visual hierarchy",
                    "Theme name is quite long (35 characters). Consider a shorter name for better UI display",
                    "Accent color is too similar to primary color (1.8:1). May not provide sufficient emphasis"
                };

                validationDialog.SetValidationResults(sampleErrors, sampleWarnings);
                await validationDialog.ShowDialog(WindowTools.GetMainWindow()!);

                _logger.LogInformation("Validation demo dialog closed");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show validation demo dialog");
                ShowErrorMessage("Demo Error", "Failed to show validation demo dialog", ex);
            }
        }

        /// <summary>
        /// Demonstrates the error dialog with a sample error.
        /// </summary>
        private async void ShowErrorDemo_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogDebug("Showing error demo dialog");

                var errorDialog = new ErrorDialog
                {
                    Title = "Demo Error Dialog",
                    Message = "This is a demonstration of the error dialog functionality. In a real scenario, this would show actual error information to help users understand and resolve issues.",
                    Exception = new InvalidOperationException("Sample exception for demonstration purposes. This shows how technical details are presented to users.")
                };

                await errorDialog.ShowDialog(WindowTools.GetMainWindow()!);

                _logger.LogInformation("Error demo dialog closed");
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show error demo dialog");
                ShowErrorMessage("Demo Error", "Failed to show error demo dialog", ex);
            }
        }

        /// <summary>
        /// Demonstrates the confirmation dialog functionality.
        /// </summary>
        private async void ShowConfirmationDemo_Click(object? sender, RoutedEventArgs e)
        {
            try
            {
                _logger.LogDebug("Showing confirmation demo dialog");

                var confirmationDialog = new ConfirmationDialog
                {
                    Title = "Demo Confirmation",
                    Message = "This is a demonstration of the confirmation dialog. Would you like to proceed with this demo action?",
                    ConfirmText = "Yes, Proceed",
                    CancelText = "Cancel"
                };

                var result = await confirmationDialog.ShowDialog(WindowTools.GetMainWindow());

                var resultText = result == true ? "confirmed" : "cancelled";
                _logger.LogInformation("Confirmation demo result: {Result}", resultText);

                // Show the result to the user
                if (result == true)
                {
                    ShowSuccessMessage("Demo Result", "You confirmed the demo action!");
                }
                else
                {
                    ShowInfoMessage("Demo Result", "You cancelled the demo action.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show confirmation demo dialog");
                ShowErrorMessage("Demo Error", "Failed to show confirmation demo dialog", ex);
            }
        }

        #endregion

        #region Helper Methods

        /// <summary>
        /// Shows an error message using the available error dialog service or a fallback dialog.
        /// </summary>
        private async void ShowErrorMessage(string title, string message, Exception? exception = null)
        {
            try
            {
                if (_errorDialogService != null)
                {
                    await _errorDialogService.ShowErrorAsync(title, message, exception);
                }
                else
                {
                    var errorDialog = new ErrorDialog
                    {
                        Title = title,
                        Message = message,
                        Exception = exception
                    };
                    await errorDialog.ShowDialog(WindowTools.GetMainWindow()!);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show error dialog");
                // Last resort: try a simple message box if available
            }
        }

        /// <summary>
        /// Shows a warning message using the available dialog service or a fallback dialog.
        /// </summary>
        private async void ShowWarningMessage(string title, string message)
        {
            try
            {
                if (_errorDialogService != null)
                {
                    await _errorDialogService.ShowWarningAsync(title, message);
                }
                else
                {
                    var warningDialog = new NotificationDialog
                    {
                        Title = title,
                        Message = message,
                        DialogType = NotificationDialogType.Warning
                    };
                    await warningDialog.ShowDialog(WindowTools.GetMainWindow()!);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show warning dialog");
            }
        }

        /// <summary>
        /// Shows an information message using the available dialog service or a fallback dialog.
        /// </summary>
        private async void ShowInfoMessage(string title, string message)
        {
            try
            {
                if (_errorDialogService != null)
                {
                    await _errorDialogService.ShowInfoAsync(title, message);
                }
                else
                {
                    var infoDialog = new NotificationDialog
                    {
                        Title = title,
                        Message = message,
                        DialogType = NotificationDialogType.Information
                    };
                    await infoDialog.ShowDialog(WindowTools.GetMainWindow()!);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show info dialog");
            }
        }

        /// <summary>
        /// Shows a success message using a notification dialog.
        /// </summary>
        private async void ShowSuccessMessage(string title, string message)
        {
            try
            {
                var successDialog = new NotificationDialog
                {
                    Title = title,
                    Message = message,
                    DialogType = NotificationDialogType.Information // Using Information type styled as success
                };
                await successDialog.ShowDialog(WindowTools.GetMainWindow()!);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to show success dialog");
            }
        }

        #endregion

    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ThemeSettingsDialog.axaml
================================================================================

<Window
    x:Class="AvaloniaThemeManager.Views.ThemeSettingsDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:icons="clr-namespace:AvaloniaThemeManager.Icons"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:AvaloniaThemeManager.ViewModels"
    Title="Theme Settings"
    d:DesignHeight="500"
    d:DesignWidth="600"
    x:DataType="vm:ThemeSettingsViewModel"
    Background="{DynamicResource BackgroundBrush}"
    Icon="avares://AvaloniaThemeManager/Icons/Assets/jonBuilt.ico"
    SizeToContent="WidthAndHeight"
    WindowStartupLocation="CenterOwner"
    mc:Ignorable="d">

    <Design.DataContext>
        <vm:ThemeSettingsViewModel />
    </Design.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1">
            <StackPanel Spacing="10">
                <StackPanel Orientation="Horizontal" Spacing="10">
                    <Path
                        Width="24"
                        Height="24"
                        Data="{x:Static icons:ApplicationIcons.SettingsGeometry}"
                        Fill="{DynamicResource AccentBlueBrush}"
                        Stretch="Uniform" />
                    <TextBlock
                        VerticalAlignment="Center"
                        FontSize="20"
                        FontWeight="Bold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Theme Settings" />
                </StackPanel>

                <TextBlock
                    FontSize="12"
                    Foreground="{DynamicResource TextSecondaryBrush}"
                    Text="Customize the appearance of Drive Space Analyzer. Changes take effect immediately."
                    TextWrapping="Wrap" />
            </StackPanel>
        </Border>

        <Border Grid.Row="1" Padding="20">
            <!--  Main Content  -->
            <StackPanel Spacing="25">

                <!--  Current Theme Selection  -->
                <StackPanel Spacing="15">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Select Theme" />

                    <ComboBox
                        MinWidth="200"
                        Background="{DynamicResource BackgroundLightBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        ItemsSource="{Binding AvailableThemes}"
                        SelectedItem="{Binding SelectedTheme}">
                        <ComboBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal" Spacing="10">
                                    <Ellipse
                                        Width="16"
                                        Height="16"
                                        VerticalAlignment="Center"
                                        Fill="{Binding PreviewColor}" />
                                    <TextBlock
                                        VerticalAlignment="Center"
                                        FontWeight="Medium"
                                        Text="{Binding Name}" />
                                </StackPanel>
                            </DataTemplate>
                        </ComboBox.ItemTemplate>
                    </ComboBox>
                </StackPanel>

                <!--  Theme Preview Grid  -->
                <StackPanel Spacing="15">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Theme Preview" />

                    <Border
                        Padding="20"
                        Background="{DynamicResource BackgroundBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="8">
                        <StackPanel Spacing="15">

                            <!--  Color Swatches  -->
                            <StackPanel Spacing="10">
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Color Palette" />

                                <WrapPanel>
                                    <!--  Primary Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Primary" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource BackgroundBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <!--  Secondary Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Secondary" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource BackgroundLightBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <!--  Accent Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Accent" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource AccentBlueBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <!--  Status Colors  -->
                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Error" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource ErrorBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <StackPanel Margin="0,0,15,0" Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Warning" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource WarningBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>

                                    <StackPanel Spacing="5">
                                        <TextBlock
                                            FontSize="11"
                                            Foreground="{DynamicResource TextSecondaryBrush}"
                                            Text="Success" />
                                        <Border
                                            Width="40"
                                            Height="40"
                                            Background="{DynamicResource SuccessBrush}"
                                            BorderBrush="{DynamicResource BorderBrush}"
                                            BorderThickness="1"
                                            CornerRadius="4" />
                                    </StackPanel>
                                </WrapPanel>
                            </StackPanel>

                            <!--  UI Elements Preview  -->
                            <StackPanel Spacing="10">
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="UI Elements" />

                                <StackPanel Orientation="Horizontal" Spacing="10">
                                    <Button
                                        Padding="12,6"
                                        Background="{DynamicResource AccentBlueBrush}"
                                        Content="Primary Button"
                                        Foreground="{DynamicResource TextPrimaryBrush}" />

                                    <Button
                                        Padding="12,6"
                                        Background="{DynamicResource BackgroundLightBrush}"
                                        BorderBrush="{DynamicResource BorderBrush}"
                                        Content="Secondary Button"
                                        Foreground="{DynamicResource TextPrimaryBrush}" />
                                </StackPanel>

                                <TextBox
                                    Width="200"
                                    Background="{DynamicResource BackgroundLightBrush}"
                                    BorderBrush="{DynamicResource BorderBrush}"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Sample text input"
                                    Watermark="Placeholder text..." />

                                <CheckBox
                                    Content="Sample checkbox"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    IsChecked="True" />
                            </StackPanel>

                            <!--  Text Preview  -->
                            <StackPanel Spacing="8">
                                <TextBlock
                                    FontSize="14"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Typography" />

                                <TextBlock
                                    FontSize="16"
                                    FontWeight="Bold"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Primary Heading Text" />

                                <TextBlock
                                    FontSize="14"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="Regular body text that would appear in the application interface." />

                                <TextBlock
                                    FontSize="12"
                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                    Text="Secondary text used for descriptions and less important information." />
                            </StackPanel>
                        </StackPanel>
                    </Border>
                </StackPanel>

                <!--  Theme Information  -->
                <StackPanel Spacing="10">
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Theme Information" />

                    <Border
                        Padding="15"
                        Background="{DynamicResource BackgroundLightBrush}"
                        BorderBrush="{DynamicResource BorderBrush}"
                        BorderThickness="1"
                        CornerRadius="4">
                        <StackPanel Spacing="8">
                            <StackPanel Orientation="Horizontal" Spacing="8">
                                <TextBlock
                                    FontSize="12"
                                    FontWeight="Medium"
                                    Foreground="{DynamicResource TextSecondaryBrush}"
                                    Text="Selected Theme:" />
                                <TextBlock
                                    FontSize="12"
                                    Foreground="{DynamicResource TextPrimaryBrush}"
                                    Text="{Binding SelectedTheme.Name}" />
                            </StackPanel>

                            <TextBlock
                                FontSize="11"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="{Binding SelectedTheme.Description}"
                                TextWrapping="Wrap" />
                        </StackPanel>
                    </Border>
                </StackPanel>

            </StackPanel>
        </Border>
        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">
                <Button
                    Padding="15,8"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    Click="ResetButton_Click"
                    Content="Reset to Default"
                    Foreground="{DynamicResource TextPrimaryBrush}" />
                <Button
                    Padding="15,8"
                    Background="{DynamicResource BackgroundLightBrush}"
                    BorderBrush="{DynamicResource BorderBrush}"
                    Click="CloseButton_Click"
                    Content="Close"
                    Foreground="{DynamicResource TextPrimaryBrush}" />
                <Button
                    Padding="15,8"
                    Background="{DynamicResource AccentBlueBrush}"
                    Classes="accent"
                    Command="{Binding ApplyThemeCommand}"
                    Content="Apply Theme"
                    Foreground="{DynamicResource TextPrimaryBrush}" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ThemeSettingsDialog.axaml.cs
================================================================================

using Avalonia.Controls;
using Avalonia.Interactivity;
using AvaloniaThemeManager.ViewModels;

namespace AvaloniaThemeManager.Views;

/// <summary>
/// Represents a dialog window for managing theme settings in the application.
/// </summary>
/// <remarks>
/// This class provides a user interface for selecting, applying, and resetting themes.
/// It is backed by the <see cref="AvaloniaThemeManager.ViewModels.ThemeSettingsViewModel"/> 
/// to handle the logic and data binding for theme management.
/// </remarks>
public partial class ThemeSettingsDialog : Window
{
    /// <summary>
    /// Initializes a new instance of the <see cref="ThemeSettingsDialog"/> class.
    /// </summary>
    /// <remarks>
    /// This constructor sets up the dialog by initializing its components and 
    /// assigning a new instance of <see cref="ThemeSettingsViewModel"/> as its data context.
    /// </remarks>
    public ThemeSettingsDialog()
    {
        InitializeComponent();
        DataContext = new ThemeSettingsViewModel();
    }

    private void ResetButton_Click(object? sender, RoutedEventArgs e)
    {
        if (DataContext is ThemeSettingsViewModel viewModel)
        {
            viewModel.ResetToDefault();
        }
    }

    private void CloseButton_Click(object? sender, RoutedEventArgs e)
    {
        Close();

    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ValidationErrorDialog.axaml
================================================================================

<Window
    x:Class="AvaloniaThemeManager.Views.ValidationErrorDialog"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:icons="clr-namespace:AvaloniaThemeManager.Icons"
    Title="Validation Errors"
    MinHeight="300"
    Background="{DynamicResource BackgroundBrush}"
    CanResize="True"
    Icon="avares://AvaloniaThemeManager/Icons/Assets/jonBuilt.ico"
    ShowInTaskbar="False"
    SizeToContent="WidthAndHeight"
    WindowStartupLocation="CenterOwner">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!--  Header  -->
        <Border
            Grid.Row="0"
            Padding="20,15"
            Background="{DynamicResource ErrorBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,0,0,1">
            <StackPanel Orientation="Horizontal" Spacing="12">
                <Path
                    Width="24"
                    Height="24"
                    Data="{x:Static icons:ApplicationIcons.WarningGeometry}"
                    Fill="{DynamicResource TextPrimaryBrush}"
                    Stretch="Uniform" />
                <TextBlock
                    x:Name="TitleText"
                    VerticalAlignment="Center"
                    FontSize="16"
                    FontWeight="Bold"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    Text="Validation Issues" />
            </StackPanel>
        </Border>

        <!--  Content  -->
        <StackPanel
            Grid.Row="1"
            Margin="20"
            Spacing="20">

            <!--  Summary  -->
            <Border
                Padding="15"
                Background="{DynamicResource BackgroundLightBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1"
                CornerRadius="4">
                <StackPanel Spacing="8">
                    <TextBlock
                        FontSize="14"
                        FontWeight="Medium"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="Validation Summary" />
                    <StackPanel Orientation="Horizontal" Spacing="20">
                        <StackPanel Orientation="Horizontal" Spacing="5">
                            <Path
                                Width="16"
                                Height="16"
                                Data="{x:Static icons:ApplicationIcons.ErrorGeometry}"
                                Fill="{DynamicResource ErrorBrush}"
                                Stretch="Uniform" />
                            <TextBlock
                                x:Name="ErrorCountText"
                                FontSize="12"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="0 Errors" />
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Spacing="5">
                            <Path
                                Width="16"
                                Height="16"
                                Data="{x:Static icons:ApplicationIcons.WarningGeometry}"
                                Fill="{DynamicResource WarningBrush}"
                                Stretch="Uniform" />
                            <TextBlock
                                x:Name="WarningCountText"
                                FontSize="12"
                                Foreground="{DynamicResource TextSecondaryBrush}"
                                Text="0 Warnings" />
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
            </Border>

            <!--  Errors Section  -->
            <StackPanel x:Name="ErrorsSection" Spacing="10">
                <StackPanel
                    x:Name="ErrorsHeader"
                    Orientation="Horizontal"
                    Spacing="8">
                    <Path
                        Width="20"
                        Height="20"
                        Data="{x:Static icons:ApplicationIcons.ErrorGeometry}"
                        Fill="{DynamicResource ErrorBrush}"
                        Stretch="Uniform" />
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource ErrorBrush}"
                        Text="Errors" />
                </StackPanel>

                <ScrollViewer MaxHeight="150" VerticalScrollBarVisibility="Auto">
                    <ItemsControl x:Name="ErrorsList">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border
                                    Margin="0,2"
                                    Padding="12,8"
                                    Background="{DynamicResource BackgroundLightBrush}"
                                    BorderBrush="{DynamicResource ErrorBrush}"
                                    BorderThickness="1,0,0,0"
                                    CornerRadius="2">
                                    <StackPanel Orientation="Horizontal" Spacing="8">
                                        <Path
                                            Width="14"
                                            Height="14"
                                            VerticalAlignment="Top"
                                            Data="{x:Static icons:ApplicationIcons.ErrorGeometry}"
                                            Fill="{DynamicResource ErrorBrush}"
                                            Stretch="Uniform" />
                                        <TextBlock
                                            FontSize="12"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="{Binding}"
                                            TextWrapping="Wrap" />
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
            </StackPanel>

            <!--  Warnings Section  -->
            <StackPanel x:Name="WarningsSection" Spacing="10">
                <StackPanel
                    x:Name="WarningsHeader"
                    Orientation="Horizontal"
                    Spacing="8">
                    <Path
                        Width="20"
                        Height="20"
                        Data="{x:Static icons:ApplicationIcons.WarningGeometry}"
                        Fill="{DynamicResource WarningBrush}"
                        Stretch="Uniform" />
                    <TextBlock
                        FontSize="16"
                        FontWeight="SemiBold"
                        Foreground="{DynamicResource WarningBrush}"
                        Text="Warnings" />
                </StackPanel>

                <ScrollViewer MaxHeight="150" VerticalScrollBarVisibility="Auto">
                    <ItemsControl x:Name="WarningsList">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Border
                                    Margin="0,2"
                                    Padding="12,8"
                                    Background="{DynamicResource BackgroundLightBrush}"
                                    BorderBrush="{DynamicResource WarningBrush}"
                                    BorderThickness="1,0,0,0"
                                    CornerRadius="2">
                                    <StackPanel Orientation="Horizontal" Spacing="8">
                                        <Path
                                            Width="14"
                                            Height="14"
                                            VerticalAlignment="Top"
                                            Data="{x:Static icons:ApplicationIcons.WarningGeometry}"
                                            Fill="{DynamicResource WarningBrush}"
                                            Stretch="Uniform" />
                                        <TextBlock
                                            FontSize="12"
                                            Foreground="{DynamicResource TextPrimaryBrush}"
                                            Text="{Binding}"
                                            TextWrapping="Wrap" />
                                    </StackPanel>
                                </Border>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ScrollViewer>
            </StackPanel>

            <!--  Help Text  -->
            <Border
                Padding="15"
                Background="{DynamicResource BackgroundLightBrush}"
                BorderBrush="{DynamicResource BorderBrush}"
                BorderThickness="1"
                CornerRadius="4">
                <StackPanel Spacing="8">
                    <TextBlock
                        FontSize="12"
                        FontWeight="Medium"
                        Foreground="{DynamicResource TextPrimaryBrush}"
                        Text="What these mean:" />
                    <TextBlock
                        FontSize="11"
                        Foreground="{DynamicResource TextSecondaryBrush}"
                        Text="• Errors must be fixed before the theme can be applied"
                        TextWrapping="Wrap" />
                    <TextBlock
                        FontSize="11"
                        Foreground="{DynamicResource TextSecondaryBrush}"
                        Text="• Warnings indicate potential issues but don't prevent theme usage"
                        TextWrapping="Wrap" />
                    <TextBlock
                        FontSize="11"
                        Foreground="{DynamicResource TextSecondaryBrush}"
                        Text="• Fix these issues to ensure optimal appearance and accessibility"
                        TextWrapping="Wrap" />
                </StackPanel>
            </Border>

        </StackPanel>

        <!--  Footer  -->
        <Border
            Grid.Row="2"
            Padding="20,15"
            Background="{DynamicResource BackgroundLightBrush}"
            BorderBrush="{DynamicResource BorderBrush}"
            BorderThickness="0,1,0,0">
            <StackPanel
                HorizontalAlignment="Right"
                Orientation="Horizontal"
                Spacing="10">
                <Button
                    x:Name="CloseButton"
                    Padding="20,8"
                    Background="{DynamicResource AccentBlueBrush}"
                    Content="Close"
                    Foreground="{DynamicResource TextPrimaryBrush}"
                    IsDefault="True" />
            </StackPanel>
        </Border>
    </Grid>
</Window>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Views\ValidationErrorDialog.axaml.cs
================================================================================

using Avalonia;
using Avalonia.Controls;
using Avalonia.Controls.ApplicationLifetimes;
using Avalonia.Interactivity;
using AvaloniaThemeManager.Utility;

namespace AvaloniaThemeManager.Views
{
    /// <summary>
    /// A dialog for displaying validation errors and warnings in a structured format.
    /// </summary>
    public partial class ValidationErrorDialog : Window
    {
        /// <summary>
        /// Gets or sets the list of error messages to display.
        /// </summary>
        public List<string> Errors { get; set; } = new();

        /// <summary>
        /// Gets or sets the list of warning messages to display.
        /// </summary>
        public List<string> Warnings { get; set; } = new();

        /// <summary>
        /// Initializes a new instance of the ValidationErrorDialog class.
        /// </summary>
        public ValidationErrorDialog()
        {
            InitializeComponent();
            CloseButton.Click += CloseButton_Click;
        }

        /// <summary>
        /// Called when the window is opened to populate the dialog with error and warning data.
        /// </summary>
        protected override void OnOpened(EventArgs e)
        {
            base.OnOpened(e);
            PopulateValidationResults();
        }

        private void PopulateValidationResults()
        {
            // Update counts
            ErrorCountText.Text = $"{Errors.Count} Error{(Errors.Count != 1 ? "s" : "")}";
            WarningCountText.Text = $"{Warnings.Count} Warning{(Warnings.Count != 1 ? "s" : "")}";

            // Populate errors
            if (Errors.Any())
            {
                ErrorsList.ItemsSource = Errors;
                ErrorsSection.IsVisible = true;
            }
            else
            {
                ErrorsSection.IsVisible = false;
            }

            // Populate warnings
            if (Warnings.Any())
            {
                WarningsList.ItemsSource = Warnings;
                WarningsSection.IsVisible = true;
            }
            else
            {
                WarningsSection.IsVisible = false;
            }

            // Update title based on content
            if (Errors.Any() && Warnings.Any())
            {
                Title = "Validation Errors and Warnings";
                TitleText.Text = "Validation Issues";
            }
            else if (Errors.Any())
            {
                Title = "Validation Errors";
                TitleText.Text = "Validation Errors";
            }
            else if (Warnings.Any())
            {
                Title = "Validation Warnings";
                TitleText.Text = "Validation Warnings";
                // Change header color for warnings-only dialog
                var headerBorder = this.FindControl<Border>("HeaderBorder");
                if (headerBorder != null)
                {
                    headerBorder.Background = WindowTools.GetMainWindow()!.FindResource("WarningBrush") as Avalonia.Media.IBrush;
                }
            }
            else
            {
                Title = "Validation Complete";
                TitleText.Text = "No Issues Found";
                // Change header color for success
                var headerBorder = this.FindControl<Border>("HeaderBorder");
                if (headerBorder != null)
                {
                    headerBorder.Background = WindowTools.GetMainWindow()!.FindResource("SuccessBrush") as Avalonia.Media.IBrush;
                }
            }
        }

        private void CloseButton_Click(object? sender, RoutedEventArgs e)
        {
            Close();
        }

        /// <summary>
        /// Sets the validation results and updates the dialog display.
        /// </summary>
        /// <param name="errors">List of error messages</param>
        /// <param name="warnings">List of warning messages</param>
        public void SetValidationResults(IEnumerable<string> errors, IEnumerable<string> warnings)
        {
            Errors = errors.ToList();
            Warnings = warnings.ToList();

            if (IsVisible)
            {
                PopulateValidationResults();
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Services\Interfaces\IDialogService.cs
================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AvaloniaThemeManager.Services.Interfaces
{
    /// <summary>
    /// Provides methods for displaying various types of dialog messages, such as errors, warnings, informational messages, 
    /// validation errors, and confirmation prompts, to the user.
    /// </summary>
    public interface IDialogService
    {
        /// <summary>
        /// Displays an error dialog to the user with the specified title, message, and optional exception details.
        /// </summary>
        /// <param name="title">The title of the error dialog.</param>
        /// <param name="message">The message to display in the error dialog.</param>
        /// <param name="exception">An optional exception providing additional details about the error.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task ShowErrorAsync(string title, string message, Exception? exception = null);
        /// <summary>
        /// Displays a warning dialog to the user with the specified title and message.
        /// </summary>
        /// <param name="title">The title of the warning dialog.</param>
        /// <param name="message">The message to display in the warning dialog.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task ShowWarningAsync(string title, string message);
        /// <summary>
        /// Displays an informational dialog to the user with the specified title and message.
        /// </summary>
        /// <param name="title">The title of the informational dialog.</param>
        /// <param name="message">The message to display in the informational dialog.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task ShowInfoAsync(string title, string message);
        /// <summary>
        /// Displays a validation error dialog to the user with the specified title, 
        /// a list of error messages, and a list of warning messages.
        /// </summary>
        /// <param name="title">The title of the validation error dialog.</param>
        /// <param name="errors">A collection of error messages to display in the dialog.</param>
        /// <param name="warnings">A collection of warning messages to display in the dialog.</param>
        /// <returns>A task that represents the asynchronous operation.</returns>
        Task ShowValidationErrorsAsync(string title, IEnumerable<string> errors, IEnumerable<string> warnings);
        /// <summary>
        /// Displays a confirmation dialog to the user with the specified title, message, and customizable confirmation and cancellation button texts.
        /// </summary>
        /// <param name="title">The title of the confirmation dialog.</param>
        /// <param name="message">The message to display in the confirmation dialog.</param>
        /// <param name="confirmText">The text to display on the confirmation button. Defaults to "Yes".</param>
        /// <param name="cancelText">The text to display on the cancellation button. Defaults to "No".</param>
        /// <returns>A task that represents the asynchronous operation. The task result contains a boolean value indicating whether the user confirmed (true) or canceled (false) the action.</returns>
        Task<bool> ShowConfirmationAsync(string title, string message, string confirmText = "Yes", string cancelText = "No");
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ValidationRules\AccessibilityValidationRule.cs
================================================================================

using Avalonia.Media;

namespace AvaloniaThemeManager.Theme.ValidationRules
{
    /// <summary>
    /// Validates themes for accessibility compliance including WCAG guidelines.
    /// </summary>
    public class AccessibilityValidationRule : IThemeValidationRule
    {
        private const double WcagAaContrastRatio = 4.5;
        private const double WcagAaaContrastRatio = 7.0;
        private const double MinimumFontSize = 12.0;
        private const double RecommendedMinimumFontSize = 14.0;
        private const double MaximumRecommendedFontSize = 32.0;

        /// <summary>
        /// Validates theme for accessibility compliance across multiple criteria.
        /// </summary>
        /// <param name="theme">The theme to validate</param>
        /// <returns>Validation result with accessibility errors or warnings</returns>
        public ThemeValidationResult Validate(Skin theme)
        {
            var result = new ThemeValidationResult();
            var validator = new ThemeValidator();

            // WCAG 2.1 Color Contrast Validation
            ValidateColorContrast(theme, validator, result);

            // Font Size Accessibility
            ValidateFontSizes(theme, result);

            // Color-Only Information (check for sufficient differentiation)
            ValidateColorDifferentiation(theme, validator, result);

            // Focus Indicators
            ValidateFocusIndicators(theme, validator, result);

            // Status Colors Accessibility
            ValidateStatusColors(theme, validator, result);

            // Motion and Animation Considerations
            ValidateVisualStability(theme, result);

            return result;
        }

        private void ValidateColorContrast(Skin theme, ThemeValidator validator, ThemeValidationResult result)
        {
            // Primary text on primary background
            var primaryContrast = validator.CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);
            ValidateContrastRatio(primaryContrast, "Primary text on primary background", result);

            // Primary text on secondary background
            var primaryOnSecondaryContrast = validator.CalculateContrastRatio(theme.PrimaryTextColor, theme.SecondaryBackground);
            ValidateContrastRatio(primaryOnSecondaryContrast, "Primary text on secondary background", result);

            // Secondary text on primary background
            var secondaryContrast = validator.CalculateContrastRatio(theme.SecondaryTextColor, theme.PrimaryBackground);
            ValidateContrastRatio(secondaryContrast, "Secondary text on primary background", result, isSecondaryText: true);

            // Secondary text on secondary background
            var secondaryOnSecondaryContrast = validator.CalculateContrastRatio(theme.SecondaryTextColor, theme.SecondaryBackground);
            ValidateContrastRatio(secondaryOnSecondaryContrast, "Secondary text on secondary background", result, isSecondaryText: true);

            // Accent color accessibility
            var accentOnPrimaryContrast = validator.CalculateContrastRatio(theme.AccentColor, theme.PrimaryBackground);
            if (accentOnPrimaryContrast < 3.0)
            {
                result.AddWarning($"Accent color on primary background has low contrast ({accentOnPrimaryContrast:F2}:1). May not be distinguishable for users with visual impairments");
            }
        }

        private void ValidateContrastRatio(double ratio, string context, ThemeValidationResult result, bool isSecondaryText = false)
        {
            var minRatio = isSecondaryText ? 3.0 : WcagAaContrastRatio;
            var recommendedRatio = isSecondaryText ? WcagAaContrastRatio : WcagAaaContrastRatio;

            if (ratio < minRatio)
            {
                result.AddError($"{context} contrast ratio ({ratio:F2}:1) fails WCAG {(isSecondaryText ? "AA" : "AA")} minimum ({minRatio}:1)");
            }
            else if (ratio < recommendedRatio)
            {
                result.AddWarning($"{context} contrast ratio ({ratio:F2}:1) meets minimum but not enhanced WCAG AAA standard ({recommendedRatio}:1)");
            }
        }

        private void ValidateFontSizes(Skin theme, ThemeValidationResult result)
        {
            // Check minimum font sizes for accessibility
            if (theme.FontSizeSmall < MinimumFontSize)
            {
                result.AddError($"Small font size ({theme.FontSizeSmall}px) is below accessibility minimum ({MinimumFontSize}px)");
            }
            else if (theme.FontSizeSmall < RecommendedMinimumFontSize)
            {
                result.AddWarning($"Small font size ({theme.FontSizeSmall}px) is below recommended minimum ({RecommendedMinimumFontSize}px) for good accessibility");
            }

            if (theme.FontSizeMedium < RecommendedMinimumFontSize)
            {
                result.AddWarning($"Medium font size ({theme.FontSizeMedium}px) is below recommended size ({RecommendedMinimumFontSize}px) for primary content");
            }

            // Check for excessively large fonts that might cause layout issues
            if (theme.FontSizeLarge > MaximumRecommendedFontSize)
            {
                result.AddWarning($"Large font size ({theme.FontSizeLarge}px) exceeds recommended maximum ({MaximumRecommendedFontSize}px) and may cause layout issues");
            }

            // Check font size progression for logical hierarchy
            var smallToMediumRatio = theme.FontSizeMedium / theme.FontSizeSmall;
            var mediumToLargeRatio = theme.FontSizeLarge / theme.FontSizeMedium;

            if (smallToMediumRatio < 1.1)
            {
                result.AddWarning("Small and medium font sizes are too similar. Consider larger difference for better visual hierarchy");
            }

            if (mediumToLargeRatio < 1.2)
            {
                result.AddWarning("Medium and large font sizes are too similar. Consider larger difference for better visual hierarchy");
            }
        }

        private void ValidateColorDifferentiation(Skin theme, ThemeValidator validator, ThemeValidationResult result)
        {
            // Check if primary and secondary colors are sufficiently different
            var primarySecondaryDiff = validator.CalculateContrastRatio(theme.PrimaryColor, theme.SecondaryColor);
            if (primarySecondaryDiff < 1.5)
            {
                result.AddWarning($"Primary and secondary colors are very similar ({primarySecondaryDiff:F2}:1). Users may have difficulty distinguishing them");
            }

            // Check background color differentiation
            var backgroundDiff = validator.CalculateContrastRatio(theme.PrimaryBackground, theme.SecondaryBackground);
            if (backgroundDiff < 1.3)
            {
                result.AddWarning($"Primary and secondary backgrounds are very similar ({backgroundDiff:F2}:1). May reduce visual hierarchy");
            }

            // Ensure accent color is sufficiently different from primary colors
            var accentPrimaryDiff = validator.CalculateContrastRatio(theme.AccentColor, theme.PrimaryColor);
            if (accentPrimaryDiff < 2.0)
            {
                result.AddWarning($"Accent color is too similar to primary color ({accentPrimaryDiff:F2}:1). May not provide sufficient emphasis");
            }
        }

        private void ValidateFocusIndicators(Skin theme, ThemeValidator validator, ThemeValidationResult result)
        {
            // Check if accent color (typically used for focus) is visible against backgrounds
            var accentFocusVisibility = validator.CalculateContrastRatio(theme.AccentColor, theme.PrimaryBackground);
            if (accentFocusVisibility < 3.0)
            {
                result.AddError($"Accent color (focus indicator) has insufficient contrast against primary background ({accentFocusVisibility:F2}:1). Focus may not be visible to all users");
            }

            // Check border visibility for focus indicators
            var borderFocusVisibility = validator.CalculateContrastRatio(theme.BorderColor, theme.PrimaryBackground);
            if (borderFocusVisibility < 2.0)
            {
                result.AddWarning($"Border color has low contrast against primary background ({borderFocusVisibility:F2}:1). May impact focus indicator visibility");
            }
        }

        private void ValidateStatusColors(Skin theme, ThemeValidator validator, ThemeValidationResult result)
        {
            // Validate error color visibility
            var errorVisibility = validator.CalculateContrastRatio(theme.ErrorColor, theme.PrimaryBackground);
            if (errorVisibility < 3.0)
            {
                result.AddError($"Error color has insufficient contrast ({errorVisibility:F2}:1). Critical error messages may not be visible");
            }

            // Validate warning color visibility
            var warningVisibility = validator.CalculateContrastRatio(theme.WarningColor, theme.PrimaryBackground);
            if (warningVisibility < 3.0)
            {
                result.AddWarning($"Warning color has low contrast ({warningVisibility:F2}:1). Warning messages may not be clearly visible");
            }

            // Validate success color visibility
            var successVisibility = validator.CalculateContrastRatio(theme.SuccessColor, theme.PrimaryBackground);
            if (successVisibility < 3.0)
            {
                result.AddWarning($"Success color has low contrast ({successVisibility:F2}:1). Success messages may not be clearly visible");
            }

            // Check that status colors are sufficiently different from each other
            ValidateStatusColorDifferentiation(theme, validator, result);
        }

        private void ValidateStatusColorDifferentiation(Skin theme, ThemeValidator validator, ThemeValidationResult result)
        {
            var errorWarningDiff = validator.CalculateContrastRatio(theme.ErrorColor, theme.WarningColor);
            if (errorWarningDiff < 2.0)
            {
                result.AddWarning($"Error and warning colors are too similar ({errorWarningDiff:F2}:1). Users may confuse error and warning states");
            }

            var errorSuccessDiff = validator.CalculateContrastRatio(theme.ErrorColor, theme.SuccessColor);
            if (errorSuccessDiff < 2.0)
            {
                result.AddWarning($"Error and success colors are too similar ({errorSuccessDiff:F2}:1). Users may confuse error and success states");
            }

            var warningSuccessDiff = validator.CalculateContrastRatio(theme.WarningColor, theme.SuccessColor);
            if (warningSuccessDiff < 2.0)
            {
                result.AddWarning($"Warning and success colors are too similar ({warningSuccessDiff:F2}:1). Users may confuse warning and success states");
            }
        }

        private void ValidateVisualStability(Skin theme, ThemeValidationResult result)
        {
            // Check for colors that might trigger photosensitive epilepsy
            if (IsHighSaturationColor(theme.AccentColor) || IsHighSaturationColor(theme.ErrorColor))
            {
                result.AddWarning("Theme contains very bright, saturated colors that could be problematic for users with photosensitive conditions");
            }

            // Check for extreme contrast that might cause eye strain
            var textBackgroundContrast = new ThemeValidator().CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);
            if (textBackgroundContrast > 15.0)
            {
                result.AddWarning($"Very high contrast ratio ({textBackgroundContrast:F2}:1) may cause eye strain for some users during extended use");
            }
        }

        private bool IsHighSaturationColor(Color color)
        {
            // Convert to HSV to check saturation
            var max = Math.Max(color.R, Math.Max(color.G, color.B)) / 255.0;
            var min = Math.Min(color.R, Math.Min(color.G, color.B)) / 255.0;

            var saturation = max == 0 ? 0 : (max - min) / max;
            var value = max;

            // High saturation (>0.8) and high value (>0.8) might be problematic
            return saturation > 0.8 && value > 0.8;
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ValidationRules\BorderValidationRule.cs
================================================================================

namespace AvaloniaThemeManager.Theme.ValidationRules
{
    /// <summary>
    /// Validates border-related properties of themes to ensure visual consistency and usability.
    /// </summary>
    public class BorderValidationRule : IThemeValidationRule
    {
        /// <summary>
        /// Validates border properties including thickness, radius, and color contrast.
        /// </summary>
        /// <param name="theme">The theme to validate</param>
        /// <returns>Validation result with any errors or warnings</returns>
        public ThemeValidationResult Validate(Skin theme)
        {
            var result = new ThemeValidationResult();

            // Validate border thickness
            ValidateBorderThickness(theme, result);

            // Validate border radius
            ValidateBorderRadius(theme, result);

            // Validate border color contrast
            ValidateBorderColorContrast(theme, result);

            return result;
        }

        private void ValidateBorderThickness(Skin theme, ThemeValidationResult result)
        {
            var thickness = theme.BorderThickness;

            // Check for negative values
            if (thickness.Left < 0 || thickness.Top < 0 || thickness.Right < 0 || thickness.Bottom < 0)
            {
                result.AddError("Border thickness values cannot be negative");
            }

            // Check for excessive thickness
            var maxThickness = Math.Max(Math.Max(thickness.Left, thickness.Right),
                                      Math.Max(thickness.Top, thickness.Bottom));
            if (maxThickness > 10)
            {
                result.AddWarning($"Border thickness ({maxThickness}) is very large and may impact usability");
            }

            // Check for zero thickness (might be intentional)
            if (thickness.Left == 0 && thickness.Top == 0 && thickness.Right == 0 && thickness.Bottom == 0)
            {
                result.AddWarning("All border thickness values are zero - borders will be invisible");
            }
        }

        private void ValidateBorderRadius(Skin theme, ThemeValidationResult result)
        {
            var radius = theme.BorderRadius;

            // Check for negative radius
            if (radius < 0)
            {
                result.AddError($"Border radius ({radius}) cannot be negative");
            }

            // Check for excessive radius
            if (radius > 50)
            {
                result.AddWarning($"Border radius ({radius}) is very large and may cause visual issues");
            }

            // Check for very small radius that might not be visible
            if (radius > 0 && radius < 1)
            {
                result.AddWarning($"Border radius ({radius}) is very small and may not be visible");
            }
        }

        private void ValidateBorderColorContrast(Skin theme, ThemeValidationResult result)
        {
            var validator = new ThemeValidator();

            // Check border contrast against primary background
            var primaryBorderContrast = validator.CalculateContrastRatio(theme.BorderColor, theme.PrimaryBackground);
            if (primaryBorderContrast < 1.5)
            {
                result.AddError($"Border color has insufficient contrast against primary background (ratio: {primaryBorderContrast:F2})");
            }
            else if (primaryBorderContrast < 2.0)
            {
                result.AddWarning($"Border color has low contrast against primary background (ratio: {primaryBorderContrast:F2})");
            }

            // Check border contrast against secondary background
            var secondaryBorderContrast = validator.CalculateContrastRatio(theme.BorderColor, theme.SecondaryBackground);
            if (secondaryBorderContrast < 1.5)
            {
                result.AddError($"Border color has insufficient contrast against secondary background (ratio: {secondaryBorderContrast:F2})");
            }
            else if (secondaryBorderContrast < 2.0)
            {
                result.AddWarning($"Border color has low contrast against secondary background (ratio: {secondaryBorderContrast:F2})");
            }

            // Check if border color is too similar to text colors (might cause confusion)
            var textSimilarity = validator.CalculateContrastRatio(theme.BorderColor, theme.PrimaryTextColor);
            if (textSimilarity < 1.2)
            {
                result.AddWarning("Border color is very similar to primary text color, which may cause visual confusion");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ValidationRules\ColorValidationRule.cs
================================================================================

namespace AvaloniaThemeManager.Theme.ValidationRules
{
    /// <summary>
    /// 
    /// </summary>
    public class ColorContrastValidationRule : IThemeValidationRule
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="theme"></param>
        /// <returns></returns>
        public ThemeValidationResult Validate(Skin theme)
        {
            var result = new ThemeValidationResult();
            var validator = new ThemeValidator();

            // Check primary text contrast
            var primaryContrast = validator.CalculateContrastRatio(theme.PrimaryTextColor, theme.PrimaryBackground);
            if (primaryContrast < 4.5) // WCAG AA standard
            {
                result.AddError($"Primary text contrast ratio ({primaryContrast:F2}) is below WCAG AA standard (4.5:1)");
            }
            else if (primaryContrast < 7.0) // WCAG AAA standard
            {
                result.AddWarning($"Primary text contrast ratio ({primaryContrast:F2}) is below WCAG AAA standard (7.0:1)");
            }

            // Check secondary text contrast
            var secondaryContrast = validator.CalculateContrastRatio(theme.SecondaryTextColor, theme.SecondaryBackground);
            if (secondaryContrast < 3.0) // More lenient for secondary text
            {
                result.AddError($"Secondary text contrast ratio ({secondaryContrast:F2}) is below minimum standard (3.0:1)");
            }

            // Check accent color readability
            var accentContrast = validator.CalculateContrastRatio(theme.PrimaryTextColor, theme.AccentColor);
            if (accentContrast < 3.0)
            {
                result.AddWarning($"Accent color contrast with primary text ({accentContrast:F2}) may be difficult to read");
            }

            return result;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ValidationRules\FontValidationRule.cs
================================================================================

namespace AvaloniaThemeManager.Theme.ValidationRules
{
    /// <summary>
    /// 
    /// </summary>
    public class FontSizeValidationRule : IThemeValidationRule
    {
        /// <summary>
        /// 
        /// </summary>
        public ThemeValidationResult Validate(Skin theme)
        {
            var result = new ThemeValidationResult();

            if (theme.FontSizeSmall < 8 || theme.FontSizeSmall > 20)
            {
                result.AddError($"Small font size ({theme.FontSizeSmall}) should be between 8 and 20");
            }

            if (theme.FontSizeMedium < 10 || theme.FontSizeMedium > 24)
            {
                result.AddError($"Medium font size ({theme.FontSizeMedium}) should be between 10 and 24");
            }

            if (theme.FontSizeLarge < 12 || theme.FontSizeLarge > 32)
            {
                result.AddError($"Large font size ({theme.FontSizeLarge}) should be between 12 and 32");
            }

            if (theme.FontSizeSmall >= theme.FontSizeMedium)
            {
                result.AddError("Small font size should be smaller than medium font size");
            }

            if (theme.FontSizeMedium >= theme.FontSizeLarge)
            {
                result.AddError("Medium font size should be smaller than large font size");
            }

            return result;
        }
    }
}

================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Theme\ValidationRules\NameValidationRule.cs
================================================================================

using System.Text.RegularExpressions;

namespace AvaloniaThemeManager.Theme.ValidationRules
{
    /// <summary>
    /// Validates theme naming conventions and ensures proper identification.
    /// </summary>
    public class NameValidationRule : IThemeValidationRule
    {
        private static readonly Regex ValidNamePattern = new Regex(@"^[a-zA-Z0-9\s\-_\.]+$", RegexOptions.Compiled);
        private static readonly string[] ReservedNames = { "Default", "System", "Auto", "None", "Null", "Empty" };
        private static readonly string[] ProblematicNames = { "Test", "Debug", "Temp", "Sample" };

        /// <summary>
        /// Validates theme name for proper format, uniqueness, and conventions.
        /// </summary>
        /// <param name="theme">The theme to validate</param>
        /// <returns>Validation result with any errors or warnings</returns>
        public ThemeValidationResult Validate(Skin theme)
        {
            var result = new ThemeValidationResult();

            // Validate name existence
            ValidateNameExists(theme, result);

            // Validate name format
            ValidateNameFormat(theme, result);

            // Validate name length
            ValidateNameLength(theme, result);

            // Validate reserved names
            ValidateReservedNames(theme, result);

            // Validate naming conventions
            ValidateNamingConventions(theme, result);

            return result;
        }

        private void ValidateNameExists(Skin theme, ThemeValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name))
            {
                result.AddError("Theme name is required and cannot be null or empty");
                return;
            }

            if (string.IsNullOrWhiteSpace(theme.Name))
            {
                result.AddError("Theme name cannot be only whitespace");
            }
        }

        private void ValidateNameFormat(Skin theme, ThemeValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            // Check for valid characters
            if (!ValidNamePattern.IsMatch(theme.Name))
            {
                result.AddError("Theme name contains invalid characters. Only letters, numbers, spaces, hyphens, underscores, and periods are allowed");
            }

            // Check for leading/trailing whitespace
            if (theme.Name != theme.Name.Trim())
            {
                result.AddWarning("Theme name has leading or trailing whitespace");
            }

            // Check for multiple consecutive spaces
            if (theme.Name.Contains("  "))
            {
                result.AddWarning("Theme name contains multiple consecutive spaces");
            }

            // Check for starting with special characters
            if (theme.Name.StartsWith("-") || theme.Name.StartsWith("_") || theme.Name.StartsWith("."))
            {
                result.AddWarning("Theme name starts with a special character, which may cause sorting issues");
            }
        }

        private void ValidateNameLength(Skin theme, ThemeValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            // Check minimum length
            if (theme.Name.Trim().Length < 2)
            {
                result.AddError("Theme name must be at least 2 characters long");
            }

            // Check maximum length
            if (theme.Name.Length > 50)
            {
                result.AddError($"Theme name is too long ({theme.Name.Length} characters). Maximum length is 50 characters");
            }
            else if (theme.Name.Length > 30)
            {
                result.AddWarning($"Theme name is quite long ({theme.Name.Length} characters). Consider a shorter name for better UI display");
            }
        }

        private void ValidateReservedNames(Skin theme, ThemeValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            var nameLower = theme.Name.ToLowerInvariant().Trim();

            // Check reserved system names
            if (ReservedNames.Any(reserved => string.Equals(nameLower, reserved.ToLowerInvariant(), StringComparison.OrdinalIgnoreCase)))
            {
                result.AddError($"'{theme.Name}' is a reserved name and cannot be used for custom themes");
            }

            // Check problematic names that might cause confusion
            if (ProblematicNames.Any(problematic => string.Equals(nameLower, problematic.ToLowerInvariant(), StringComparison.OrdinalIgnoreCase)))
            {
                result.AddWarning($"'{theme.Name}' might be confusing as it suggests a temporary or development theme");
            }

            // Check for names that might conflict with file system
            if (nameLower.Contains("con") || nameLower.Contains("prn") || nameLower.Contains("aux") ||
                nameLower.Contains("nul") || nameLower.StartsWith("com") || nameLower.StartsWith("lpt"))
            {
                result.AddWarning($"'{theme.Name}' contains patterns that might cause issues on some file systems");
            }
        }

        private void ValidateNamingConventions(Skin theme, ThemeValidationResult result)
        {
            if (string.IsNullOrEmpty(theme.Name)) return;

            var name = theme.Name.Trim();

            // Check for descriptive naming
            if (name.Length < 4 && !char.IsUpper(name[0]))
            {
                result.AddWarning("Very short theme names should be capitalized for better readability");
            }

            // Check for version numbers in name (might indicate poor naming)
            if (Regex.IsMatch(name, @"\bv?\d+(\.\d+)*\b", RegexOptions.IgnoreCase))
            {
                result.AddWarning("Theme name contains version numbers. Consider using metadata for versioning instead");
            }

            // Check for excessive capitalization
            var upperCaseCount = name.Count(char.IsUpper);
            var letterCount = name.Count(char.IsLetter);
            if (letterCount > 0 && (upperCaseCount / (double)letterCount) > 0.6)
            {
                result.AddWarning("Theme name has excessive capitalization, which may impact readability");
            }

            // Check for common naming patterns
            if (name.ToLowerInvariant().EndsWith("theme") || name.ToLowerInvariant().EndsWith("skin"))
            {
                result.AddWarning("Theme name ends with 'theme' or 'skin', which is redundant in this context");
            }

            // Suggest better naming for generic names
            if (name.ToLowerInvariant().Equals("theme") || name.ToLowerInvariant().Equals("skin") ||
                name.ToLowerInvariant().Equals("custom") || name.ToLowerInvariant().Equals("new"))
            {
                result.AddWarning($"'{name}' is too generic. Consider a more descriptive name that reflects the theme's characteristics");
            }
        }
    }
}
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Cyberpunk\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Dark\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Dark\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Forest Green\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Forest Green\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\High Contrast\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\High Contrast\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Light\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Light\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernExpanderTheme" TargetType="Expander">
        <Setter Property="Padding" Value="6" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTabControlTheme" TargetType="TabControl">
        <Setter Property="Background" Value="{DynamicResource SecondaryBackground}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\ModernIce\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="ModernTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="White" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Ocean Blue\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Ocean Blue\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Purple Haze\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\Purple Haze\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource PrimaryColorBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
        <Setter Property="CornerRadius" Value="0" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\CheckBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroCheckBoxTheme" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\ComboBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroComboBoxTheme" TargetType="ComboBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\Expander.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroExpanderTheme" TargetType="Expander">
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\Slider.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroSliderTheme" TargetType="Slider">
        <Setter Property="Foreground" Value="{DynamicResource AccentBlueBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\TabControl.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTabControlTheme" TargetType="TabControl">
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\Themes\RetroTerminal\ControlThemes\TextBox.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="RetroTextBoxTheme" TargetType="TextBox">
        <Setter Property="Background" Value="{DynamicResource BackgroundLightBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="BorderBrush" Value="{DynamicResource BorderBrush}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Debug\net8.0\Themes\Forest Green\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Debug\net8.0\Themes\Forest Green\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Debug\net8.0\Themes\High Contrast\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Debug\net8.0\Themes\High Contrast\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Release\net8.0\Themes\Forest Green\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Release\net8.0\Themes\Forest Green\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Release\net8.0\Themes\High Contrast\ControlThemes\Button.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultButtonTheme" TargetType="Button">
        <Setter Property="Background" Value="{DynamicResource AccentBlueBrush}" />
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="CornerRadius" Value="{DynamicResource CornerRadius}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
    </ControlTheme>
</ResourceDictionary>
================================================================================
File: C:\Users\jonms\source\repos\AvaloniaThemeManager\AvaloniaThemeManager\bin\Release\net8.0\Themes\High Contrast\ControlThemes\TextBlock.axaml
================================================================================

<ResourceDictionary xmlns="https://github.com/avaloniaui" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ControlTheme x:Key="DefaultTextBlockTheme" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource TextPrimaryBrush}" />
        <Setter Property="FontSize" Value="{DynamicResource FontSizeMedium}" />
        <Setter Property="FontFamily" Value="{DynamicResource DefaultFontFamily}" />
    </ControlTheme>
</ResourceDictionary>